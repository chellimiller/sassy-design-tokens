@use './tokens.scss' as *;

/// Applies the `$token` to the CSS `accent-color` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Basic User Interface
/// @access public
/// @param {string} $token ["accent-color"] - Name of token to apply to the property.
/// @output CSS `accent-color` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/accent-color
@mixin accent-color($token: "accent-color") {
  @include css-property-with-token("accent-color", $token);
}


/// Applies the `$token` to the CSS `align-content` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Box Alignment
/// @access public
/// @param {string} $token ["align-content"] - Name of token to apply to the property.
/// @output CSS `align-content` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/align-content
@mixin align-content($token: "align-content") {
  @include css-property-with-token("align-content", $token);
}


/// Applies the `$token` to the CSS `align-items` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Box Alignment
/// @access public
/// @param {string} $token ["align-items"] - Name of token to apply to the property.
/// @output CSS `align-items` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/align-items
@mixin align-items($token: "align-items") {
  @include css-property-with-token("align-items", $token);
}


/// Applies the `$token` to the CSS `align-self` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Box Alignment
/// @access public
/// @param {string} $token ["align-self"] - Name of token to apply to the property.
/// @output CSS `align-self` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/align-self
@mixin align-self($token: "align-self") {
  @include css-property-with-token("align-self", $token);
}


/// Applies the `$token` to the CSS `align-tracks` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Grid Layout
/// @access public
/// @param {string} $token ["align-tracks"] - Name of token to apply to the property.
/// @output CSS `align-tracks` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/align-tracks
@mixin align-tracks($token: "align-tracks") {
  @include css-property-with-token("align-tracks", $token);
}


/// Applies the `$token` to the CSS `all` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Miscellaneous
/// @access public
/// @param {string} $token ["all"] - Name of token to apply to the property.
/// @output CSS `all` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/all
@mixin all($token: "all") {
  @include css-property-with-token("all", $token);
}


/// Applies the `$token` to the CSS `animation` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Animations
/// @access public
/// @param {string} $token ["animation"] - Name of token to apply to the property.
/// @output CSS `animation` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/animation
@mixin animation($token: "animation") {
  @include css-property-with-token("animation", $token);
}


/// Applies the `$token` to the CSS `animation-delay` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Animations
/// @access public
/// @param {string} $token ["animation-delay"] - Name of token to apply to the property.
/// @output CSS `animation-delay` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/animation-delay
@mixin animation-delay($token: "animation-delay") {
  @include css-property-with-token("animation-delay", $token);
}


/// Applies the `$token` to the CSS `animation-direction` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Animations
/// @access public
/// @param {string} $token ["animation-direction"] - Name of token to apply to the property.
/// @output CSS `animation-direction` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/animation-direction
@mixin animation-direction($token: "animation-direction") {
  @include css-property-with-token("animation-direction", $token);
}


/// Applies the `$token` to the CSS `animation-duration` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Animations
/// @access public
/// @param {string} $token ["animation-duration"] - Name of token to apply to the property.
/// @output CSS `animation-duration` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/animation-duration
@mixin animation-duration($token: "animation-duration") {
  @include css-property-with-token("animation-duration", $token);
}


/// Applies the `$token` to the CSS `animation-fill-mode` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Animations
/// @access public
/// @param {string} $token ["animation-fill-mode"] - Name of token to apply to the property.
/// @output CSS `animation-fill-mode` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/animation-fill-mode
@mixin animation-fill-mode($token: "animation-fill-mode") {
  @include css-property-with-token("animation-fill-mode", $token);
}


/// Applies the `$token` to the CSS `animation-iteration-count` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Animations
/// @access public
/// @param {string} $token ["animation-iteration-count"] - Name of token to apply to the property.
/// @output CSS `animation-iteration-count` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/animation-iteration-count
@mixin animation-iteration-count($token: "animation-iteration-count") {
  @include css-property-with-token("animation-iteration-count", $token);
}


/// Applies the `$token` to the CSS `animation-name` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Animations
/// @access public
/// @param {string} $token ["animation-name"] - Name of token to apply to the property.
/// @output CSS `animation-name` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/animation-name
@mixin animation-name($token: "animation-name") {
  @include css-property-with-token("animation-name", $token);
}


/// Applies the `$token` to the CSS `animation-play-state` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Animations
/// @access public
/// @param {string} $token ["animation-play-state"] - Name of token to apply to the property.
/// @output CSS `animation-play-state` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/animation-play-state
@mixin animation-play-state($token: "animation-play-state") {
  @include css-property-with-token("animation-play-state", $token);
}


/// Applies the `$token` to the CSS `animation-timing-function` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Animations
/// @access public
/// @param {string} $token ["animation-timing-function"] - Name of token to apply to the property.
/// @output CSS `animation-timing-function` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/animation-timing-function
@mixin animation-timing-function($token: "animation-timing-function") {
  @include css-property-with-token("animation-timing-function", $token);
}


/// Applies the `$token` to the CSS `appearance` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Basic User Interface
/// @access public
/// @param {string} $token ["appearance"] - Name of token to apply to the property.
/// @output CSS `appearance` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/appearance
@mixin appearance($token: "appearance") {
  @include css-property-with-token("appearance", $token);
}


/// Applies the `$token` to the CSS `aspect-ratio` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Basic User Interface
/// @access public
/// @param {string} $token ["aspect-ratio"] - Name of token to apply to the property.
/// @output CSS `aspect-ratio` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/aspect-ratio
@mixin aspect-ratio($token: "aspect-ratio") {
  @include css-property-with-token("aspect-ratio", $token);
}


/// Applies the `$token` to the CSS `azimuth` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Speech
/// @access public
/// @param {string} $token ["azimuth"] - Name of token to apply to the property.
/// @output CSS `azimuth` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/azimuth
@mixin azimuth($token: "azimuth") {
  @include css-property-with-token("azimuth", $token);
}


/// Applies the `$token` to the CSS `backdrop-filter` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group Filter Effects
/// @access public
/// @param {string} $token ["backdrop-filter"] - Name of token to apply to the property.
/// @output CSS `backdrop-filter` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/backdrop-filter
@mixin backdrop-filter($token: "backdrop-filter") {
  @include css-property-with-token("backdrop-filter", $token);
}


/// Applies the `$token` to the CSS `backface-visibility` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Transforms
/// @access public
/// @param {string} $token ["backface-visibility"] - Name of token to apply to the property.
/// @output CSS `backface-visibility` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/backface-visibility
@mixin backface-visibility($token: "backface-visibility") {
  @include css-property-with-token("backface-visibility", $token);
}


/// Applies the `$token` to the CSS `background` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Backgrounds and Borders
/// @access public
/// @param {string} $token ["background"] - Name of token to apply to the property.
/// @output CSS `background` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/background
@mixin background($token: "background") {
  @include css-property-with-token("background", $token);
}


/// Applies the `$token` to the CSS `background-attachment` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Backgrounds and Borders
/// @access public
/// @param {string} $token ["background-attachment"] - Name of token to apply to the property.
/// @output CSS `background-attachment` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/background-attachment
@mixin background-attachment($token: "background-attachment") {
  @include css-property-with-token("background-attachment", $token);
}


/// Applies the `$token` to the CSS `background-blend-mode` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group Compositing and Blending
/// @access public
/// @param {string} $token ["background-blend-mode"] - Name of token to apply to the property.
/// @output CSS `background-blend-mode` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/background-blend-mode
@mixin background-blend-mode($token: "background-blend-mode") {
  @include css-property-with-token("background-blend-mode", $token);
}


/// Applies the `$token` to the CSS `background-clip` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Backgrounds and Borders
/// @access public
/// @param {string} $token ["background-clip"] - Name of token to apply to the property.
/// @output CSS `background-clip` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/background-clip
@mixin background-clip($token: "background-clip") {
  @include css-property-with-token("background-clip", $token);
}


/// Applies the `$token` to the CSS `background-color` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Backgrounds and Borders
/// @access public
/// @param {string} $token ["background-color"] - Name of token to apply to the property.
/// @output CSS `background-color` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/background-color
@mixin background-color($token: "background-color") {
  @include css-property-with-token("background-color", $token);
}


/// Applies the `$token` to the CSS `background-image` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Backgrounds and Borders
/// @access public
/// @param {string} $token ["background-image"] - Name of token to apply to the property.
/// @output CSS `background-image` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/background-image
@mixin background-image($token: "background-image") {
  @include css-property-with-token("background-image", $token);
}


/// Applies the `$token` to the CSS `background-origin` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Backgrounds and Borders
/// @access public
/// @param {string} $token ["background-origin"] - Name of token to apply to the property.
/// @output CSS `background-origin` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/background-origin
@mixin background-origin($token: "background-origin") {
  @include css-property-with-token("background-origin", $token);
}


/// Applies the `$token` to the CSS `background-position` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Backgrounds and Borders
/// @access public
/// @param {string} $token ["background-position"] - Name of token to apply to the property.
/// @output CSS `background-position` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/background-position
@mixin background-position($token: "background-position") {
  @include css-property-with-token("background-position", $token);
}


/// Applies the `$token` to the CSS `background-position-x` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Backgrounds and Borders
/// @access public
/// @param {string} $token ["background-position-x"] - Name of token to apply to the property.
/// @output CSS `background-position-x` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/background-position-x
@mixin background-position-x($token: "background-position-x") {
  @include css-property-with-token("background-position-x", $token);
}


/// Applies the `$token` to the CSS `background-position-y` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Backgrounds and Borders
/// @access public
/// @param {string} $token ["background-position-y"] - Name of token to apply to the property.
/// @output CSS `background-position-y` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/background-position-y
@mixin background-position-y($token: "background-position-y") {
  @include css-property-with-token("background-position-y", $token);
}


/// Applies the `$token` to the CSS `background-repeat` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Backgrounds and Borders
/// @access public
/// @param {string} $token ["background-repeat"] - Name of token to apply to the property.
/// @output CSS `background-repeat` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/background-repeat
@mixin background-repeat($token: "background-repeat") {
  @include css-property-with-token("background-repeat", $token);
}


/// Applies the `$token` to the CSS `background-size` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Backgrounds and Borders
/// @access public
/// @param {string} $token ["background-size"] - Name of token to apply to the property.
/// @output CSS `background-size` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/background-size
@mixin background-size($token: "background-size") {
  @include css-property-with-token("background-size", $token);
}


/// Applies the `$token` to the CSS `block-overflow` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Overflow
/// @access public
/// @param {string} $token ["block-overflow"] - Name of token to apply to the property.
/// @output CSS `block-overflow` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/block-overflow
@mixin block-overflow($token: "block-overflow") {
  @include css-property-with-token("block-overflow", $token);
}


/// Applies the `$token` to the CSS `block-size` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Logical Properties
/// @access public
/// @param {string} $token ["block-size"] - Name of token to apply to the property.
/// @output CSS `block-size` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/block-size
@mixin block-size($token: "block-size") {
  @include css-property-with-token("block-size", $token);
}


/// Applies the `$token` to the CSS `border` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Backgrounds and Borders
/// @access public
/// @param {string} $token ["border"] - Name of token to apply to the property.
/// @output CSS `border` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/border
@mixin border($token: "border") {
  @include css-property-with-token("border", $token);
}


/// Applies the `$token` to the CSS `border-block` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Logical Properties
/// @access public
/// @param {string} $token ["border-block"] - Name of token to apply to the property.
/// @output CSS `border-block` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/border-block
@mixin border-block($token: "border-block") {
  @include css-property-with-token("border-block", $token);
}


/// Applies the `$token` to the CSS `border-block-color` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Logical Properties
/// @access public
/// @param {string} $token ["border-block-color"] - Name of token to apply to the property.
/// @output CSS `border-block-color` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/border-block-color
@mixin border-block-color($token: "border-block-color") {
  @include css-property-with-token("border-block-color", $token);
}


/// Applies the `$token` to the CSS `border-block-style` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Logical Properties
/// @access public
/// @param {string} $token ["border-block-style"] - Name of token to apply to the property.
/// @output CSS `border-block-style` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/border-block-style
@mixin border-block-style($token: "border-block-style") {
  @include css-property-with-token("border-block-style", $token);
}


/// Applies the `$token` to the CSS `border-block-width` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Logical Properties
/// @access public
/// @param {string} $token ["border-block-width"] - Name of token to apply to the property.
/// @output CSS `border-block-width` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/border-block-width
@mixin border-block-width($token: "border-block-width") {
  @include css-property-with-token("border-block-width", $token);
}


/// Applies the `$token` to the CSS `border-block-end` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Logical Properties
/// @access public
/// @param {string} $token ["border-block-end"] - Name of token to apply to the property.
/// @output CSS `border-block-end` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/border-block-end
@mixin border-block-end($token: "border-block-end") {
  @include css-property-with-token("border-block-end", $token);
}


/// Applies the `$token` to the CSS `border-block-end-color` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Logical Properties
/// @access public
/// @param {string} $token ["border-block-end-color"] - Name of token to apply to the property.
/// @output CSS `border-block-end-color` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/border-block-end-color
@mixin border-block-end-color($token: "border-block-end-color") {
  @include css-property-with-token("border-block-end-color", $token);
}


/// Applies the `$token` to the CSS `border-block-end-style` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Logical Properties
/// @access public
/// @param {string} $token ["border-block-end-style"] - Name of token to apply to the property.
/// @output CSS `border-block-end-style` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/border-block-end-style
@mixin border-block-end-style($token: "border-block-end-style") {
  @include css-property-with-token("border-block-end-style", $token);
}


/// Applies the `$token` to the CSS `border-block-end-width` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Logical Properties
/// @access public
/// @param {string} $token ["border-block-end-width"] - Name of token to apply to the property.
/// @output CSS `border-block-end-width` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/border-block-end-width
@mixin border-block-end-width($token: "border-block-end-width") {
  @include css-property-with-token("border-block-end-width", $token);
}


/// Applies the `$token` to the CSS `border-block-start` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Logical Properties
/// @access public
/// @param {string} $token ["border-block-start"] - Name of token to apply to the property.
/// @output CSS `border-block-start` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/border-block-start
@mixin border-block-start($token: "border-block-start") {
  @include css-property-with-token("border-block-start", $token);
}


/// Applies the `$token` to the CSS `border-block-start-color` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Logical Properties
/// @access public
/// @param {string} $token ["border-block-start-color"] - Name of token to apply to the property.
/// @output CSS `border-block-start-color` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/border-block-start-color
@mixin border-block-start-color($token: "border-block-start-color") {
  @include css-property-with-token("border-block-start-color", $token);
}


/// Applies the `$token` to the CSS `border-block-start-style` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Logical Properties
/// @access public
/// @param {string} $token ["border-block-start-style"] - Name of token to apply to the property.
/// @output CSS `border-block-start-style` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/border-block-start-style
@mixin border-block-start-style($token: "border-block-start-style") {
  @include css-property-with-token("border-block-start-style", $token);
}


/// Applies the `$token` to the CSS `border-block-start-width` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Logical Properties
/// @access public
/// @param {string} $token ["border-block-start-width"] - Name of token to apply to the property.
/// @output CSS `border-block-start-width` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/border-block-start-width
@mixin border-block-start-width($token: "border-block-start-width") {
  @include css-property-with-token("border-block-start-width", $token);
}


/// Applies the `$token` to the CSS `border-bottom` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Backgrounds and Borders
/// @access public
/// @param {string} $token ["border-bottom"] - Name of token to apply to the property.
/// @output CSS `border-bottom` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/border-bottom
@mixin border-bottom($token: "border-bottom") {
  @include css-property-with-token("border-bottom", $token);
}


/// Applies the `$token` to the CSS `border-bottom-color` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Backgrounds and Borders
/// @access public
/// @param {string} $token ["border-bottom-color"] - Name of token to apply to the property.
/// @output CSS `border-bottom-color` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/border-bottom-color
@mixin border-bottom-color($token: "border-bottom-color") {
  @include css-property-with-token("border-bottom-color", $token);
}


/// Applies the `$token` to the CSS `border-bottom-left-radius` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Backgrounds and Borders
/// @access public
/// @param {string} $token ["border-bottom-left-radius"] - Name of token to apply to the property.
/// @output CSS `border-bottom-left-radius` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/border-bottom-left-radius
@mixin border-bottom-left-radius($token: "border-bottom-left-radius") {
  @include css-property-with-token("border-bottom-left-radius", $token);
}


/// Applies the `$token` to the CSS `border-bottom-right-radius` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Backgrounds and Borders
/// @access public
/// @param {string} $token ["border-bottom-right-radius"] - Name of token to apply to the property.
/// @output CSS `border-bottom-right-radius` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/border-bottom-right-radius
@mixin border-bottom-right-radius($token: "border-bottom-right-radius") {
  @include css-property-with-token("border-bottom-right-radius", $token);
}


/// Applies the `$token` to the CSS `border-bottom-style` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Backgrounds and Borders
/// @access public
/// @param {string} $token ["border-bottom-style"] - Name of token to apply to the property.
/// @output CSS `border-bottom-style` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/border-bottom-style
@mixin border-bottom-style($token: "border-bottom-style") {
  @include css-property-with-token("border-bottom-style", $token);
}


/// Applies the `$token` to the CSS `border-bottom-width` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Backgrounds and Borders
/// @access public
/// @param {string} $token ["border-bottom-width"] - Name of token to apply to the property.
/// @output CSS `border-bottom-width` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/border-bottom-width
@mixin border-bottom-width($token: "border-bottom-width") {
  @include css-property-with-token("border-bottom-width", $token);
}


/// Applies the `$token` to the CSS `border-collapse` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Table
/// @access public
/// @param {string} $token ["border-collapse"] - Name of token to apply to the property.
/// @output CSS `border-collapse` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/border-collapse
@mixin border-collapse($token: "border-collapse") {
  @include css-property-with-token("border-collapse", $token);
}


/// Applies the `$token` to the CSS `border-color` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Backgrounds and Borders
/// @access public
/// @param {string} $token ["border-color"] - Name of token to apply to the property.
/// @output CSS `border-color` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/border-color
@mixin border-color($token: "border-color") {
  @include css-property-with-token("border-color", $token);
}


/// Applies the `$token` to the CSS `border-end-end-radius` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Logical Properties
/// @access public
/// @param {string} $token ["border-end-end-radius"] - Name of token to apply to the property.
/// @output CSS `border-end-end-radius` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/border-end-end-radius
@mixin border-end-end-radius($token: "border-end-end-radius") {
  @include css-property-with-token("border-end-end-radius", $token);
}


/// Applies the `$token` to the CSS `border-end-start-radius` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Logical Properties
/// @access public
/// @param {string} $token ["border-end-start-radius"] - Name of token to apply to the property.
/// @output CSS `border-end-start-radius` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/border-end-start-radius
@mixin border-end-start-radius($token: "border-end-start-radius") {
  @include css-property-with-token("border-end-start-radius", $token);
}


/// Applies the `$token` to the CSS `border-image` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Backgrounds and Borders
/// @access public
/// @param {string} $token ["border-image"] - Name of token to apply to the property.
/// @output CSS `border-image` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/border-image
@mixin border-image($token: "border-image") {
  @include css-property-with-token("border-image", $token);
}


/// Applies the `$token` to the CSS `border-image-outset` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Backgrounds and Borders
/// @access public
/// @param {string} $token ["border-image-outset"] - Name of token to apply to the property.
/// @output CSS `border-image-outset` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/border-image-outset
@mixin border-image-outset($token: "border-image-outset") {
  @include css-property-with-token("border-image-outset", $token);
}


/// Applies the `$token` to the CSS `border-image-repeat` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Backgrounds and Borders
/// @access public
/// @param {string} $token ["border-image-repeat"] - Name of token to apply to the property.
/// @output CSS `border-image-repeat` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/border-image-repeat
@mixin border-image-repeat($token: "border-image-repeat") {
  @include css-property-with-token("border-image-repeat", $token);
}


/// Applies the `$token` to the CSS `border-image-slice` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Backgrounds and Borders
/// @access public
/// @param {string} $token ["border-image-slice"] - Name of token to apply to the property.
/// @output CSS `border-image-slice` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/border-image-slice
@mixin border-image-slice($token: "border-image-slice") {
  @include css-property-with-token("border-image-slice", $token);
}


/// Applies the `$token` to the CSS `border-image-source` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Backgrounds and Borders
/// @access public
/// @param {string} $token ["border-image-source"] - Name of token to apply to the property.
/// @output CSS `border-image-source` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/border-image-source
@mixin border-image-source($token: "border-image-source") {
  @include css-property-with-token("border-image-source", $token);
}


/// Applies the `$token` to the CSS `border-image-width` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Backgrounds and Borders
/// @access public
/// @param {string} $token ["border-image-width"] - Name of token to apply to the property.
/// @output CSS `border-image-width` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/border-image-width
@mixin border-image-width($token: "border-image-width") {
  @include css-property-with-token("border-image-width", $token);
}


/// Applies the `$token` to the CSS `border-inline` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Logical Properties
/// @access public
/// @param {string} $token ["border-inline"] - Name of token to apply to the property.
/// @output CSS `border-inline` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/border-inline
@mixin border-inline($token: "border-inline") {
  @include css-property-with-token("border-inline", $token);
}


/// Applies the `$token` to the CSS `border-inline-end` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Logical Properties
/// @access public
/// @param {string} $token ["border-inline-end"] - Name of token to apply to the property.
/// @output CSS `border-inline-end` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/border-inline-end
@mixin border-inline-end($token: "border-inline-end") {
  @include css-property-with-token("border-inline-end", $token);
}


/// Applies the `$token` to the CSS `border-inline-color` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Logical Properties
/// @access public
/// @param {string} $token ["border-inline-color"] - Name of token to apply to the property.
/// @output CSS `border-inline-color` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/border-inline-color
@mixin border-inline-color($token: "border-inline-color") {
  @include css-property-with-token("border-inline-color", $token);
}


/// Applies the `$token` to the CSS `border-inline-style` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Logical Properties
/// @access public
/// @param {string} $token ["border-inline-style"] - Name of token to apply to the property.
/// @output CSS `border-inline-style` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/border-inline-style
@mixin border-inline-style($token: "border-inline-style") {
  @include css-property-with-token("border-inline-style", $token);
}


/// Applies the `$token` to the CSS `border-inline-width` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Logical Properties
/// @access public
/// @param {string} $token ["border-inline-width"] - Name of token to apply to the property.
/// @output CSS `border-inline-width` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/border-inline-width
@mixin border-inline-width($token: "border-inline-width") {
  @include css-property-with-token("border-inline-width", $token);
}


/// Applies the `$token` to the CSS `border-inline-end-color` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Logical Properties
/// @access public
/// @param {string} $token ["border-inline-end-color"] - Name of token to apply to the property.
/// @output CSS `border-inline-end-color` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/border-inline-end-color
@mixin border-inline-end-color($token: "border-inline-end-color") {
  @include css-property-with-token("border-inline-end-color", $token);
}


/// Applies the `$token` to the CSS `border-inline-end-style` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Logical Properties
/// @access public
/// @param {string} $token ["border-inline-end-style"] - Name of token to apply to the property.
/// @output CSS `border-inline-end-style` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/border-inline-end-style
@mixin border-inline-end-style($token: "border-inline-end-style") {
  @include css-property-with-token("border-inline-end-style", $token);
}


/// Applies the `$token` to the CSS `border-inline-end-width` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Logical Properties
/// @access public
/// @param {string} $token ["border-inline-end-width"] - Name of token to apply to the property.
/// @output CSS `border-inline-end-width` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/border-inline-end-width
@mixin border-inline-end-width($token: "border-inline-end-width") {
  @include css-property-with-token("border-inline-end-width", $token);
}


/// Applies the `$token` to the CSS `border-inline-start` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Logical Properties
/// @access public
/// @param {string} $token ["border-inline-start"] - Name of token to apply to the property.
/// @output CSS `border-inline-start` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/border-inline-start
@mixin border-inline-start($token: "border-inline-start") {
  @include css-property-with-token("border-inline-start", $token);
}


/// Applies the `$token` to the CSS `border-inline-start-color` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Logical Properties
/// @access public
/// @param {string} $token ["border-inline-start-color"] - Name of token to apply to the property.
/// @output CSS `border-inline-start-color` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/border-inline-start-color
@mixin border-inline-start-color($token: "border-inline-start-color") {
  @include css-property-with-token("border-inline-start-color", $token);
}


/// Applies the `$token` to the CSS `border-inline-start-style` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Logical Properties
/// @access public
/// @param {string} $token ["border-inline-start-style"] - Name of token to apply to the property.
/// @output CSS `border-inline-start-style` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/border-inline-start-style
@mixin border-inline-start-style($token: "border-inline-start-style") {
  @include css-property-with-token("border-inline-start-style", $token);
}


/// Applies the `$token` to the CSS `border-inline-start-width` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Logical Properties
/// @access public
/// @param {string} $token ["border-inline-start-width"] - Name of token to apply to the property.
/// @output CSS `border-inline-start-width` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/border-inline-start-width
@mixin border-inline-start-width($token: "border-inline-start-width") {
  @include css-property-with-token("border-inline-start-width", $token);
}


/// Applies the `$token` to the CSS `border-left` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Backgrounds and Borders
/// @access public
/// @param {string} $token ["border-left"] - Name of token to apply to the property.
/// @output CSS `border-left` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/border-left
@mixin border-left($token: "border-left") {
  @include css-property-with-token("border-left", $token);
}


/// Applies the `$token` to the CSS `border-left-color` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Backgrounds and Borders
/// @access public
/// @param {string} $token ["border-left-color"] - Name of token to apply to the property.
/// @output CSS `border-left-color` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/border-left-color
@mixin border-left-color($token: "border-left-color") {
  @include css-property-with-token("border-left-color", $token);
}


/// Applies the `$token` to the CSS `border-left-style` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Backgrounds and Borders
/// @access public
/// @param {string} $token ["border-left-style"] - Name of token to apply to the property.
/// @output CSS `border-left-style` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/border-left-style
@mixin border-left-style($token: "border-left-style") {
  @include css-property-with-token("border-left-style", $token);
}


/// Applies the `$token` to the CSS `border-left-width` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Backgrounds and Borders
/// @access public
/// @param {string} $token ["border-left-width"] - Name of token to apply to the property.
/// @output CSS `border-left-width` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/border-left-width
@mixin border-left-width($token: "border-left-width") {
  @include css-property-with-token("border-left-width", $token);
}


/// Applies the `$token` to the CSS `border-radius` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Backgrounds and Borders
/// @access public
/// @param {string} $token ["border-radius"] - Name of token to apply to the property.
/// @output CSS `border-radius` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/border-radius
@mixin border-radius($token: "border-radius") {
  @include css-property-with-token("border-radius", $token);
}


/// Applies the `$token` to the CSS `border-right` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Backgrounds and Borders
/// @access public
/// @param {string} $token ["border-right"] - Name of token to apply to the property.
/// @output CSS `border-right` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/border-right
@mixin border-right($token: "border-right") {
  @include css-property-with-token("border-right", $token);
}


/// Applies the `$token` to the CSS `border-right-color` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Backgrounds and Borders
/// @access public
/// @param {string} $token ["border-right-color"] - Name of token to apply to the property.
/// @output CSS `border-right-color` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/border-right-color
@mixin border-right-color($token: "border-right-color") {
  @include css-property-with-token("border-right-color", $token);
}


/// Applies the `$token` to the CSS `border-right-style` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Backgrounds and Borders
/// @access public
/// @param {string} $token ["border-right-style"] - Name of token to apply to the property.
/// @output CSS `border-right-style` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/border-right-style
@mixin border-right-style($token: "border-right-style") {
  @include css-property-with-token("border-right-style", $token);
}


/// Applies the `$token` to the CSS `border-right-width` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Backgrounds and Borders
/// @access public
/// @param {string} $token ["border-right-width"] - Name of token to apply to the property.
/// @output CSS `border-right-width` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/border-right-width
@mixin border-right-width($token: "border-right-width") {
  @include css-property-with-token("border-right-width", $token);
}


/// Applies the `$token` to the CSS `border-spacing` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Table
/// @access public
/// @param {string} $token ["border-spacing"] - Name of token to apply to the property.
/// @output CSS `border-spacing` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/border-spacing
@mixin border-spacing($token: "border-spacing") {
  @include css-property-with-token("border-spacing", $token);
}


/// Applies the `$token` to the CSS `border-start-end-radius` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Logical Properties
/// @access public
/// @param {string} $token ["border-start-end-radius"] - Name of token to apply to the property.
/// @output CSS `border-start-end-radius` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/border-start-end-radius
@mixin border-start-end-radius($token: "border-start-end-radius") {
  @include css-property-with-token("border-start-end-radius", $token);
}


/// Applies the `$token` to the CSS `border-start-start-radius` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Logical Properties
/// @access public
/// @param {string} $token ["border-start-start-radius"] - Name of token to apply to the property.
/// @output CSS `border-start-start-radius` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/border-start-start-radius
@mixin border-start-start-radius($token: "border-start-start-radius") {
  @include css-property-with-token("border-start-start-radius", $token);
}


/// Applies the `$token` to the CSS `border-style` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Backgrounds and Borders
/// @access public
/// @param {string} $token ["border-style"] - Name of token to apply to the property.
/// @output CSS `border-style` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/border-style
@mixin border-style($token: "border-style") {
  @include css-property-with-token("border-style", $token);
}


/// Applies the `$token` to the CSS `border-top` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Backgrounds and Borders
/// @access public
/// @param {string} $token ["border-top"] - Name of token to apply to the property.
/// @output CSS `border-top` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/border-top
@mixin border-top($token: "border-top") {
  @include css-property-with-token("border-top", $token);
}


/// Applies the `$token` to the CSS `border-top-color` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Backgrounds and Borders
/// @access public
/// @param {string} $token ["border-top-color"] - Name of token to apply to the property.
/// @output CSS `border-top-color` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/border-top-color
@mixin border-top-color($token: "border-top-color") {
  @include css-property-with-token("border-top-color", $token);
}


/// Applies the `$token` to the CSS `border-top-left-radius` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Backgrounds and Borders
/// @access public
/// @param {string} $token ["border-top-left-radius"] - Name of token to apply to the property.
/// @output CSS `border-top-left-radius` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/border-top-left-radius
@mixin border-top-left-radius($token: "border-top-left-radius") {
  @include css-property-with-token("border-top-left-radius", $token);
}


/// Applies the `$token` to the CSS `border-top-right-radius` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Backgrounds and Borders
/// @access public
/// @param {string} $token ["border-top-right-radius"] - Name of token to apply to the property.
/// @output CSS `border-top-right-radius` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/border-top-right-radius
@mixin border-top-right-radius($token: "border-top-right-radius") {
  @include css-property-with-token("border-top-right-radius", $token);
}


/// Applies the `$token` to the CSS `border-top-style` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Backgrounds and Borders
/// @access public
/// @param {string} $token ["border-top-style"] - Name of token to apply to the property.
/// @output CSS `border-top-style` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/border-top-style
@mixin border-top-style($token: "border-top-style") {
  @include css-property-with-token("border-top-style", $token);
}


/// Applies the `$token` to the CSS `border-top-width` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Backgrounds and Borders
/// @access public
/// @param {string} $token ["border-top-width"] - Name of token to apply to the property.
/// @output CSS `border-top-width` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/border-top-width
@mixin border-top-width($token: "border-top-width") {
  @include css-property-with-token("border-top-width", $token);
}


/// Applies the `$token` to the CSS `border-width` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Backgrounds and Borders
/// @access public
/// @param {string} $token ["border-width"] - Name of token to apply to the property.
/// @output CSS `border-width` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/border-width
@mixin border-width($token: "border-width") {
  @include css-property-with-token("border-width", $token);
}


/// Applies the `$token` to the CSS `bottom` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Positioning
/// @access public
/// @param {string} $token ["bottom"] - Name of token to apply to the property.
/// @output CSS `bottom` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/bottom
@mixin bottom($token: "bottom") {
  @include css-property-with-token("bottom", $token);
}


/// Applies the `$token` to the CSS `box-align` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group Mozilla Extensions
/// @access public
/// @param {string} $token ["box-align"] - Name of token to apply to the property.
/// @output CSS `box-align` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/box-align
@mixin box-align($token: "box-align") {
  @include css-property-with-token("box-align", $token);
}


/// Applies the `$token` to the CSS `box-decoration-break` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Fragmentation
/// @access public
/// @param {string} $token ["box-decoration-break"] - Name of token to apply to the property.
/// @output CSS `box-decoration-break` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/box-decoration-break
@mixin box-decoration-break($token: "box-decoration-break") {
  @include css-property-with-token("box-decoration-break", $token);
}


/// Applies the `$token` to the CSS `box-direction` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group Mozilla Extensions
/// @access public
/// @param {string} $token ["box-direction"] - Name of token to apply to the property.
/// @output CSS `box-direction` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/box-direction
@mixin box-direction($token: "box-direction") {
  @include css-property-with-token("box-direction", $token);
}


/// Applies the `$token` to the CSS `box-flex` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group Mozilla Extensions
/// @access public
/// @param {string} $token ["box-flex"] - Name of token to apply to the property.
/// @output CSS `box-flex` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/box-flex
@mixin box-flex($token: "box-flex") {
  @include css-property-with-token("box-flex", $token);
}


/// Applies the `$token` to the CSS `box-flex-group` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group Mozilla Extensions
/// @access public
/// @param {string} $token ["box-flex-group"] - Name of token to apply to the property.
/// @output CSS `box-flex-group` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/box-flex-group
@mixin box-flex-group($token: "box-flex-group") {
  @include css-property-with-token("box-flex-group", $token);
}


/// Applies the `$token` to the CSS `box-lines` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group Mozilla Extensions
/// @access public
/// @param {string} $token ["box-lines"] - Name of token to apply to the property.
/// @output CSS `box-lines` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/box-lines
@mixin box-lines($token: "box-lines") {
  @include css-property-with-token("box-lines", $token);
}


/// Applies the `$token` to the CSS `box-ordinal-group` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group Mozilla Extensions
/// @access public
/// @param {string} $token ["box-ordinal-group"] - Name of token to apply to the property.
/// @output CSS `box-ordinal-group` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/box-ordinal-group
@mixin box-ordinal-group($token: "box-ordinal-group") {
  @include css-property-with-token("box-ordinal-group", $token);
}


/// Applies the `$token` to the CSS `box-orient` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group Mozilla Extensions
/// @access public
/// @param {string} $token ["box-orient"] - Name of token to apply to the property.
/// @output CSS `box-orient` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/box-orient
@mixin box-orient($token: "box-orient") {
  @include css-property-with-token("box-orient", $token);
}


/// Applies the `$token` to the CSS `box-pack` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group Mozilla Extensions
/// @access public
/// @param {string} $token ["box-pack"] - Name of token to apply to the property.
/// @output CSS `box-pack` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/box-pack
@mixin box-pack($token: "box-pack") {
  @include css-property-with-token("box-pack", $token);
}


/// Applies the `$token` to the CSS `box-shadow` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Backgrounds and Borders
/// @access public
/// @param {string} $token ["box-shadow"] - Name of token to apply to the property.
/// @output CSS `box-shadow` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/box-shadow
@mixin box-shadow($token: "box-shadow") {
  @include css-property-with-token("box-shadow", $token);
}


/// Applies the `$token` to the CSS `box-sizing` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Box Model
/// @access public
/// @param {string} $token ["box-sizing"] - Name of token to apply to the property.
/// @output CSS `box-sizing` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/box-sizing
@mixin box-sizing($token: "box-sizing") {
  @include css-property-with-token("box-sizing", $token);
}


/// Applies the `$token` to the CSS `break-after` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Fragmentation
/// @access public
/// @param {string} $token ["break-after"] - Name of token to apply to the property.
/// @output CSS `break-after` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/break-after
@mixin break-after($token: "break-after") {
  @include css-property-with-token("break-after", $token);
}


/// Applies the `$token` to the CSS `break-before` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Fragmentation
/// @access public
/// @param {string} $token ["break-before"] - Name of token to apply to the property.
/// @output CSS `break-before` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/break-before
@mixin break-before($token: "break-before") {
  @include css-property-with-token("break-before", $token);
}


/// Applies the `$token` to the CSS `break-inside` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Fragmentation
/// @access public
/// @param {string} $token ["break-inside"] - Name of token to apply to the property.
/// @output CSS `break-inside` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/break-inside
@mixin break-inside($token: "break-inside") {
  @include css-property-with-token("break-inside", $token);
}


/// Applies the `$token` to the CSS `caption-side` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Table
/// @access public
/// @param {string} $token ["caption-side"] - Name of token to apply to the property.
/// @output CSS `caption-side` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/caption-side
@mixin caption-side($token: "caption-side") {
  @include css-property-with-token("caption-side", $token);
}


/// Applies the `$token` to the CSS `caret-color` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Basic User Interface
/// @access public
/// @param {string} $token ["caret-color"] - Name of token to apply to the property.
/// @output CSS `caret-color` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/caret-color
@mixin caret-color($token: "caret-color") {
  @include css-property-with-token("caret-color", $token);
}


/// Applies the `$token` to the CSS `clear` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Positioning
/// @access public
/// @param {string} $token ["clear"] - Name of token to apply to the property.
/// @output CSS `clear` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/clear
@mixin clear($token: "clear") {
  @include css-property-with-token("clear", $token);
}


/// Applies the `$token` to the CSS `clip` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Masking
/// @access public
/// @param {string} $token ["clip"] - Name of token to apply to the property.
/// @output CSS `clip` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/clip
@mixin clip($token: "clip") {
  @include css-property-with-token("clip", $token);
}


/// Applies the `$token` to the CSS `clip-path` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Masking
/// @access public
/// @param {string} $token ["clip-path"] - Name of token to apply to the property.
/// @output CSS `clip-path` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/clip-path
@mixin clip-path($token: "clip-path") {
  @include css-property-with-token("clip-path", $token);
}


/// Applies the `$token` to the CSS `color` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Color
/// @access public
/// @param {string} $token ["color"] - Name of token to apply to the property.
/// @output CSS `color` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/color
@mixin color($token: "color") {
  @include css-property-with-token("color", $token);
}


/// Applies the `$token` to the CSS `color-adjust` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Color
/// @access public
/// @param {string} $token ["color-adjust"] - Name of token to apply to the property.
/// @output CSS `color-adjust` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/color-adjust
@mixin color-adjust($token: "color-adjust") {
  @include css-property-with-token("color-adjust", $token);
}


/// Applies the `$token` to the CSS `color-scheme` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Color
/// @access public
/// @param {string} $token ["color-scheme"] - Name of token to apply to the property.
/// @output CSS `color-scheme` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/color-scheme
@mixin color-scheme($token: "color-scheme") {
  @include css-property-with-token("color-scheme", $token);
}


/// Applies the `$token` to the CSS `column-count` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Columns
/// @access public
/// @param {string} $token ["column-count"] - Name of token to apply to the property.
/// @output CSS `column-count` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/column-count
@mixin column-count($token: "column-count") {
  @include css-property-with-token("column-count", $token);
}


/// Applies the `$token` to the CSS `column-fill` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Columns
/// @access public
/// @param {string} $token ["column-fill"] - Name of token to apply to the property.
/// @output CSS `column-fill` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/column-fill
@mixin column-fill($token: "column-fill") {
  @include css-property-with-token("column-fill", $token);
}


/// Applies the `$token` to the CSS `column-gap` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Box Alignment
/// @access public
/// @param {string} $token ["column-gap"] - Name of token to apply to the property.
/// @output CSS `column-gap` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/column-gap
@mixin column-gap($token: "column-gap") {
  @include css-property-with-token("column-gap", $token);
}


/// Applies the `$token` to the CSS `column-rule` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Columns
/// @access public
/// @param {string} $token ["column-rule"] - Name of token to apply to the property.
/// @output CSS `column-rule` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/column-rule
@mixin column-rule($token: "column-rule") {
  @include css-property-with-token("column-rule", $token);
}


/// Applies the `$token` to the CSS `column-rule-color` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Columns
/// @access public
/// @param {string} $token ["column-rule-color"] - Name of token to apply to the property.
/// @output CSS `column-rule-color` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/column-rule-color
@mixin column-rule-color($token: "column-rule-color") {
  @include css-property-with-token("column-rule-color", $token);
}


/// Applies the `$token` to the CSS `column-rule-style` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Columns
/// @access public
/// @param {string} $token ["column-rule-style"] - Name of token to apply to the property.
/// @output CSS `column-rule-style` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/column-rule-style
@mixin column-rule-style($token: "column-rule-style") {
  @include css-property-with-token("column-rule-style", $token);
}


/// Applies the `$token` to the CSS `column-rule-width` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Columns
/// @access public
/// @param {string} $token ["column-rule-width"] - Name of token to apply to the property.
/// @output CSS `column-rule-width` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/column-rule-width
@mixin column-rule-width($token: "column-rule-width") {
  @include css-property-with-token("column-rule-width", $token);
}


/// Applies the `$token` to the CSS `column-span` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Columns
/// @access public
/// @param {string} $token ["column-span"] - Name of token to apply to the property.
/// @output CSS `column-span` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/column-span
@mixin column-span($token: "column-span") {
  @include css-property-with-token("column-span", $token);
}


/// Applies the `$token` to the CSS `column-width` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Columns
/// @access public
/// @param {string} $token ["column-width"] - Name of token to apply to the property.
/// @output CSS `column-width` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/column-width
@mixin column-width($token: "column-width") {
  @include css-property-with-token("column-width", $token);
}


/// Applies the `$token` to the CSS `columns` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Columns
/// @access public
/// @param {string} $token ["columns"] - Name of token to apply to the property.
/// @output CSS `columns` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/columns
@mixin columns($token: "columns") {
  @include css-property-with-token("columns", $token);
}


/// Applies the `$token` to the CSS `contain` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Containment
/// @access public
/// @param {string} $token ["contain"] - Name of token to apply to the property.
/// @output CSS `contain` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/contain
@mixin contain($token: "contain") {
  @include css-property-with-token("contain", $token);
}


/// Applies the `$token` to the CSS `content` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Generated Content
/// @access public
/// @param {string} $token ["content"] - Name of token to apply to the property.
/// @output CSS `content` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/content
@mixin content($token: "content") {
  @include css-property-with-token("content", $token);
}


/// Applies the `$token` to the CSS `content-visibility` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Containment
/// @access public
/// @param {string} $token ["content-visibility"] - Name of token to apply to the property.
/// @output CSS `content-visibility` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/content-visibility
@mixin content-visibility($token: "content-visibility") {
  @include css-property-with-token("content-visibility", $token);
}


/// Applies the `$token` to the CSS `counter-increment` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Counter Styles
/// @access public
/// @param {string} $token ["counter-increment"] - Name of token to apply to the property.
/// @output CSS `counter-increment` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/counter-increment
@mixin counter-increment($token: "counter-increment") {
  @include css-property-with-token("counter-increment", $token);
}


/// Applies the `$token` to the CSS `counter-reset` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Counter Styles
/// @access public
/// @param {string} $token ["counter-reset"] - Name of token to apply to the property.
/// @output CSS `counter-reset` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/counter-reset
@mixin counter-reset($token: "counter-reset") {
  @include css-property-with-token("counter-reset", $token);
}


/// Applies the `$token` to the CSS `counter-set` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Counter Styles
/// @access public
/// @param {string} $token ["counter-set"] - Name of token to apply to the property.
/// @output CSS `counter-set` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/counter-set
@mixin counter-set($token: "counter-set") {
  @include css-property-with-token("counter-set", $token);
}


/// Applies the `$token` to the CSS `cursor` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Basic User Interface
/// @access public
/// @param {string} $token ["cursor"] - Name of token to apply to the property.
/// @output CSS `cursor` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/cursor
@mixin cursor($token: "cursor") {
  @include css-property-with-token("cursor", $token);
}


/// Applies the `$token` to the CSS `direction` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Writing Modes
/// @access public
/// @param {string} $token ["direction"] - Name of token to apply to the property.
/// @output CSS `direction` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/direction
@mixin direction($token: "direction") {
  @include css-property-with-token("direction", $token);
}


/// Applies the `$token` to the CSS `display` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Display
/// @access public
/// @param {string} $token ["display"] - Name of token to apply to the property.
/// @output CSS `display` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/display
@mixin display($token: "display") {
  @include css-property-with-token("display", $token);
}


/// Applies the `$token` to the CSS `empty-cells` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Table
/// @access public
/// @param {string} $token ["empty-cells"] - Name of token to apply to the property.
/// @output CSS `empty-cells` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/empty-cells
@mixin empty-cells($token: "empty-cells") {
  @include css-property-with-token("empty-cells", $token);
}


/// Applies the `$token` to the CSS `filter` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group Filter Effects
/// @access public
/// @param {string} $token ["filter"] - Name of token to apply to the property.
/// @output CSS `filter` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/filter
@mixin filter($token: "filter") {
  @include css-property-with-token("filter", $token);
}


/// Applies the `$token` to the CSS `flex` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Flexible Box Layout
/// @access public
/// @param {string} $token ["flex"] - Name of token to apply to the property.
/// @output CSS `flex` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/flex
@mixin flex($token: "flex") {
  @include css-property-with-token("flex", $token);
}


/// Applies the `$token` to the CSS `flex-basis` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Flexible Box Layout
/// @access public
/// @param {string} $token ["flex-basis"] - Name of token to apply to the property.
/// @output CSS `flex-basis` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/flex-basis
@mixin flex-basis($token: "flex-basis") {
  @include css-property-with-token("flex-basis", $token);
}


/// Applies the `$token` to the CSS `flex-direction` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Flexible Box Layout
/// @access public
/// @param {string} $token ["flex-direction"] - Name of token to apply to the property.
/// @output CSS `flex-direction` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/flex-direction
@mixin flex-direction($token: "flex-direction") {
  @include css-property-with-token("flex-direction", $token);
}


/// Applies the `$token` to the CSS `flex-flow` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Flexible Box Layout
/// @access public
/// @param {string} $token ["flex-flow"] - Name of token to apply to the property.
/// @output CSS `flex-flow` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/flex-flow
@mixin flex-flow($token: "flex-flow") {
  @include css-property-with-token("flex-flow", $token);
}


/// Applies the `$token` to the CSS `flex-grow` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Flexible Box Layout
/// @access public
/// @param {string} $token ["flex-grow"] - Name of token to apply to the property.
/// @output CSS `flex-grow` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/flex-grow
@mixin flex-grow($token: "flex-grow") {
  @include css-property-with-token("flex-grow", $token);
}


/// Applies the `$token` to the CSS `flex-shrink` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Flexible Box Layout
/// @access public
/// @param {string} $token ["flex-shrink"] - Name of token to apply to the property.
/// @output CSS `flex-shrink` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/flex-shrink
@mixin flex-shrink($token: "flex-shrink") {
  @include css-property-with-token("flex-shrink", $token);
}


/// Applies the `$token` to the CSS `flex-wrap` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Flexible Box Layout
/// @access public
/// @param {string} $token ["flex-wrap"] - Name of token to apply to the property.
/// @output CSS `flex-wrap` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/flex-wrap
@mixin flex-wrap($token: "flex-wrap") {
  @include css-property-with-token("flex-wrap", $token);
}


/// Applies the `$token` to the CSS `float` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Positioning
/// @access public
/// @param {string} $token ["float"] - Name of token to apply to the property.
/// @output CSS `float` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/float
@mixin float($token: "float") {
  @include css-property-with-token("float", $token);
}


/// Applies the `$token` to the CSS `font` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Fonts
/// @access public
/// @param {string} $token ["font"] - Name of token to apply to the property.
/// @output CSS `font` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/font
@mixin font($token: "font") {
  @include css-property-with-token("font", $token);
}


/// Applies the `$token` to the CSS `font-family` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Fonts
/// @access public
/// @param {string} $token ["font-family"] - Name of token to apply to the property.
/// @output CSS `font-family` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/font-family
@mixin font-family($token: "font-family") {
  @include css-property-with-token("font-family", $token);
}


/// Applies the `$token` to the CSS `font-feature-settings` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Fonts
/// @access public
/// @param {string} $token ["font-feature-settings"] - Name of token to apply to the property.
/// @output CSS `font-feature-settings` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/font-feature-settings
@mixin font-feature-settings($token: "font-feature-settings") {
  @include css-property-with-token("font-feature-settings", $token);
}


/// Applies the `$token` to the CSS `font-kerning` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Fonts
/// @access public
/// @param {string} $token ["font-kerning"] - Name of token to apply to the property.
/// @output CSS `font-kerning` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/font-kerning
@mixin font-kerning($token: "font-kerning") {
  @include css-property-with-token("font-kerning", $token);
}


/// Applies the `$token` to the CSS `font-language-override` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Fonts
/// @access public
/// @param {string} $token ["font-language-override"] - Name of token to apply to the property.
/// @output CSS `font-language-override` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/font-language-override
@mixin font-language-override($token: "font-language-override") {
  @include css-property-with-token("font-language-override", $token);
}


/// Applies the `$token` to the CSS `font-optical-sizing` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Fonts
/// @access public
/// @param {string} $token ["font-optical-sizing"] - Name of token to apply to the property.
/// @output CSS `font-optical-sizing` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/font-optical-sizing
@mixin font-optical-sizing($token: "font-optical-sizing") {
  @include css-property-with-token("font-optical-sizing", $token);
}


/// Applies the `$token` to the CSS `font-variation-settings` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Fonts
/// @access public
/// @param {string} $token ["font-variation-settings"] - Name of token to apply to the property.
/// @output CSS `font-variation-settings` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/font-variation-settings
@mixin font-variation-settings($token: "font-variation-settings") {
  @include css-property-with-token("font-variation-settings", $token);
}


/// Applies the `$token` to the CSS `font-size` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Fonts
/// @access public
/// @param {string} $token ["font-size"] - Name of token to apply to the property.
/// @output CSS `font-size` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/font-size
@mixin font-size($token: "font-size") {
  @include css-property-with-token("font-size", $token);
}


/// Applies the `$token` to the CSS `font-size-adjust` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Fonts
/// @access public
/// @param {string} $token ["font-size-adjust"] - Name of token to apply to the property.
/// @output CSS `font-size-adjust` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/font-size-adjust
@mixin font-size-adjust($token: "font-size-adjust") {
  @include css-property-with-token("font-size-adjust", $token);
}


/// Applies the `$token` to the CSS `font-smooth` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Fonts
/// @access public
/// @param {string} $token ["font-smooth"] - Name of token to apply to the property.
/// @output CSS `font-smooth` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/font-smooth
@mixin font-smooth($token: "font-smooth") {
  @include css-property-with-token("font-smooth", $token);
}


/// Applies the `$token` to the CSS `font-stretch` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Fonts
/// @access public
/// @param {string} $token ["font-stretch"] - Name of token to apply to the property.
/// @output CSS `font-stretch` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/font-stretch
@mixin font-stretch($token: "font-stretch") {
  @include css-property-with-token("font-stretch", $token);
}


/// Applies the `$token` to the CSS `font-style` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Fonts
/// @access public
/// @param {string} $token ["font-style"] - Name of token to apply to the property.
/// @output CSS `font-style` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/font-style
@mixin font-style($token: "font-style") {
  @include css-property-with-token("font-style", $token);
}


/// Applies the `$token` to the CSS `font-synthesis` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Fonts
/// @access public
/// @param {string} $token ["font-synthesis"] - Name of token to apply to the property.
/// @output CSS `font-synthesis` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/font-synthesis
@mixin font-synthesis($token: "font-synthesis") {
  @include css-property-with-token("font-synthesis", $token);
}


/// Applies the `$token` to the CSS `font-variant` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Fonts
/// @access public
/// @param {string} $token ["font-variant"] - Name of token to apply to the property.
/// @output CSS `font-variant` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/font-variant
@mixin font-variant($token: "font-variant") {
  @include css-property-with-token("font-variant", $token);
}


/// Applies the `$token` to the CSS `font-variant-alternates` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Fonts
/// @access public
/// @param {string} $token ["font-variant-alternates"] - Name of token to apply to the property.
/// @output CSS `font-variant-alternates` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/font-variant-alternates
@mixin font-variant-alternates($token: "font-variant-alternates") {
  @include css-property-with-token("font-variant-alternates", $token);
}


/// Applies the `$token` to the CSS `font-variant-caps` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Fonts
/// @access public
/// @param {string} $token ["font-variant-caps"] - Name of token to apply to the property.
/// @output CSS `font-variant-caps` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/font-variant-caps
@mixin font-variant-caps($token: "font-variant-caps") {
  @include css-property-with-token("font-variant-caps", $token);
}


/// Applies the `$token` to the CSS `font-variant-east-asian` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Fonts
/// @access public
/// @param {string} $token ["font-variant-east-asian"] - Name of token to apply to the property.
/// @output CSS `font-variant-east-asian` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/font-variant-east-asian
@mixin font-variant-east-asian($token: "font-variant-east-asian") {
  @include css-property-with-token("font-variant-east-asian", $token);
}


/// Applies the `$token` to the CSS `font-variant-ligatures` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Fonts
/// @access public
/// @param {string} $token ["font-variant-ligatures"] - Name of token to apply to the property.
/// @output CSS `font-variant-ligatures` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/font-variant-ligatures
@mixin font-variant-ligatures($token: "font-variant-ligatures") {
  @include css-property-with-token("font-variant-ligatures", $token);
}


/// Applies the `$token` to the CSS `font-variant-numeric` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Fonts
/// @access public
/// @param {string} $token ["font-variant-numeric"] - Name of token to apply to the property.
/// @output CSS `font-variant-numeric` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/font-variant-numeric
@mixin font-variant-numeric($token: "font-variant-numeric") {
  @include css-property-with-token("font-variant-numeric", $token);
}


/// Applies the `$token` to the CSS `font-variant-position` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Fonts
/// @access public
/// @param {string} $token ["font-variant-position"] - Name of token to apply to the property.
/// @output CSS `font-variant-position` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/font-variant-position
@mixin font-variant-position($token: "font-variant-position") {
  @include css-property-with-token("font-variant-position", $token);
}


/// Applies the `$token` to the CSS `font-weight` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Fonts
/// @access public
/// @param {string} $token ["font-weight"] - Name of token to apply to the property.
/// @output CSS `font-weight` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/font-weight
@mixin font-weight($token: "font-weight") {
  @include css-property-with-token("font-weight", $token);
}


/// Applies the `$token` to the CSS `forced-color-adjust` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Color
/// @access public
/// @param {string} $token ["forced-color-adjust"] - Name of token to apply to the property.
/// @output CSS `forced-color-adjust` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/forced-color-adjust
@mixin forced-color-adjust($token: "forced-color-adjust") {
  @include css-property-with-token("forced-color-adjust", $token);
}


/// Applies the `$token` to the CSS `gap` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Box Alignment
/// @access public
/// @param {string} $token ["gap"] - Name of token to apply to the property.
/// @output CSS `gap` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/gap
@mixin gap($token: "gap") {
  @include css-property-with-token("gap", $token);
}


/// Applies the `$token` to the CSS `grid` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Grid Layout
/// @access public
/// @param {string} $token ["grid"] - Name of token to apply to the property.
/// @output CSS `grid` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/grid
@mixin grid($token: "grid") {
  @include css-property-with-token("grid", $token);
}


/// Applies the `$token` to the CSS `grid-area` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Grid Layout
/// @access public
/// @param {string} $token ["grid-area"] - Name of token to apply to the property.
/// @output CSS `grid-area` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/grid-area
@mixin grid-area($token: "grid-area") {
  @include css-property-with-token("grid-area", $token);
}


/// Applies the `$token` to the CSS `grid-auto-columns` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Grid Layout
/// @access public
/// @param {string} $token ["grid-auto-columns"] - Name of token to apply to the property.
/// @output CSS `grid-auto-columns` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/grid-auto-columns
@mixin grid-auto-columns($token: "grid-auto-columns") {
  @include css-property-with-token("grid-auto-columns", $token);
}


/// Applies the `$token` to the CSS `grid-auto-flow` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Grid Layout
/// @access public
/// @param {string} $token ["grid-auto-flow"] - Name of token to apply to the property.
/// @output CSS `grid-auto-flow` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/grid-auto-flow
@mixin grid-auto-flow($token: "grid-auto-flow") {
  @include css-property-with-token("grid-auto-flow", $token);
}


/// Applies the `$token` to the CSS `grid-auto-rows` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Grid Layout
/// @access public
/// @param {string} $token ["grid-auto-rows"] - Name of token to apply to the property.
/// @output CSS `grid-auto-rows` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/grid-auto-rows
@mixin grid-auto-rows($token: "grid-auto-rows") {
  @include css-property-with-token("grid-auto-rows", $token);
}


/// Applies the `$token` to the CSS `grid-column` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Grid Layout
/// @access public
/// @param {string} $token ["grid-column"] - Name of token to apply to the property.
/// @output CSS `grid-column` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/grid-column
@mixin grid-column($token: "grid-column") {
  @include css-property-with-token("grid-column", $token);
}


/// Applies the `$token` to the CSS `grid-column-end` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Grid Layout
/// @access public
/// @param {string} $token ["grid-column-end"] - Name of token to apply to the property.
/// @output CSS `grid-column-end` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/grid-column-end
@mixin grid-column-end($token: "grid-column-end") {
  @include css-property-with-token("grid-column-end", $token);
}


/// Applies the `$token` to the CSS `grid-column-gap` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Grid Layout
/// @access public
/// @param {string} $token ["grid-column-gap"] - Name of token to apply to the property.
/// @output CSS `grid-column-gap` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/column-gap
@mixin grid-column-gap($token: "grid-column-gap") {
  @include css-property-with-token("grid-column-gap", $token);
}


/// Applies the `$token` to the CSS `grid-column-start` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Grid Layout
/// @access public
/// @param {string} $token ["grid-column-start"] - Name of token to apply to the property.
/// @output CSS `grid-column-start` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/grid-column-start
@mixin grid-column-start($token: "grid-column-start") {
  @include css-property-with-token("grid-column-start", $token);
}


/// Applies the `$token` to the CSS `grid-gap` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Grid Layout
/// @access public
/// @param {string} $token ["grid-gap"] - Name of token to apply to the property.
/// @output CSS `grid-gap` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/gap
@mixin grid-gap($token: "grid-gap") {
  @include css-property-with-token("grid-gap", $token);
}


/// Applies the `$token` to the CSS `grid-row` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Grid Layout
/// @access public
/// @param {string} $token ["grid-row"] - Name of token to apply to the property.
/// @output CSS `grid-row` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/grid-row
@mixin grid-row($token: "grid-row") {
  @include css-property-with-token("grid-row", $token);
}


/// Applies the `$token` to the CSS `grid-row-end` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Grid Layout
/// @access public
/// @param {string} $token ["grid-row-end"] - Name of token to apply to the property.
/// @output CSS `grid-row-end` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/grid-row-end
@mixin grid-row-end($token: "grid-row-end") {
  @include css-property-with-token("grid-row-end", $token);
}


/// Applies the `$token` to the CSS `grid-row-gap` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Grid Layout
/// @access public
/// @param {string} $token ["grid-row-gap"] - Name of token to apply to the property.
/// @output CSS `grid-row-gap` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/row-gap
@mixin grid-row-gap($token: "grid-row-gap") {
  @include css-property-with-token("grid-row-gap", $token);
}


/// Applies the `$token` to the CSS `grid-row-start` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Grid Layout
/// @access public
/// @param {string} $token ["grid-row-start"] - Name of token to apply to the property.
/// @output CSS `grid-row-start` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/grid-row-start
@mixin grid-row-start($token: "grid-row-start") {
  @include css-property-with-token("grid-row-start", $token);
}


/// Applies the `$token` to the CSS `grid-template` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Grid Layout
/// @access public
/// @param {string} $token ["grid-template"] - Name of token to apply to the property.
/// @output CSS `grid-template` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/grid-template
@mixin grid-template($token: "grid-template") {
  @include css-property-with-token("grid-template", $token);
}


/// Applies the `$token` to the CSS `grid-template-areas` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Grid Layout
/// @access public
/// @param {string} $token ["grid-template-areas"] - Name of token to apply to the property.
/// @output CSS `grid-template-areas` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/grid-template-areas
@mixin grid-template-areas($token: "grid-template-areas") {
  @include css-property-with-token("grid-template-areas", $token);
}


/// Applies the `$token` to the CSS `grid-template-columns` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Grid Layout
/// @access public
/// @param {string} $token ["grid-template-columns"] - Name of token to apply to the property.
/// @output CSS `grid-template-columns` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/grid-template-columns
@mixin grid-template-columns($token: "grid-template-columns") {
  @include css-property-with-token("grid-template-columns", $token);
}


/// Applies the `$token` to the CSS `grid-template-rows` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Grid Layout
/// @access public
/// @param {string} $token ["grid-template-rows"] - Name of token to apply to the property.
/// @output CSS `grid-template-rows` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/grid-template-rows
@mixin grid-template-rows($token: "grid-template-rows") {
  @include css-property-with-token("grid-template-rows", $token);
}


/// Applies the `$token` to the CSS `hanging-punctuation` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Text
/// @access public
/// @param {string} $token ["hanging-punctuation"] - Name of token to apply to the property.
/// @output CSS `hanging-punctuation` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/hanging-punctuation
@mixin hanging-punctuation($token: "hanging-punctuation") {
  @include css-property-with-token("hanging-punctuation", $token);
}


/// Applies the `$token` to the CSS `height` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Box Model
/// @access public
/// @param {string} $token ["height"] - Name of token to apply to the property.
/// @output CSS `height` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/height
@mixin height($token: "height") {
  @include css-property-with-token("height", $token);
}


/// Applies the `$token` to the CSS `hyphenate-character` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Text
/// @access public
/// @param {string} $token ["hyphenate-character"] - Name of token to apply to the property.
/// @output CSS `hyphenate-character` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/hyphenate-character
@mixin hyphenate-character($token: "hyphenate-character") {
  @include css-property-with-token("hyphenate-character", $token);
}


/// Applies the `$token` to the CSS `hyphens` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Text
/// @access public
/// @param {string} $token ["hyphens"] - Name of token to apply to the property.
/// @output CSS `hyphens` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/hyphens
@mixin hyphens($token: "hyphens") {
  @include css-property-with-token("hyphens", $token);
}


/// Applies the `$token` to the CSS `image-orientation` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Images
/// @access public
/// @param {string} $token ["image-orientation"] - Name of token to apply to the property.
/// @output CSS `image-orientation` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/image-orientation
@mixin image-orientation($token: "image-orientation") {
  @include css-property-with-token("image-orientation", $token);
}


/// Applies the `$token` to the CSS `image-rendering` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Images
/// @access public
/// @param {string} $token ["image-rendering"] - Name of token to apply to the property.
/// @output CSS `image-rendering` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/image-rendering
@mixin image-rendering($token: "image-rendering") {
  @include css-property-with-token("image-rendering", $token);
}


/// Applies the `$token` to the CSS `image-resolution` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Images
/// @access public
/// @param {string} $token ["image-resolution"] - Name of token to apply to the property.
/// @output CSS `image-resolution` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/image-resolution
@mixin image-resolution($token: "image-resolution") {
  @include css-property-with-token("image-resolution", $token);
}


/// Applies the `$token` to the CSS `ime-mode` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Basic User Interface
/// @access public
/// @param {string} $token ["ime-mode"] - Name of token to apply to the property.
/// @output CSS `ime-mode` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/ime-mode
@mixin ime-mode($token: "ime-mode") {
  @include css-property-with-token("ime-mode", $token);
}


/// Applies the `$token` to the CSS `initial-letter` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Inline
/// @access public
/// @param {string} $token ["initial-letter"] - Name of token to apply to the property.
/// @output CSS `initial-letter` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/initial-letter
@mixin initial-letter($token: "initial-letter") {
  @include css-property-with-token("initial-letter", $token);
}


/// Applies the `$token` to the CSS `initial-letter-align` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Inline
/// @access public
/// @param {string} $token ["initial-letter-align"] - Name of token to apply to the property.
/// @output CSS `initial-letter-align` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/initial-letter-align
@mixin initial-letter-align($token: "initial-letter-align") {
  @include css-property-with-token("initial-letter-align", $token);
}


/// Applies the `$token` to the CSS `inline-size` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Logical Properties
/// @access public
/// @param {string} $token ["inline-size"] - Name of token to apply to the property.
/// @output CSS `inline-size` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/inline-size
@mixin inline-size($token: "inline-size") {
  @include css-property-with-token("inline-size", $token);
}


/// Applies the `$token` to the CSS `input-security` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Basic User Interface
/// @access public
/// @param {string} $token ["input-security"] - Name of token to apply to the property.
/// @output CSS `input-security` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/input-security
@mixin input-security($token: "input-security") {
  @include css-property-with-token("input-security", $token);
}


/// Applies the `$token` to the CSS `inset` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Logical Properties
/// @access public
/// @param {string} $token ["inset"] - Name of token to apply to the property.
/// @output CSS `inset` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/inset
@mixin inset($token: "inset") {
  @include css-property-with-token("inset", $token);
}


/// Applies the `$token` to the CSS `inset-block` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Logical Properties
/// @access public
/// @param {string} $token ["inset-block"] - Name of token to apply to the property.
/// @output CSS `inset-block` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/inset-block
@mixin inset-block($token: "inset-block") {
  @include css-property-with-token("inset-block", $token);
}


/// Applies the `$token` to the CSS `inset-block-end` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Logical Properties
/// @access public
/// @param {string} $token ["inset-block-end"] - Name of token to apply to the property.
/// @output CSS `inset-block-end` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/inset-block-end
@mixin inset-block-end($token: "inset-block-end") {
  @include css-property-with-token("inset-block-end", $token);
}


/// Applies the `$token` to the CSS `inset-block-start` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Logical Properties
/// @access public
/// @param {string} $token ["inset-block-start"] - Name of token to apply to the property.
/// @output CSS `inset-block-start` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/inset-block-start
@mixin inset-block-start($token: "inset-block-start") {
  @include css-property-with-token("inset-block-start", $token);
}


/// Applies the `$token` to the CSS `inset-inline` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Logical Properties
/// @access public
/// @param {string} $token ["inset-inline"] - Name of token to apply to the property.
/// @output CSS `inset-inline` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/inset-inline
@mixin inset-inline($token: "inset-inline") {
  @include css-property-with-token("inset-inline", $token);
}


/// Applies the `$token` to the CSS `inset-inline-end` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Logical Properties
/// @access public
/// @param {string} $token ["inset-inline-end"] - Name of token to apply to the property.
/// @output CSS `inset-inline-end` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/inset-inline-end
@mixin inset-inline-end($token: "inset-inline-end") {
  @include css-property-with-token("inset-inline-end", $token);
}


/// Applies the `$token` to the CSS `inset-inline-start` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Logical Properties
/// @access public
/// @param {string} $token ["inset-inline-start"] - Name of token to apply to the property.
/// @output CSS `inset-inline-start` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/inset-inline-start
@mixin inset-inline-start($token: "inset-inline-start") {
  @include css-property-with-token("inset-inline-start", $token);
}


/// Applies the `$token` to the CSS `isolation` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group Compositing and Blending
/// @access public
/// @param {string} $token ["isolation"] - Name of token to apply to the property.
/// @output CSS `isolation` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/isolation
@mixin isolation($token: "isolation") {
  @include css-property-with-token("isolation", $token);
}


/// Applies the `$token` to the CSS `justify-content` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Box Alignment
/// @access public
/// @param {string} $token ["justify-content"] - Name of token to apply to the property.
/// @output CSS `justify-content` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/justify-content
@mixin justify-content($token: "justify-content") {
  @include css-property-with-token("justify-content", $token);
}


/// Applies the `$token` to the CSS `justify-items` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Box Alignment
/// @access public
/// @param {string} $token ["justify-items"] - Name of token to apply to the property.
/// @output CSS `justify-items` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/justify-items
@mixin justify-items($token: "justify-items") {
  @include css-property-with-token("justify-items", $token);
}


/// Applies the `$token` to the CSS `justify-self` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Box Alignment
/// @access public
/// @param {string} $token ["justify-self"] - Name of token to apply to the property.
/// @output CSS `justify-self` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/justify-self
@mixin justify-self($token: "justify-self") {
  @include css-property-with-token("justify-self", $token);
}


/// Applies the `$token` to the CSS `justify-tracks` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Grid Layout
/// @access public
/// @param {string} $token ["justify-tracks"] - Name of token to apply to the property.
/// @output CSS `justify-tracks` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/justify-tracks
@mixin justify-tracks($token: "justify-tracks") {
  @include css-property-with-token("justify-tracks", $token);
}


/// Applies the `$token` to the CSS `left` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Positioning
/// @access public
/// @param {string} $token ["left"] - Name of token to apply to the property.
/// @output CSS `left` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/left
@mixin left($token: "left") {
  @include css-property-with-token("left", $token);
}


/// Applies the `$token` to the CSS `letter-spacing` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Text
/// @access public
/// @param {string} $token ["letter-spacing"] - Name of token to apply to the property.
/// @output CSS `letter-spacing` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/letter-spacing
@mixin letter-spacing($token: "letter-spacing") {
  @include css-property-with-token("letter-spacing", $token);
}


/// Applies the `$token` to the CSS `line-break` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Text
/// @access public
/// @param {string} $token ["line-break"] - Name of token to apply to the property.
/// @output CSS `line-break` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/line-break
@mixin line-break($token: "line-break") {
  @include css-property-with-token("line-break", $token);
}


/// Applies the `$token` to the CSS `line-clamp` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Overflow
/// @access public
/// @param {string} $token ["line-clamp"] - Name of token to apply to the property.
/// @output CSS `line-clamp` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/line-clamp
@mixin line-clamp($token: "line-clamp") {
  @include css-property-with-token("line-clamp", $token);
}


/// Applies the `$token` to the CSS `line-height` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Fonts
/// @access public
/// @param {string} $token ["line-height"] - Name of token to apply to the property.
/// @output CSS `line-height` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/line-height
@mixin line-height($token: "line-height") {
  @include css-property-with-token("line-height", $token);
}


/// Applies the `$token` to the CSS `line-height-step` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Fonts
/// @access public
/// @param {string} $token ["line-height-step"] - Name of token to apply to the property.
/// @output CSS `line-height-step` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/line-height-step
@mixin line-height-step($token: "line-height-step") {
  @include css-property-with-token("line-height-step", $token);
}


/// Applies the `$token` to the CSS `list-style` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Lists and Counters
/// @access public
/// @param {string} $token ["list-style"] - Name of token to apply to the property.
/// @output CSS `list-style` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/list-style
@mixin list-style($token: "list-style") {
  @include css-property-with-token("list-style", $token);
}


/// Applies the `$token` to the CSS `list-style-image` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Lists and Counters
/// @access public
/// @param {string} $token ["list-style-image"] - Name of token to apply to the property.
/// @output CSS `list-style-image` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/list-style-image
@mixin list-style-image($token: "list-style-image") {
  @include css-property-with-token("list-style-image", $token);
}


/// Applies the `$token` to the CSS `list-style-position` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Lists and Counters
/// @access public
/// @param {string} $token ["list-style-position"] - Name of token to apply to the property.
/// @output CSS `list-style-position` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/list-style-position
@mixin list-style-position($token: "list-style-position") {
  @include css-property-with-token("list-style-position", $token);
}


/// Applies the `$token` to the CSS `list-style-type` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Lists and Counters
/// @access public
/// @param {string} $token ["list-style-type"] - Name of token to apply to the property.
/// @output CSS `list-style-type` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/list-style-type
@mixin list-style-type($token: "list-style-type") {
  @include css-property-with-token("list-style-type", $token);
}


/// Applies the `$token` to the CSS `margin` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Box Model
/// @access public
/// @param {string} $token ["margin"] - Name of token to apply to the property.
/// @output CSS `margin` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/margin
@mixin margin($token: "margin") {
  @include css-property-with-token("margin", $token);
}


/// Applies the `$token` to the CSS `margin-block` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Logical Properties
/// @access public
/// @param {string} $token ["margin-block"] - Name of token to apply to the property.
/// @output CSS `margin-block` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/margin-block
@mixin margin-block($token: "margin-block") {
  @include css-property-with-token("margin-block", $token);
}


/// Applies the `$token` to the CSS `margin-block-end` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Logical Properties
/// @access public
/// @param {string} $token ["margin-block-end"] - Name of token to apply to the property.
/// @output CSS `margin-block-end` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/margin-block-end
@mixin margin-block-end($token: "margin-block-end") {
  @include css-property-with-token("margin-block-end", $token);
}


/// Applies the `$token` to the CSS `margin-block-start` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Logical Properties
/// @access public
/// @param {string} $token ["margin-block-start"] - Name of token to apply to the property.
/// @output CSS `margin-block-start` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/margin-block-start
@mixin margin-block-start($token: "margin-block-start") {
  @include css-property-with-token("margin-block-start", $token);
}


/// Applies the `$token` to the CSS `margin-bottom` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Box Model
/// @access public
/// @param {string} $token ["margin-bottom"] - Name of token to apply to the property.
/// @output CSS `margin-bottom` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/margin-bottom
@mixin margin-bottom($token: "margin-bottom") {
  @include css-property-with-token("margin-bottom", $token);
}


/// Applies the `$token` to the CSS `margin-inline` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Logical Properties
/// @access public
/// @param {string} $token ["margin-inline"] - Name of token to apply to the property.
/// @output CSS `margin-inline` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/margin-inline
@mixin margin-inline($token: "margin-inline") {
  @include css-property-with-token("margin-inline", $token);
}


/// Applies the `$token` to the CSS `margin-inline-end` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Logical Properties
/// @access public
/// @param {string} $token ["margin-inline-end"] - Name of token to apply to the property.
/// @output CSS `margin-inline-end` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/margin-inline-end
@mixin margin-inline-end($token: "margin-inline-end") {
  @include css-property-with-token("margin-inline-end", $token);
}


/// Applies the `$token` to the CSS `margin-inline-start` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Logical Properties
/// @access public
/// @param {string} $token ["margin-inline-start"] - Name of token to apply to the property.
/// @output CSS `margin-inline-start` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/margin-inline-start
@mixin margin-inline-start($token: "margin-inline-start") {
  @include css-property-with-token("margin-inline-start", $token);
}


/// Applies the `$token` to the CSS `margin-left` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Box Model
/// @access public
/// @param {string} $token ["margin-left"] - Name of token to apply to the property.
/// @output CSS `margin-left` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/margin-left
@mixin margin-left($token: "margin-left") {
  @include css-property-with-token("margin-left", $token);
}


/// Applies the `$token` to the CSS `margin-right` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Box Model
/// @access public
/// @param {string} $token ["margin-right"] - Name of token to apply to the property.
/// @output CSS `margin-right` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/margin-right
@mixin margin-right($token: "margin-right") {
  @include css-property-with-token("margin-right", $token);
}


/// Applies the `$token` to the CSS `margin-top` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Box Model
/// @access public
/// @param {string} $token ["margin-top"] - Name of token to apply to the property.
/// @output CSS `margin-top` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/margin-top
@mixin margin-top($token: "margin-top") {
  @include css-property-with-token("margin-top", $token);
}


/// Applies the `$token` to the CSS `margin-trim` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Box Model
/// @access public
/// @param {string} $token ["margin-trim"] - Name of token to apply to the property.
/// @output CSS `margin-trim` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/margin-trim
@mixin margin-trim($token: "margin-trim") {
  @include css-property-with-token("margin-trim", $token);
}


/// Applies the `$token` to the CSS `mask` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Masking
/// @access public
/// @param {string} $token ["mask"] - Name of token to apply to the property.
/// @output CSS `mask` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/mask
@mixin mask($token: "mask") {
  @include css-property-with-token("mask", $token);
}


/// Applies the `$token` to the CSS `mask-border` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Masking
/// @access public
/// @param {string} $token ["mask-border"] - Name of token to apply to the property.
/// @output CSS `mask-border` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/mask-border
@mixin mask-border($token: "mask-border") {
  @include css-property-with-token("mask-border", $token);
}


/// Applies the `$token` to the CSS `mask-border-mode` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Masking
/// @access public
/// @param {string} $token ["mask-border-mode"] - Name of token to apply to the property.
/// @output CSS `mask-border-mode` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/mask-border-mode
@mixin mask-border-mode($token: "mask-border-mode") {
  @include css-property-with-token("mask-border-mode", $token);
}


/// Applies the `$token` to the CSS `mask-border-outset` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Masking
/// @access public
/// @param {string} $token ["mask-border-outset"] - Name of token to apply to the property.
/// @output CSS `mask-border-outset` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/mask-border-outset
@mixin mask-border-outset($token: "mask-border-outset") {
  @include css-property-with-token("mask-border-outset", $token);
}


/// Applies the `$token` to the CSS `mask-border-repeat` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Masking
/// @access public
/// @param {string} $token ["mask-border-repeat"] - Name of token to apply to the property.
/// @output CSS `mask-border-repeat` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/mask-border-repeat
@mixin mask-border-repeat($token: "mask-border-repeat") {
  @include css-property-with-token("mask-border-repeat", $token);
}


/// Applies the `$token` to the CSS `mask-border-slice` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Masking
/// @access public
/// @param {string} $token ["mask-border-slice"] - Name of token to apply to the property.
/// @output CSS `mask-border-slice` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/mask-border-slice
@mixin mask-border-slice($token: "mask-border-slice") {
  @include css-property-with-token("mask-border-slice", $token);
}


/// Applies the `$token` to the CSS `mask-border-source` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Masking
/// @access public
/// @param {string} $token ["mask-border-source"] - Name of token to apply to the property.
/// @output CSS `mask-border-source` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/mask-border-source
@mixin mask-border-source($token: "mask-border-source") {
  @include css-property-with-token("mask-border-source", $token);
}


/// Applies the `$token` to the CSS `mask-border-width` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Masking
/// @access public
/// @param {string} $token ["mask-border-width"] - Name of token to apply to the property.
/// @output CSS `mask-border-width` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/mask-border-width
@mixin mask-border-width($token: "mask-border-width") {
  @include css-property-with-token("mask-border-width", $token);
}


/// Applies the `$token` to the CSS `mask-clip` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Masking
/// @access public
/// @param {string} $token ["mask-clip"] - Name of token to apply to the property.
/// @output CSS `mask-clip` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/mask-clip
@mixin mask-clip($token: "mask-clip") {
  @include css-property-with-token("mask-clip", $token);
}


/// Applies the `$token` to the CSS `mask-composite` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Masking
/// @access public
/// @param {string} $token ["mask-composite"] - Name of token to apply to the property.
/// @output CSS `mask-composite` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/mask-composite
@mixin mask-composite($token: "mask-composite") {
  @include css-property-with-token("mask-composite", $token);
}


/// Applies the `$token` to the CSS `mask-image` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Masking
/// @access public
/// @param {string} $token ["mask-image"] - Name of token to apply to the property.
/// @output CSS `mask-image` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/mask-image
@mixin mask-image($token: "mask-image") {
  @include css-property-with-token("mask-image", $token);
}


/// Applies the `$token` to the CSS `mask-mode` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Masking
/// @access public
/// @param {string} $token ["mask-mode"] - Name of token to apply to the property.
/// @output CSS `mask-mode` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/mask-mode
@mixin mask-mode($token: "mask-mode") {
  @include css-property-with-token("mask-mode", $token);
}


/// Applies the `$token` to the CSS `mask-origin` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Masking
/// @access public
/// @param {string} $token ["mask-origin"] - Name of token to apply to the property.
/// @output CSS `mask-origin` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/mask-origin
@mixin mask-origin($token: "mask-origin") {
  @include css-property-with-token("mask-origin", $token);
}


/// Applies the `$token` to the CSS `mask-position` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Masking
/// @access public
/// @param {string} $token ["mask-position"] - Name of token to apply to the property.
/// @output CSS `mask-position` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/mask-position
@mixin mask-position($token: "mask-position") {
  @include css-property-with-token("mask-position", $token);
}


/// Applies the `$token` to the CSS `mask-repeat` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Masking
/// @access public
/// @param {string} $token ["mask-repeat"] - Name of token to apply to the property.
/// @output CSS `mask-repeat` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/mask-repeat
@mixin mask-repeat($token: "mask-repeat") {
  @include css-property-with-token("mask-repeat", $token);
}


/// Applies the `$token` to the CSS `mask-size` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Masking
/// @access public
/// @param {string} $token ["mask-size"] - Name of token to apply to the property.
/// @output CSS `mask-size` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/mask-size
@mixin mask-size($token: "mask-size") {
  @include css-property-with-token("mask-size", $token);
}


/// Applies the `$token` to the CSS `mask-type` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Masking
/// @access public
/// @param {string} $token ["mask-type"] - Name of token to apply to the property.
/// @output CSS `mask-type` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/mask-type
@mixin mask-type($token: "mask-type") {
  @include css-property-with-token("mask-type", $token);
}


/// Applies the `$token` to the CSS `masonry-auto-flow` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Grid Layout
/// @access public
/// @param {string} $token ["masonry-auto-flow"] - Name of token to apply to the property.
/// @output CSS `masonry-auto-flow` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/masonry-auto-flow
@mixin masonry-auto-flow($token: "masonry-auto-flow") {
  @include css-property-with-token("masonry-auto-flow", $token);
}


/// Applies the `$token` to the CSS `math-style` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group MathML
/// @access public
/// @param {string} $token ["math-style"] - Name of token to apply to the property.
/// @output CSS `math-style` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/math-style
@mixin math-style($token: "math-style") {
  @include css-property-with-token("math-style", $token);
}


/// Applies the `$token` to the CSS `max-block-size` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Logical Properties
/// @access public
/// @param {string} $token ["max-block-size"] - Name of token to apply to the property.
/// @output CSS `max-block-size` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/max-block-size
@mixin max-block-size($token: "max-block-size") {
  @include css-property-with-token("max-block-size", $token);
}


/// Applies the `$token` to the CSS `max-height` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Box Model
/// @access public
/// @param {string} $token ["max-height"] - Name of token to apply to the property.
/// @output CSS `max-height` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/max-height
@mixin max-height($token: "max-height") {
  @include css-property-with-token("max-height", $token);
}


/// Applies the `$token` to the CSS `max-inline-size` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Logical Properties
/// @access public
/// @param {string} $token ["max-inline-size"] - Name of token to apply to the property.
/// @output CSS `max-inline-size` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/max-inline-size
@mixin max-inline-size($token: "max-inline-size") {
  @include css-property-with-token("max-inline-size", $token);
}


/// Applies the `$token` to the CSS `max-lines` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Overflow
/// @access public
/// @param {string} $token ["max-lines"] - Name of token to apply to the property.
/// @output CSS `max-lines` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/max-lines
@mixin max-lines($token: "max-lines") {
  @include css-property-with-token("max-lines", $token);
}


/// Applies the `$token` to the CSS `max-width` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Box Model
/// @access public
/// @param {string} $token ["max-width"] - Name of token to apply to the property.
/// @output CSS `max-width` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/max-width
@mixin max-width($token: "max-width") {
  @include css-property-with-token("max-width", $token);
}


/// Applies the `$token` to the CSS `min-block-size` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Logical Properties
/// @access public
/// @param {string} $token ["min-block-size"] - Name of token to apply to the property.
/// @output CSS `min-block-size` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/min-block-size
@mixin min-block-size($token: "min-block-size") {
  @include css-property-with-token("min-block-size", $token);
}


/// Applies the `$token` to the CSS `min-height` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Box Model
/// @access public
/// @param {string} $token ["min-height"] - Name of token to apply to the property.
/// @output CSS `min-height` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/min-height
@mixin min-height($token: "min-height") {
  @include css-property-with-token("min-height", $token);
}


/// Applies the `$token` to the CSS `min-inline-size` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Logical Properties
/// @access public
/// @param {string} $token ["min-inline-size"] - Name of token to apply to the property.
/// @output CSS `min-inline-size` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/min-inline-size
@mixin min-inline-size($token: "min-inline-size") {
  @include css-property-with-token("min-inline-size", $token);
}


/// Applies the `$token` to the CSS `min-width` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Box Model
/// @access public
/// @param {string} $token ["min-width"] - Name of token to apply to the property.
/// @output CSS `min-width` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/min-width
@mixin min-width($token: "min-width") {
  @include css-property-with-token("min-width", $token);
}


/// Applies the `$token` to the CSS `mix-blend-mode` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group Compositing and Blending
/// @access public
/// @param {string} $token ["mix-blend-mode"] - Name of token to apply to the property.
/// @output CSS `mix-blend-mode` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/mix-blend-mode
@mixin mix-blend-mode($token: "mix-blend-mode") {
  @include css-property-with-token("mix-blend-mode", $token);
}


/// Applies the `$token` to the CSS `object-fit` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Images
/// @access public
/// @param {string} $token ["object-fit"] - Name of token to apply to the property.
/// @output CSS `object-fit` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/object-fit
@mixin object-fit($token: "object-fit") {
  @include css-property-with-token("object-fit", $token);
}


/// Applies the `$token` to the CSS `object-position` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Images
/// @access public
/// @param {string} $token ["object-position"] - Name of token to apply to the property.
/// @output CSS `object-position` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/object-position
@mixin object-position($token: "object-position") {
  @include css-property-with-token("object-position", $token);
}


/// Applies the `$token` to the CSS `offset` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Motion Path
/// @access public
/// @param {string} $token ["offset"] - Name of token to apply to the property.
/// @output CSS `offset` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/offset
@mixin offset($token: "offset") {
  @include css-property-with-token("offset", $token);
}


/// Applies the `$token` to the CSS `offset-anchor` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Motion Path
/// @access public
/// @param {string} $token ["offset-anchor"] - Name of token to apply to the property.
/// @output CSS `offset-anchor` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/offset-anchor
@mixin offset-anchor($token: "offset-anchor") {
  @include css-property-with-token("offset-anchor", $token);
}


/// Applies the `$token` to the CSS `offset-distance` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Motion Path
/// @access public
/// @param {string} $token ["offset-distance"] - Name of token to apply to the property.
/// @output CSS `offset-distance` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/offset-distance
@mixin offset-distance($token: "offset-distance") {
  @include css-property-with-token("offset-distance", $token);
}


/// Applies the `$token` to the CSS `offset-path` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Motion Path
/// @access public
/// @param {string} $token ["offset-path"] - Name of token to apply to the property.
/// @output CSS `offset-path` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/offset-path
@mixin offset-path($token: "offset-path") {
  @include css-property-with-token("offset-path", $token);
}


/// Applies the `$token` to the CSS `offset-position` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Motion Path
/// @access public
/// @param {string} $token ["offset-position"] - Name of token to apply to the property.
/// @output CSS `offset-position` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/offset-position
@mixin offset-position($token: "offset-position") {
  @include css-property-with-token("offset-position", $token);
}


/// Applies the `$token` to the CSS `offset-rotate` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Motion Path
/// @access public
/// @param {string} $token ["offset-rotate"] - Name of token to apply to the property.
/// @output CSS `offset-rotate` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/offset-rotate
@mixin offset-rotate($token: "offset-rotate") {
  @include css-property-with-token("offset-rotate", $token);
}


/// Applies the `$token` to the CSS `opacity` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Color
/// @access public
/// @param {string} $token ["opacity"] - Name of token to apply to the property.
/// @output CSS `opacity` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/opacity
@mixin opacity($token: "opacity") {
  @include css-property-with-token("opacity", $token);
}


/// Applies the `$token` to the CSS `order` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Flexible Box Layout
/// @access public
/// @param {string} $token ["order"] - Name of token to apply to the property.
/// @output CSS `order` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/order
@mixin order($token: "order") {
  @include css-property-with-token("order", $token);
}


/// Applies the `$token` to the CSS `orphans` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Fragmentation
/// @access public
/// @param {string} $token ["orphans"] - Name of token to apply to the property.
/// @output CSS `orphans` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/orphans
@mixin orphans($token: "orphans") {
  @include css-property-with-token("orphans", $token);
}


/// Applies the `$token` to the CSS `outline` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Basic User Interface
/// @access public
/// @param {string} $token ["outline"] - Name of token to apply to the property.
/// @output CSS `outline` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/outline
@mixin outline($token: "outline") {
  @include css-property-with-token("outline", $token);
}


/// Applies the `$token` to the CSS `outline-color` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Basic User Interface
/// @access public
/// @param {string} $token ["outline-color"] - Name of token to apply to the property.
/// @output CSS `outline-color` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/outline-color
@mixin outline-color($token: "outline-color") {
  @include css-property-with-token("outline-color", $token);
}


/// Applies the `$token` to the CSS `outline-offset` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Basic User Interface
/// @access public
/// @param {string} $token ["outline-offset"] - Name of token to apply to the property.
/// @output CSS `outline-offset` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/outline-offset
@mixin outline-offset($token: "outline-offset") {
  @include css-property-with-token("outline-offset", $token);
}


/// Applies the `$token` to the CSS `outline-style` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Basic User Interface
/// @access public
/// @param {string} $token ["outline-style"] - Name of token to apply to the property.
/// @output CSS `outline-style` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/outline-style
@mixin outline-style($token: "outline-style") {
  @include css-property-with-token("outline-style", $token);
}


/// Applies the `$token` to the CSS `outline-width` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Basic User Interface
/// @access public
/// @param {string} $token ["outline-width"] - Name of token to apply to the property.
/// @output CSS `outline-width` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/outline-width
@mixin outline-width($token: "outline-width") {
  @include css-property-with-token("outline-width", $token);
}


/// Applies the `$token` to the CSS `overflow` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Overflow
/// @access public
/// @param {string} $token ["overflow"] - Name of token to apply to the property.
/// @output CSS `overflow` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/overflow
@mixin overflow($token: "overflow") {
  @include css-property-with-token("overflow", $token);
}


/// Applies the `$token` to the CSS `overflow-anchor` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Scroll Anchoring
/// @access public
/// @param {string} $token ["overflow-anchor"] - Name of token to apply to the property.
/// @output CSS `overflow-anchor` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/overflow-anchor
@mixin overflow-anchor($token: "overflow-anchor") {
  @include css-property-with-token("overflow-anchor", $token);
}


/// Applies the `$token` to the CSS `overflow-block` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Overflow
/// @access public
/// @param {string} $token ["overflow-block"] - Name of token to apply to the property.
/// @output CSS `overflow-block` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/overflow-block
@mixin overflow-block($token: "overflow-block") {
  @include css-property-with-token("overflow-block", $token);
}


/// Applies the `$token` to the CSS `overflow-clip-box` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group Mozilla Extensions
/// @access public
/// @param {string} $token ["overflow-clip-box"] - Name of token to apply to the property.
/// @output CSS `overflow-clip-box` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Mozilla/CSS/overflow-clip-box
@mixin overflow-clip-box($token: "overflow-clip-box") {
  @include css-property-with-token("overflow-clip-box", $token);
}


/// Applies the `$token` to the CSS `overflow-clip-margin` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Overflow
/// @access public
/// @param {string} $token ["overflow-clip-margin"] - Name of token to apply to the property.
/// @output CSS `overflow-clip-margin` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/overflow-clip-margin
@mixin overflow-clip-margin($token: "overflow-clip-margin") {
  @include css-property-with-token("overflow-clip-margin", $token);
}


/// Applies the `$token` to the CSS `overflow-inline` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Overflow
/// @access public
/// @param {string} $token ["overflow-inline"] - Name of token to apply to the property.
/// @output CSS `overflow-inline` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/overflow-inline
@mixin overflow-inline($token: "overflow-inline") {
  @include css-property-with-token("overflow-inline", $token);
}


/// Applies the `$token` to the CSS `overflow-wrap` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Text
/// @access public
/// @param {string} $token ["overflow-wrap"] - Name of token to apply to the property.
/// @output CSS `overflow-wrap` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/overflow-wrap
@mixin overflow-wrap($token: "overflow-wrap") {
  @include css-property-with-token("overflow-wrap", $token);
}


/// Applies the `$token` to the CSS `overflow-x` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Overflow
/// @access public
/// @param {string} $token ["overflow-x"] - Name of token to apply to the property.
/// @output CSS `overflow-x` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/overflow-x
@mixin overflow-x($token: "overflow-x") {
  @include css-property-with-token("overflow-x", $token);
}


/// Applies the `$token` to the CSS `overflow-y` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Overflow
/// @access public
/// @param {string} $token ["overflow-y"] - Name of token to apply to the property.
/// @output CSS `overflow-y` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/overflow-y
@mixin overflow-y($token: "overflow-y") {
  @include css-property-with-token("overflow-y", $token);
}


/// Applies the `$token` to the CSS `overscroll-behavior` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Box Model
/// @access public
/// @param {string} $token ["overscroll-behavior"] - Name of token to apply to the property.
/// @output CSS `overscroll-behavior` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/overscroll-behavior
@mixin overscroll-behavior($token: "overscroll-behavior") {
  @include css-property-with-token("overscroll-behavior", $token);
}


/// Applies the `$token` to the CSS `overscroll-behavior-block` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Box Model
/// @access public
/// @param {string} $token ["overscroll-behavior-block"] - Name of token to apply to the property.
/// @output CSS `overscroll-behavior-block` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/overscroll-behavior-block
@mixin overscroll-behavior-block($token: "overscroll-behavior-block") {
  @include css-property-with-token("overscroll-behavior-block", $token);
}


/// Applies the `$token` to the CSS `overscroll-behavior-inline` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Box Model
/// @access public
/// @param {string} $token ["overscroll-behavior-inline"] - Name of token to apply to the property.
/// @output CSS `overscroll-behavior-inline` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/overscroll-behavior-inline
@mixin overscroll-behavior-inline($token: "overscroll-behavior-inline") {
  @include css-property-with-token("overscroll-behavior-inline", $token);
}


/// Applies the `$token` to the CSS `overscroll-behavior-x` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Box Model
/// @access public
/// @param {string} $token ["overscroll-behavior-x"] - Name of token to apply to the property.
/// @output CSS `overscroll-behavior-x` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/overscroll-behavior-x
@mixin overscroll-behavior-x($token: "overscroll-behavior-x") {
  @include css-property-with-token("overscroll-behavior-x", $token);
}


/// Applies the `$token` to the CSS `overscroll-behavior-y` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Box Model
/// @access public
/// @param {string} $token ["overscroll-behavior-y"] - Name of token to apply to the property.
/// @output CSS `overscroll-behavior-y` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/overscroll-behavior-y
@mixin overscroll-behavior-y($token: "overscroll-behavior-y") {
  @include css-property-with-token("overscroll-behavior-y", $token);
}


/// Applies the `$token` to the CSS `padding` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Box Model
/// @access public
/// @param {string} $token ["padding"] - Name of token to apply to the property.
/// @output CSS `padding` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/padding
@mixin padding($token: "padding") {
  @include css-property-with-token("padding", $token);
}


/// Applies the `$token` to the CSS `padding-block` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Logical Properties
/// @access public
/// @param {string} $token ["padding-block"] - Name of token to apply to the property.
/// @output CSS `padding-block` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/padding-block
@mixin padding-block($token: "padding-block") {
  @include css-property-with-token("padding-block", $token);
}


/// Applies the `$token` to the CSS `padding-block-end` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Logical Properties
/// @access public
/// @param {string} $token ["padding-block-end"] - Name of token to apply to the property.
/// @output CSS `padding-block-end` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/padding-block-end
@mixin padding-block-end($token: "padding-block-end") {
  @include css-property-with-token("padding-block-end", $token);
}


/// Applies the `$token` to the CSS `padding-block-start` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Logical Properties
/// @access public
/// @param {string} $token ["padding-block-start"] - Name of token to apply to the property.
/// @output CSS `padding-block-start` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/padding-block-start
@mixin padding-block-start($token: "padding-block-start") {
  @include css-property-with-token("padding-block-start", $token);
}


/// Applies the `$token` to the CSS `padding-bottom` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Box Model
/// @access public
/// @param {string} $token ["padding-bottom"] - Name of token to apply to the property.
/// @output CSS `padding-bottom` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/padding-bottom
@mixin padding-bottom($token: "padding-bottom") {
  @include css-property-with-token("padding-bottom", $token);
}


/// Applies the `$token` to the CSS `padding-inline` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Logical Properties
/// @access public
/// @param {string} $token ["padding-inline"] - Name of token to apply to the property.
/// @output CSS `padding-inline` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/padding-inline
@mixin padding-inline($token: "padding-inline") {
  @include css-property-with-token("padding-inline", $token);
}


/// Applies the `$token` to the CSS `padding-inline-end` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Logical Properties
/// @access public
/// @param {string} $token ["padding-inline-end"] - Name of token to apply to the property.
/// @output CSS `padding-inline-end` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/padding-inline-end
@mixin padding-inline-end($token: "padding-inline-end") {
  @include css-property-with-token("padding-inline-end", $token);
}


/// Applies the `$token` to the CSS `padding-inline-start` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Logical Properties
/// @access public
/// @param {string} $token ["padding-inline-start"] - Name of token to apply to the property.
/// @output CSS `padding-inline-start` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/padding-inline-start
@mixin padding-inline-start($token: "padding-inline-start") {
  @include css-property-with-token("padding-inline-start", $token);
}


/// Applies the `$token` to the CSS `padding-left` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Box Model
/// @access public
/// @param {string} $token ["padding-left"] - Name of token to apply to the property.
/// @output CSS `padding-left` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/padding-left
@mixin padding-left($token: "padding-left") {
  @include css-property-with-token("padding-left", $token);
}


/// Applies the `$token` to the CSS `padding-right` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Box Model
/// @access public
/// @param {string} $token ["padding-right"] - Name of token to apply to the property.
/// @output CSS `padding-right` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/padding-right
@mixin padding-right($token: "padding-right") {
  @include css-property-with-token("padding-right", $token);
}


/// Applies the `$token` to the CSS `padding-top` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Box Model
/// @access public
/// @param {string} $token ["padding-top"] - Name of token to apply to the property.
/// @output CSS `padding-top` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/padding-top
@mixin padding-top($token: "padding-top") {
  @include css-property-with-token("padding-top", $token);
}


/// Applies the `$token` to the CSS `page-break-after` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Pages
/// @access public
/// @param {string} $token ["page-break-after"] - Name of token to apply to the property.
/// @output CSS `page-break-after` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/page-break-after
@mixin page-break-after($token: "page-break-after") {
  @include css-property-with-token("page-break-after", $token);
}


/// Applies the `$token` to the CSS `page-break-before` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Pages
/// @access public
/// @param {string} $token ["page-break-before"] - Name of token to apply to the property.
/// @output CSS `page-break-before` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/page-break-before
@mixin page-break-before($token: "page-break-before") {
  @include css-property-with-token("page-break-before", $token);
}


/// Applies the `$token` to the CSS `page-break-inside` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Pages
/// @access public
/// @param {string} $token ["page-break-inside"] - Name of token to apply to the property.
/// @output CSS `page-break-inside` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/page-break-inside
@mixin page-break-inside($token: "page-break-inside") {
  @include css-property-with-token("page-break-inside", $token);
}


/// Applies the `$token` to the CSS `paint-order` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Text
/// @access public
/// @param {string} $token ["paint-order"] - Name of token to apply to the property.
/// @output CSS `paint-order` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/paint-order
@mixin paint-order($token: "paint-order") {
  @include css-property-with-token("paint-order", $token);
}


/// Applies the `$token` to the CSS `perspective` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Transforms
/// @access public
/// @param {string} $token ["perspective"] - Name of token to apply to the property.
/// @output CSS `perspective` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/perspective
@mixin perspective($token: "perspective") {
  @include css-property-with-token("perspective", $token);
}


/// Applies the `$token` to the CSS `perspective-origin` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Transforms
/// @access public
/// @param {string} $token ["perspective-origin"] - Name of token to apply to the property.
/// @output CSS `perspective-origin` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/perspective-origin
@mixin perspective-origin($token: "perspective-origin") {
  @include css-property-with-token("perspective-origin", $token);
}


/// Applies the `$token` to the CSS `place-content` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Box Alignment
/// @access public
/// @param {string} $token ["place-content"] - Name of token to apply to the property.
/// @output CSS `place-content` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/place-content
@mixin place-content($token: "place-content") {
  @include css-property-with-token("place-content", $token);
}


/// Applies the `$token` to the CSS `place-items` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Box Alignment
/// @access public
/// @param {string} $token ["place-items"] - Name of token to apply to the property.
/// @output CSS `place-items` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/place-items
@mixin place-items($token: "place-items") {
  @include css-property-with-token("place-items", $token);
}


/// Applies the `$token` to the CSS `place-self` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Box Alignment
/// @access public
/// @param {string} $token ["place-self"] - Name of token to apply to the property.
/// @output CSS `place-self` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/place-self
@mixin place-self($token: "place-self") {
  @include css-property-with-token("place-self", $token);
}


/// Applies the `$token` to the CSS `pointer-events` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Basic User Interface
/// @access public
/// @param {string} $token ["pointer-events"] - Name of token to apply to the property.
/// @output CSS `pointer-events` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/pointer-events
@mixin pointer-events($token: "pointer-events") {
  @include css-property-with-token("pointer-events", $token);
}


/// Applies the `$token` to the CSS `position` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Positioning
/// @access public
/// @param {string} $token ["position"] - Name of token to apply to the property.
/// @output CSS `position` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/position
@mixin position($token: "position") {
  @include css-property-with-token("position", $token);
}


/// Applies the `$token` to the CSS `quotes` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Generated Content
/// @access public
/// @param {string} $token ["quotes"] - Name of token to apply to the property.
/// @output CSS `quotes` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/quotes
@mixin quotes($token: "quotes") {
  @include css-property-with-token("quotes", $token);
}


/// Applies the `$token` to the CSS `resize` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Basic User Interface
/// @access public
/// @param {string} $token ["resize"] - Name of token to apply to the property.
/// @output CSS `resize` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/resize
@mixin resize($token: "resize") {
  @include css-property-with-token("resize", $token);
}


/// Applies the `$token` to the CSS `right` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Positioning
/// @access public
/// @param {string} $token ["right"] - Name of token to apply to the property.
/// @output CSS `right` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/right
@mixin right($token: "right") {
  @include css-property-with-token("right", $token);
}


/// Applies the `$token` to the CSS `rotate` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Transforms
/// @access public
/// @param {string} $token ["rotate"] - Name of token to apply to the property.
/// @output CSS `rotate` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/rotate
@mixin rotate($token: "rotate") {
  @include css-property-with-token("rotate", $token);
}


/// Applies the `$token` to the CSS `row-gap` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Box Alignment
/// @access public
/// @param {string} $token ["row-gap"] - Name of token to apply to the property.
/// @output CSS `row-gap` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/row-gap
@mixin row-gap($token: "row-gap") {
  @include css-property-with-token("row-gap", $token);
}


/// Applies the `$token` to the CSS `ruby-align` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Ruby
/// @access public
/// @param {string} $token ["ruby-align"] - Name of token to apply to the property.
/// @output CSS `ruby-align` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/ruby-align
@mixin ruby-align($token: "ruby-align") {
  @include css-property-with-token("ruby-align", $token);
}


/// Applies the `$token` to the CSS `ruby-merge` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Ruby
/// @access public
/// @param {string} $token ["ruby-merge"] - Name of token to apply to the property.
/// @output CSS `ruby-merge` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/ruby-merge
@mixin ruby-merge($token: "ruby-merge") {
  @include css-property-with-token("ruby-merge", $token);
}


/// Applies the `$token` to the CSS `ruby-position` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Ruby
/// @access public
/// @param {string} $token ["ruby-position"] - Name of token to apply to the property.
/// @output CSS `ruby-position` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/ruby-position
@mixin ruby-position($token: "ruby-position") {
  @include css-property-with-token("ruby-position", $token);
}


/// Applies the `$token` to the CSS `scale` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Transforms
/// @access public
/// @param {string} $token ["scale"] - Name of token to apply to the property.
/// @output CSS `scale` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/scale
@mixin scale($token: "scale") {
  @include css-property-with-token("scale", $token);
}


/// Applies the `$token` to the CSS `scrollbar-color` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Scrollbars
/// @access public
/// @param {string} $token ["scrollbar-color"] - Name of token to apply to the property.
/// @output CSS `scrollbar-color` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/scrollbar-color
@mixin scrollbar-color($token: "scrollbar-color") {
  @include css-property-with-token("scrollbar-color", $token);
}


/// Applies the `$token` to the CSS `scrollbar-gutter` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Overflow
/// @access public
/// @param {string} $token ["scrollbar-gutter"] - Name of token to apply to the property.
/// @output CSS `scrollbar-gutter` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/scrollbar-gutter
@mixin scrollbar-gutter($token: "scrollbar-gutter") {
  @include css-property-with-token("scrollbar-gutter", $token);
}


/// Applies the `$token` to the CSS `scrollbar-width` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Scrollbars
/// @access public
/// @param {string} $token ["scrollbar-width"] - Name of token to apply to the property.
/// @output CSS `scrollbar-width` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/scrollbar-width
@mixin scrollbar-width($token: "scrollbar-width") {
  @include css-property-with-token("scrollbar-width", $token);
}


/// Applies the `$token` to the CSS `scroll-behavior` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSSOM View
/// @access public
/// @param {string} $token ["scroll-behavior"] - Name of token to apply to the property.
/// @output CSS `scroll-behavior` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/scroll-behavior
@mixin scroll-behavior($token: "scroll-behavior") {
  @include css-property-with-token("scroll-behavior", $token);
}


/// Applies the `$token` to the CSS `scroll-margin` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Scroll Snap
/// @access public
/// @param {string} $token ["scroll-margin"] - Name of token to apply to the property.
/// @output CSS `scroll-margin` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/scroll-margin
@mixin scroll-margin($token: "scroll-margin") {
  @include css-property-with-token("scroll-margin", $token);
}


/// Applies the `$token` to the CSS `scroll-margin-block` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Scroll Snap
/// @access public
/// @param {string} $token ["scroll-margin-block"] - Name of token to apply to the property.
/// @output CSS `scroll-margin-block` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/scroll-margin-block
@mixin scroll-margin-block($token: "scroll-margin-block") {
  @include css-property-with-token("scroll-margin-block", $token);
}


/// Applies the `$token` to the CSS `scroll-margin-block-start` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Scroll Snap
/// @access public
/// @param {string} $token ["scroll-margin-block-start"] - Name of token to apply to the property.
/// @output CSS `scroll-margin-block-start` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/scroll-margin-block-start
@mixin scroll-margin-block-start($token: "scroll-margin-block-start") {
  @include css-property-with-token("scroll-margin-block-start", $token);
}


/// Applies the `$token` to the CSS `scroll-margin-block-end` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Scroll Snap
/// @access public
/// @param {string} $token ["scroll-margin-block-end"] - Name of token to apply to the property.
/// @output CSS `scroll-margin-block-end` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/scroll-margin-block-end
@mixin scroll-margin-block-end($token: "scroll-margin-block-end") {
  @include css-property-with-token("scroll-margin-block-end", $token);
}


/// Applies the `$token` to the CSS `scroll-margin-bottom` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Scroll Snap
/// @access public
/// @param {string} $token ["scroll-margin-bottom"] - Name of token to apply to the property.
/// @output CSS `scroll-margin-bottom` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/scroll-margin-bottom
@mixin scroll-margin-bottom($token: "scroll-margin-bottom") {
  @include css-property-with-token("scroll-margin-bottom", $token);
}


/// Applies the `$token` to the CSS `scroll-margin-inline` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Scroll Snap
/// @access public
/// @param {string} $token ["scroll-margin-inline"] - Name of token to apply to the property.
/// @output CSS `scroll-margin-inline` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/scroll-margin-inline
@mixin scroll-margin-inline($token: "scroll-margin-inline") {
  @include css-property-with-token("scroll-margin-inline", $token);
}


/// Applies the `$token` to the CSS `scroll-margin-inline-start` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Scroll Snap
/// @access public
/// @param {string} $token ["scroll-margin-inline-start"] - Name of token to apply to the property.
/// @output CSS `scroll-margin-inline-start` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/scroll-margin-inline-start
@mixin scroll-margin-inline-start($token: "scroll-margin-inline-start") {
  @include css-property-with-token("scroll-margin-inline-start", $token);
}


/// Applies the `$token` to the CSS `scroll-margin-inline-end` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Scroll Snap
/// @access public
/// @param {string} $token ["scroll-margin-inline-end"] - Name of token to apply to the property.
/// @output CSS `scroll-margin-inline-end` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/scroll-margin-inline-end
@mixin scroll-margin-inline-end($token: "scroll-margin-inline-end") {
  @include css-property-with-token("scroll-margin-inline-end", $token);
}


/// Applies the `$token` to the CSS `scroll-margin-left` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Scroll Snap
/// @access public
/// @param {string} $token ["scroll-margin-left"] - Name of token to apply to the property.
/// @output CSS `scroll-margin-left` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/scroll-margin-left
@mixin scroll-margin-left($token: "scroll-margin-left") {
  @include css-property-with-token("scroll-margin-left", $token);
}


/// Applies the `$token` to the CSS `scroll-margin-right` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Scroll Snap
/// @access public
/// @param {string} $token ["scroll-margin-right"] - Name of token to apply to the property.
/// @output CSS `scroll-margin-right` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/scroll-margin-right
@mixin scroll-margin-right($token: "scroll-margin-right") {
  @include css-property-with-token("scroll-margin-right", $token);
}


/// Applies the `$token` to the CSS `scroll-margin-top` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Scroll Snap
/// @access public
/// @param {string} $token ["scroll-margin-top"] - Name of token to apply to the property.
/// @output CSS `scroll-margin-top` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/scroll-margin-top
@mixin scroll-margin-top($token: "scroll-margin-top") {
  @include css-property-with-token("scroll-margin-top", $token);
}


/// Applies the `$token` to the CSS `scroll-padding` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Scroll Snap
/// @access public
/// @param {string} $token ["scroll-padding"] - Name of token to apply to the property.
/// @output CSS `scroll-padding` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/scroll-padding
@mixin scroll-padding($token: "scroll-padding") {
  @include css-property-with-token("scroll-padding", $token);
}


/// Applies the `$token` to the CSS `scroll-padding-block` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Scroll Snap
/// @access public
/// @param {string} $token ["scroll-padding-block"] - Name of token to apply to the property.
/// @output CSS `scroll-padding-block` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/scroll-padding-block
@mixin scroll-padding-block($token: "scroll-padding-block") {
  @include css-property-with-token("scroll-padding-block", $token);
}


/// Applies the `$token` to the CSS `scroll-padding-block-start` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Scroll Snap
/// @access public
/// @param {string} $token ["scroll-padding-block-start"] - Name of token to apply to the property.
/// @output CSS `scroll-padding-block-start` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/scroll-padding-block-start
@mixin scroll-padding-block-start($token: "scroll-padding-block-start") {
  @include css-property-with-token("scroll-padding-block-start", $token);
}


/// Applies the `$token` to the CSS `scroll-padding-block-end` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Scroll Snap
/// @access public
/// @param {string} $token ["scroll-padding-block-end"] - Name of token to apply to the property.
/// @output CSS `scroll-padding-block-end` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/scroll-padding-block-end
@mixin scroll-padding-block-end($token: "scroll-padding-block-end") {
  @include css-property-with-token("scroll-padding-block-end", $token);
}


/// Applies the `$token` to the CSS `scroll-padding-bottom` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Scroll Snap
/// @access public
/// @param {string} $token ["scroll-padding-bottom"] - Name of token to apply to the property.
/// @output CSS `scroll-padding-bottom` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/scroll-padding-bottom
@mixin scroll-padding-bottom($token: "scroll-padding-bottom") {
  @include css-property-with-token("scroll-padding-bottom", $token);
}


/// Applies the `$token` to the CSS `scroll-padding-inline` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Scroll Snap
/// @access public
/// @param {string} $token ["scroll-padding-inline"] - Name of token to apply to the property.
/// @output CSS `scroll-padding-inline` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/scroll-padding-inline
@mixin scroll-padding-inline($token: "scroll-padding-inline") {
  @include css-property-with-token("scroll-padding-inline", $token);
}


/// Applies the `$token` to the CSS `scroll-padding-inline-start` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Scroll Snap
/// @access public
/// @param {string} $token ["scroll-padding-inline-start"] - Name of token to apply to the property.
/// @output CSS `scroll-padding-inline-start` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/scroll-padding-inline-start
@mixin scroll-padding-inline-start($token: "scroll-padding-inline-start") {
  @include css-property-with-token("scroll-padding-inline-start", $token);
}


/// Applies the `$token` to the CSS `scroll-padding-inline-end` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Scroll Snap
/// @access public
/// @param {string} $token ["scroll-padding-inline-end"] - Name of token to apply to the property.
/// @output CSS `scroll-padding-inline-end` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/scroll-padding-inline-end
@mixin scroll-padding-inline-end($token: "scroll-padding-inline-end") {
  @include css-property-with-token("scroll-padding-inline-end", $token);
}


/// Applies the `$token` to the CSS `scroll-padding-left` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Scroll Snap
/// @access public
/// @param {string} $token ["scroll-padding-left"] - Name of token to apply to the property.
/// @output CSS `scroll-padding-left` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/scroll-padding-left
@mixin scroll-padding-left($token: "scroll-padding-left") {
  @include css-property-with-token("scroll-padding-left", $token);
}


/// Applies the `$token` to the CSS `scroll-padding-right` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Scroll Snap
/// @access public
/// @param {string} $token ["scroll-padding-right"] - Name of token to apply to the property.
/// @output CSS `scroll-padding-right` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/scroll-padding-right
@mixin scroll-padding-right($token: "scroll-padding-right") {
  @include css-property-with-token("scroll-padding-right", $token);
}


/// Applies the `$token` to the CSS `scroll-padding-top` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Scroll Snap
/// @access public
/// @param {string} $token ["scroll-padding-top"] - Name of token to apply to the property.
/// @output CSS `scroll-padding-top` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/scroll-padding-top
@mixin scroll-padding-top($token: "scroll-padding-top") {
  @include css-property-with-token("scroll-padding-top", $token);
}


/// Applies the `$token` to the CSS `scroll-snap-align` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Scroll Snap
/// @access public
/// @param {string} $token ["scroll-snap-align"] - Name of token to apply to the property.
/// @output CSS `scroll-snap-align` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/scroll-snap-align
@mixin scroll-snap-align($token: "scroll-snap-align") {
  @include css-property-with-token("scroll-snap-align", $token);
}


/// Applies the `$token` to the CSS `scroll-snap-coordinate` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Scroll Snap
/// @access public
/// @param {string} $token ["scroll-snap-coordinate"] - Name of token to apply to the property.
/// @output CSS `scroll-snap-coordinate` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/scroll-snap-coordinate
@mixin scroll-snap-coordinate($token: "scroll-snap-coordinate") {
  @include css-property-with-token("scroll-snap-coordinate", $token);
}


/// Applies the `$token` to the CSS `scroll-snap-destination` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Scroll Snap
/// @access public
/// @param {string} $token ["scroll-snap-destination"] - Name of token to apply to the property.
/// @output CSS `scroll-snap-destination` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/scroll-snap-destination
@mixin scroll-snap-destination($token: "scroll-snap-destination") {
  @include css-property-with-token("scroll-snap-destination", $token);
}


/// Applies the `$token` to the CSS `scroll-snap-points-x` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Scroll Snap
/// @access public
/// @param {string} $token ["scroll-snap-points-x"] - Name of token to apply to the property.
/// @output CSS `scroll-snap-points-x` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/scroll-snap-points-x
@mixin scroll-snap-points-x($token: "scroll-snap-points-x") {
  @include css-property-with-token("scroll-snap-points-x", $token);
}


/// Applies the `$token` to the CSS `scroll-snap-points-y` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Scroll Snap
/// @access public
/// @param {string} $token ["scroll-snap-points-y"] - Name of token to apply to the property.
/// @output CSS `scroll-snap-points-y` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/scroll-snap-points-y
@mixin scroll-snap-points-y($token: "scroll-snap-points-y") {
  @include css-property-with-token("scroll-snap-points-y", $token);
}


/// Applies the `$token` to the CSS `scroll-snap-stop` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Scroll Snap
/// @access public
/// @param {string} $token ["scroll-snap-stop"] - Name of token to apply to the property.
/// @output CSS `scroll-snap-stop` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/scroll-snap-stop
@mixin scroll-snap-stop($token: "scroll-snap-stop") {
  @include css-property-with-token("scroll-snap-stop", $token);
}


/// Applies the `$token` to the CSS `scroll-snap-type` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Scroll Snap
/// @access public
/// @param {string} $token ["scroll-snap-type"] - Name of token to apply to the property.
/// @output CSS `scroll-snap-type` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/scroll-snap-type
@mixin scroll-snap-type($token: "scroll-snap-type") {
  @include css-property-with-token("scroll-snap-type", $token);
}


/// Applies the `$token` to the CSS `scroll-snap-type-x` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Scroll Snap
/// @access public
/// @param {string} $token ["scroll-snap-type-x"] - Name of token to apply to the property.
/// @output CSS `scroll-snap-type-x` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/scroll-snap-type-x
@mixin scroll-snap-type-x($token: "scroll-snap-type-x") {
  @include css-property-with-token("scroll-snap-type-x", $token);
}


/// Applies the `$token` to the CSS `scroll-snap-type-y` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Scroll Snap
/// @access public
/// @param {string} $token ["scroll-snap-type-y"] - Name of token to apply to the property.
/// @output CSS `scroll-snap-type-y` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/scroll-snap-type-y
@mixin scroll-snap-type-y($token: "scroll-snap-type-y") {
  @include css-property-with-token("scroll-snap-type-y", $token);
}


/// Applies the `$token` to the CSS `shape-image-threshold` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Shapes
/// @access public
/// @param {string} $token ["shape-image-threshold"] - Name of token to apply to the property.
/// @output CSS `shape-image-threshold` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/shape-image-threshold
@mixin shape-image-threshold($token: "shape-image-threshold") {
  @include css-property-with-token("shape-image-threshold", $token);
}


/// Applies the `$token` to the CSS `shape-margin` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Shapes
/// @access public
/// @param {string} $token ["shape-margin"] - Name of token to apply to the property.
/// @output CSS `shape-margin` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/shape-margin
@mixin shape-margin($token: "shape-margin") {
  @include css-property-with-token("shape-margin", $token);
}


/// Applies the `$token` to the CSS `shape-outside` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Shapes
/// @access public
/// @param {string} $token ["shape-outside"] - Name of token to apply to the property.
/// @output CSS `shape-outside` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/shape-outside
@mixin shape-outside($token: "shape-outside") {
  @include css-property-with-token("shape-outside", $token);
}


/// Applies the `$token` to the CSS `tab-size` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Text
/// @access public
/// @param {string} $token ["tab-size"] - Name of token to apply to the property.
/// @output CSS `tab-size` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/tab-size
@mixin tab-size($token: "tab-size") {
  @include css-property-with-token("tab-size", $token);
}


/// Applies the `$token` to the CSS `table-layout` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Table
/// @access public
/// @param {string} $token ["table-layout"] - Name of token to apply to the property.
/// @output CSS `table-layout` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/table-layout
@mixin table-layout($token: "table-layout") {
  @include css-property-with-token("table-layout", $token);
}


/// Applies the `$token` to the CSS `text-align` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Text
/// @access public
/// @param {string} $token ["text-align"] - Name of token to apply to the property.
/// @output CSS `text-align` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/text-align
@mixin text-align($token: "text-align") {
  @include css-property-with-token("text-align", $token);
}


/// Applies the `$token` to the CSS `text-align-last` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Text
/// @access public
/// @param {string} $token ["text-align-last"] - Name of token to apply to the property.
/// @output CSS `text-align-last` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/text-align-last
@mixin text-align-last($token: "text-align-last") {
  @include css-property-with-token("text-align-last", $token);
}


/// Applies the `$token` to the CSS `text-combine-upright` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Writing Modes
/// @access public
/// @param {string} $token ["text-combine-upright"] - Name of token to apply to the property.
/// @output CSS `text-combine-upright` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/text-combine-upright
@mixin text-combine-upright($token: "text-combine-upright") {
  @include css-property-with-token("text-combine-upright", $token);
}


/// Applies the `$token` to the CSS `text-decoration` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Text Decoration
/// @access public
/// @param {string} $token ["text-decoration"] - Name of token to apply to the property.
/// @output CSS `text-decoration` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/text-decoration
@mixin text-decoration($token: "text-decoration") {
  @include css-property-with-token("text-decoration", $token);
}


/// Applies the `$token` to the CSS `text-decoration-color` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Text Decoration
/// @access public
/// @param {string} $token ["text-decoration-color"] - Name of token to apply to the property.
/// @output CSS `text-decoration-color` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/text-decoration-color
@mixin text-decoration-color($token: "text-decoration-color") {
  @include css-property-with-token("text-decoration-color", $token);
}


/// Applies the `$token` to the CSS `text-decoration-line` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Text Decoration
/// @access public
/// @param {string} $token ["text-decoration-line"] - Name of token to apply to the property.
/// @output CSS `text-decoration-line` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/text-decoration-line
@mixin text-decoration-line($token: "text-decoration-line") {
  @include css-property-with-token("text-decoration-line", $token);
}


/// Applies the `$token` to the CSS `text-decoration-skip` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Text Decoration
/// @access public
/// @param {string} $token ["text-decoration-skip"] - Name of token to apply to the property.
/// @output CSS `text-decoration-skip` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/text-decoration-skip
@mixin text-decoration-skip($token: "text-decoration-skip") {
  @include css-property-with-token("text-decoration-skip", $token);
}


/// Applies the `$token` to the CSS `text-decoration-skip-ink` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Text Decoration
/// @access public
/// @param {string} $token ["text-decoration-skip-ink"] - Name of token to apply to the property.
/// @output CSS `text-decoration-skip-ink` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/text-decoration-skip-ink
@mixin text-decoration-skip-ink($token: "text-decoration-skip-ink") {
  @include css-property-with-token("text-decoration-skip-ink", $token);
}


/// Applies the `$token` to the CSS `text-decoration-style` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Text Decoration
/// @access public
/// @param {string} $token ["text-decoration-style"] - Name of token to apply to the property.
/// @output CSS `text-decoration-style` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/text-decoration-style
@mixin text-decoration-style($token: "text-decoration-style") {
  @include css-property-with-token("text-decoration-style", $token);
}


/// Applies the `$token` to the CSS `text-decoration-thickness` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Text Decoration
/// @access public
/// @param {string} $token ["text-decoration-thickness"] - Name of token to apply to the property.
/// @output CSS `text-decoration-thickness` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/text-decoration-thickness
@mixin text-decoration-thickness($token: "text-decoration-thickness") {
  @include css-property-with-token("text-decoration-thickness", $token);
}


/// Applies the `$token` to the CSS `text-emphasis` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Text Decoration
/// @access public
/// @param {string} $token ["text-emphasis"] - Name of token to apply to the property.
/// @output CSS `text-emphasis` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/text-emphasis
@mixin text-emphasis($token: "text-emphasis") {
  @include css-property-with-token("text-emphasis", $token);
}


/// Applies the `$token` to the CSS `text-emphasis-color` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Text Decoration
/// @access public
/// @param {string} $token ["text-emphasis-color"] - Name of token to apply to the property.
/// @output CSS `text-emphasis-color` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/text-emphasis-color
@mixin text-emphasis-color($token: "text-emphasis-color") {
  @include css-property-with-token("text-emphasis-color", $token);
}


/// Applies the `$token` to the CSS `text-emphasis-position` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Text Decoration
/// @access public
/// @param {string} $token ["text-emphasis-position"] - Name of token to apply to the property.
/// @output CSS `text-emphasis-position` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/text-emphasis-position
@mixin text-emphasis-position($token: "text-emphasis-position") {
  @include css-property-with-token("text-emphasis-position", $token);
}


/// Applies the `$token` to the CSS `text-emphasis-style` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Text Decoration
/// @access public
/// @param {string} $token ["text-emphasis-style"] - Name of token to apply to the property.
/// @output CSS `text-emphasis-style` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/text-emphasis-style
@mixin text-emphasis-style($token: "text-emphasis-style") {
  @include css-property-with-token("text-emphasis-style", $token);
}


/// Applies the `$token` to the CSS `text-indent` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Text
/// @access public
/// @param {string} $token ["text-indent"] - Name of token to apply to the property.
/// @output CSS `text-indent` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/text-indent
@mixin text-indent($token: "text-indent") {
  @include css-property-with-token("text-indent", $token);
}


/// Applies the `$token` to the CSS `text-justify` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Text
/// @access public
/// @param {string} $token ["text-justify"] - Name of token to apply to the property.
/// @output CSS `text-justify` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/text-justify
@mixin text-justify($token: "text-justify") {
  @include css-property-with-token("text-justify", $token);
}


/// Applies the `$token` to the CSS `text-orientation` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Writing Modes
/// @access public
/// @param {string} $token ["text-orientation"] - Name of token to apply to the property.
/// @output CSS `text-orientation` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/text-orientation
@mixin text-orientation($token: "text-orientation") {
  @include css-property-with-token("text-orientation", $token);
}


/// Applies the `$token` to the CSS `text-overflow` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Basic User Interface
/// @access public
/// @param {string} $token ["text-overflow"] - Name of token to apply to the property.
/// @output CSS `text-overflow` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/text-overflow
@mixin text-overflow($token: "text-overflow") {
  @include css-property-with-token("text-overflow", $token);
}


/// Applies the `$token` to the CSS `text-rendering` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Miscellaneous
/// @access public
/// @param {string} $token ["text-rendering"] - Name of token to apply to the property.
/// @output CSS `text-rendering` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/text-rendering
@mixin text-rendering($token: "text-rendering") {
  @include css-property-with-token("text-rendering", $token);
}


/// Applies the `$token` to the CSS `text-shadow` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Text Decoration
/// @access public
/// @param {string} $token ["text-shadow"] - Name of token to apply to the property.
/// @output CSS `text-shadow` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/text-shadow
@mixin text-shadow($token: "text-shadow") {
  @include css-property-with-token("text-shadow", $token);
}


/// Applies the `$token` to the CSS `text-size-adjust` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Text
/// @access public
/// @param {string} $token ["text-size-adjust"] - Name of token to apply to the property.
/// @output CSS `text-size-adjust` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/text-size-adjust
@mixin text-size-adjust($token: "text-size-adjust") {
  @include css-property-with-token("text-size-adjust", $token);
}


/// Applies the `$token` to the CSS `text-transform` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Text
/// @access public
/// @param {string} $token ["text-transform"] - Name of token to apply to the property.
/// @output CSS `text-transform` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/text-transform
@mixin text-transform($token: "text-transform") {
  @include css-property-with-token("text-transform", $token);
}


/// Applies the `$token` to the CSS `text-underline-offset` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Text Decoration
/// @access public
/// @param {string} $token ["text-underline-offset"] - Name of token to apply to the property.
/// @output CSS `text-underline-offset` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/text-underline-offset
@mixin text-underline-offset($token: "text-underline-offset") {
  @include css-property-with-token("text-underline-offset", $token);
}


/// Applies the `$token` to the CSS `text-underline-position` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Text Decoration
/// @access public
/// @param {string} $token ["text-underline-position"] - Name of token to apply to the property.
/// @output CSS `text-underline-position` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/text-underline-position
@mixin text-underline-position($token: "text-underline-position") {
  @include css-property-with-token("text-underline-position", $token);
}


/// Applies the `$token` to the CSS `top` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Positioning
/// @access public
/// @param {string} $token ["top"] - Name of token to apply to the property.
/// @output CSS `top` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/top
@mixin top($token: "top") {
  @include css-property-with-token("top", $token);
}


/// Applies the `$token` to the CSS `touch-action` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group Pointer Events
/// @access public
/// @param {string} $token ["touch-action"] - Name of token to apply to the property.
/// @output CSS `touch-action` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/touch-action
@mixin touch-action($token: "touch-action") {
  @include css-property-with-token("touch-action", $token);
}


/// Applies the `$token` to the CSS `transform` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Transforms
/// @access public
/// @param {string} $token ["transform"] - Name of token to apply to the property.
/// @output CSS `transform` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/transform
@mixin transform($token: "transform") {
  @include css-property-with-token("transform", $token);
}


/// Applies the `$token` to the CSS `transform-box` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Transforms
/// @access public
/// @param {string} $token ["transform-box"] - Name of token to apply to the property.
/// @output CSS `transform-box` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/transform-box
@mixin transform-box($token: "transform-box") {
  @include css-property-with-token("transform-box", $token);
}


/// Applies the `$token` to the CSS `transform-origin` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Transforms
/// @access public
/// @param {string} $token ["transform-origin"] - Name of token to apply to the property.
/// @output CSS `transform-origin` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/transform-origin
@mixin transform-origin($token: "transform-origin") {
  @include css-property-with-token("transform-origin", $token);
}


/// Applies the `$token` to the CSS `transform-style` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Transforms
/// @access public
/// @param {string} $token ["transform-style"] - Name of token to apply to the property.
/// @output CSS `transform-style` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/transform-style
@mixin transform-style($token: "transform-style") {
  @include css-property-with-token("transform-style", $token);
}


/// Applies the `$token` to the CSS `transition` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Transitions
/// @access public
/// @param {string} $token ["transition"] - Name of token to apply to the property.
/// @output CSS `transition` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/transition
@mixin transition($token: "transition") {
  @include css-property-with-token("transition", $token);
}


/// Applies the `$token` to the CSS `transition-delay` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Transitions
/// @access public
/// @param {string} $token ["transition-delay"] - Name of token to apply to the property.
/// @output CSS `transition-delay` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/transition-delay
@mixin transition-delay($token: "transition-delay") {
  @include css-property-with-token("transition-delay", $token);
}


/// Applies the `$token` to the CSS `transition-duration` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Transitions
/// @access public
/// @param {string} $token ["transition-duration"] - Name of token to apply to the property.
/// @output CSS `transition-duration` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/transition-duration
@mixin transition-duration($token: "transition-duration") {
  @include css-property-with-token("transition-duration", $token);
}


/// Applies the `$token` to the CSS `transition-property` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Transitions
/// @access public
/// @param {string} $token ["transition-property"] - Name of token to apply to the property.
/// @output CSS `transition-property` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/transition-property
@mixin transition-property($token: "transition-property") {
  @include css-property-with-token("transition-property", $token);
}


/// Applies the `$token` to the CSS `transition-timing-function` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Transitions
/// @access public
/// @param {string} $token ["transition-timing-function"] - Name of token to apply to the property.
/// @output CSS `transition-timing-function` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/transition-timing-function
@mixin transition-timing-function($token: "transition-timing-function") {
  @include css-property-with-token("transition-timing-function", $token);
}


/// Applies the `$token` to the CSS `translate` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Transforms
/// @access public
/// @param {string} $token ["translate"] - Name of token to apply to the property.
/// @output CSS `translate` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/translate
@mixin translate($token: "translate") {
  @include css-property-with-token("translate", $token);
}


/// Applies the `$token` to the CSS `unicode-bidi` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Writing Modes
/// @access public
/// @param {string} $token ["unicode-bidi"] - Name of token to apply to the property.
/// @output CSS `unicode-bidi` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/unicode-bidi
@mixin unicode-bidi($token: "unicode-bidi") {
  @include css-property-with-token("unicode-bidi", $token);
}


/// Applies the `$token` to the CSS `user-select` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Basic User Interface
/// @access public
/// @param {string} $token ["user-select"] - Name of token to apply to the property.
/// @output CSS `user-select` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/user-select
@mixin user-select($token: "user-select") {
  @include css-property-with-token("user-select", $token);
}


/// Applies the `$token` to the CSS `vertical-align` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Table
/// @access public
/// @param {string} $token ["vertical-align"] - Name of token to apply to the property.
/// @output CSS `vertical-align` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/vertical-align
@mixin vertical-align($token: "vertical-align") {
  @include css-property-with-token("vertical-align", $token);
}


/// Applies the `$token` to the CSS `visibility` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Box Model
/// @access public
/// @param {string} $token ["visibility"] - Name of token to apply to the property.
/// @output CSS `visibility` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/visibility
@mixin visibility($token: "visibility") {
  @include css-property-with-token("visibility", $token);
}


/// Applies the `$token` to the CSS `white-space` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Text
/// @access public
/// @param {string} $token ["white-space"] - Name of token to apply to the property.
/// @output CSS `white-space` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/white-space
@mixin white-space($token: "white-space") {
  @include css-property-with-token("white-space", $token);
}


/// Applies the `$token` to the CSS `widows` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Fragmentation
/// @access public
/// @param {string} $token ["widows"] - Name of token to apply to the property.
/// @output CSS `widows` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/widows
@mixin widows($token: "widows") {
  @include css-property-with-token("widows", $token);
}


/// Applies the `$token` to the CSS `width` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Box Model
/// @access public
/// @param {string} $token ["width"] - Name of token to apply to the property.
/// @output CSS `width` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/width
@mixin width($token: "width") {
  @include css-property-with-token("width", $token);
}


/// Applies the `$token` to the CSS `will-change` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Will Change
/// @access public
/// @param {string} $token ["will-change"] - Name of token to apply to the property.
/// @output CSS `will-change` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/will-change
@mixin will-change($token: "will-change") {
  @include css-property-with-token("will-change", $token);
}


/// Applies the `$token` to the CSS `word-break` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Text
/// @access public
/// @param {string} $token ["word-break"] - Name of token to apply to the property.
/// @output CSS `word-break` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/word-break
@mixin word-break($token: "word-break") {
  @include css-property-with-token("word-break", $token);
}


/// Applies the `$token` to the CSS `word-spacing` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Text
/// @access public
/// @param {string} $token ["word-spacing"] - Name of token to apply to the property.
/// @output CSS `word-spacing` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/word-spacing
@mixin word-spacing($token: "word-spacing") {
  @include css-property-with-token("word-spacing", $token);
}


/// Applies the `$token` to the CSS `word-wrap` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Text
/// @access public
/// @param {string} $token ["word-wrap"] - Name of token to apply to the property.
/// @output CSS `word-wrap` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/overflow-wrap
@mixin word-wrap($token: "word-wrap") {
  @include css-property-with-token("word-wrap", $token);
}


/// Applies the `$token` to the CSS `writing-mode` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Writing Modes
/// @access public
/// @param {string} $token ["writing-mode"] - Name of token to apply to the property.
/// @output CSS `writing-mode` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/writing-mode
@mixin writing-mode($token: "writing-mode") {
  @include css-property-with-token("writing-mode", $token);
}


/// Applies the `$token` to the CSS `z-index` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Positioning
/// @access public
/// @param {string} $token ["z-index"] - Name of token to apply to the property.
/// @output CSS `z-index` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/z-index
@mixin z-index($token: "z-index") {
  @include css-property-with-token("z-index", $token);
}


/// Applies the `$token` to the CSS `zoom` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group Microsoft Extensions
/// @access public
/// @param {string} $token ["zoom"] - Name of token to apply to the property.
/// @output CSS `zoom` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/zoom
@mixin zoom($token: "zoom") {
  @include css-property-with-token("zoom", $token);
}

