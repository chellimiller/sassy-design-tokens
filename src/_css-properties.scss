@use './tokens.scss' as *;

/// Applies the `$token` to the CSS `accent-color` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Basic User Interface
/// @access public
/// @param {string} $token - Name of token to apply to the property.
/// @output CSS `accent-color` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/accent-color
@mixin accent-color($token) {
  @include css-property-with-token('accent-color', $token);
}


/// Applies the `$token` to the CSS `align-content` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Box Alignment
/// @access public
/// @param {string} $token - Name of token to apply to the property.
/// @output CSS `align-content` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/align-content
@mixin align-content($token) {
  @include css-property-with-token('align-content', $token);
}


/// Applies the `$token` to the CSS `align-items` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Box Alignment
/// @access public
/// @param {string} $token - Name of token to apply to the property.
/// @output CSS `align-items` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/align-items
@mixin align-items($token) {
  @include css-property-with-token('align-items', $token);
}


/// Applies the `$token` to the CSS `align-self` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Box Alignment
/// @access public
/// @param {string} $token - Name of token to apply to the property.
/// @output CSS `align-self` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/align-self
@mixin align-self($token) {
  @include css-property-with-token('align-self', $token);
}


/// Applies the `$token` to the CSS `align-tracks` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Grid Layout
/// @access public
/// @param {string} $token - Name of token to apply to the property.
/// @output CSS `align-tracks` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/align-tracks
@mixin align-tracks($token) {
  @include css-property-with-token('align-tracks', $token);
}


/// Applies the `$token` to the CSS `all` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Miscellaneous
/// @access public
/// @param {string} $token - Name of token to apply to the property.
/// @output CSS `all` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/all
@mixin all($token) {
  @include css-property-with-token('all', $token);
}


/// Applies the `$token` to the CSS `animation` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Animations
/// @access public
/// @param {string} $token - Name of token to apply to the property.
/// @output CSS `animation` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/animation
@mixin animation($token) {
  @include css-property-with-token('animation', $token);
}


/// Applies the `$token` to the CSS `animation-delay` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Animations
/// @access public
/// @param {string} $token - Name of token to apply to the property.
/// @output CSS `animation-delay` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/animation-delay
@mixin animation-delay($token) {
  @include css-property-with-token('animation-delay', $token);
}


/// Applies the `$token` to the CSS `animation-direction` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Animations
/// @access public
/// @param {string} $token - Name of token to apply to the property.
/// @output CSS `animation-direction` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/animation-direction
@mixin animation-direction($token) {
  @include css-property-with-token('animation-direction', $token);
}


/// Applies the `$token` to the CSS `animation-duration` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Animations
/// @access public
/// @param {string} $token - Name of token to apply to the property.
/// @output CSS `animation-duration` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/animation-duration
@mixin animation-duration($token) {
  @include css-property-with-token('animation-duration', $token);
}


/// Applies the `$token` to the CSS `animation-fill-mode` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Animations
/// @access public
/// @param {string} $token - Name of token to apply to the property.
/// @output CSS `animation-fill-mode` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/animation-fill-mode
@mixin animation-fill-mode($token) {
  @include css-property-with-token('animation-fill-mode', $token);
}


/// Applies the `$token` to the CSS `animation-iteration-count` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Animations
/// @access public
/// @param {string} $token - Name of token to apply to the property.
/// @output CSS `animation-iteration-count` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/animation-iteration-count
@mixin animation-iteration-count($token) {
  @include css-property-with-token('animation-iteration-count', $token);
}


/// Applies the `$token` to the CSS `animation-name` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Animations
/// @access public
/// @param {string} $token - Name of token to apply to the property.
/// @output CSS `animation-name` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/animation-name
@mixin animation-name($token) {
  @include css-property-with-token('animation-name', $token);
}


/// Applies the `$token` to the CSS `animation-play-state` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Animations
/// @access public
/// @param {string} $token - Name of token to apply to the property.
/// @output CSS `animation-play-state` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/animation-play-state
@mixin animation-play-state($token) {
  @include css-property-with-token('animation-play-state', $token);
}


/// Applies the `$token` to the CSS `animation-timing-function` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Animations
/// @access public
/// @param {string} $token - Name of token to apply to the property.
/// @output CSS `animation-timing-function` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/animation-timing-function
@mixin animation-timing-function($token) {
  @include css-property-with-token('animation-timing-function', $token);
}


/// Applies the `$token` to the CSS `appearance` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Basic User Interface
/// @access public
/// @param {string} $token - Name of token to apply to the property.
/// @output CSS `appearance` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/appearance
@mixin appearance($token) {
  @include css-property-with-token('appearance', $token);
}


/// Applies the `$token` to the CSS `aspect-ratio` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Basic User Interface
/// @access public
/// @param {string} $token - Name of token to apply to the property.
/// @output CSS `aspect-ratio` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/aspect-ratio
@mixin aspect-ratio($token) {
  @include css-property-with-token('aspect-ratio', $token);
}


/// Applies the `$token` to the CSS `azimuth` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Speech
/// @access public
/// @param {string} $token - Name of token to apply to the property.
/// @output CSS `azimuth` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/azimuth
@mixin azimuth($token) {
  @include css-property-with-token('azimuth', $token);
}


/// Applies the `$token` to the CSS `backdrop-filter` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group Filter Effects
/// @access public
/// @param {string} $token - Name of token to apply to the property.
/// @output CSS `backdrop-filter` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/backdrop-filter
@mixin backdrop-filter($token) {
  @include css-property-with-token('backdrop-filter', $token);
}


/// Applies the `$token` to the CSS `backface-visibility` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Transforms
/// @access public
/// @param {string} $token - Name of token to apply to the property.
/// @output CSS `backface-visibility` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/backface-visibility
@mixin backface-visibility($token) {
  @include css-property-with-token('backface-visibility', $token);
}


/// Applies the `$token` to the CSS `background` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Backgrounds and Borders
/// @access public
/// @param {string} $token - Name of token to apply to the property.
/// @output CSS `background` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/background
@mixin background($token) {
  @include css-property-with-token('background', $token);
}


/// Applies the `$token` to the CSS `background-attachment` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Backgrounds and Borders
/// @access public
/// @param {string} $token - Name of token to apply to the property.
/// @output CSS `background-attachment` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/background-attachment
@mixin background-attachment($token) {
  @include css-property-with-token('background-attachment', $token);
}


/// Applies the `$token` to the CSS `background-blend-mode` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group Compositing and Blending
/// @access public
/// @param {string} $token - Name of token to apply to the property.
/// @output CSS `background-blend-mode` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/background-blend-mode
@mixin background-blend-mode($token) {
  @include css-property-with-token('background-blend-mode', $token);
}


/// Applies the `$token` to the CSS `background-clip` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Backgrounds and Borders
/// @access public
/// @param {string} $token - Name of token to apply to the property.
/// @output CSS `background-clip` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/background-clip
@mixin background-clip($token) {
  @include css-property-with-token('background-clip', $token);
}


/// Applies the `$token` to the CSS `background-color` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Backgrounds and Borders
/// @access public
/// @param {string} $token - Name of token to apply to the property.
/// @output CSS `background-color` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/background-color
@mixin background-color($token) {
  @include css-property-with-token('background-color', $token);
}


/// Applies the `$token` to the CSS `background-image` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Backgrounds and Borders
/// @access public
/// @param {string} $token - Name of token to apply to the property.
/// @output CSS `background-image` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/background-image
@mixin background-image($token) {
  @include css-property-with-token('background-image', $token);
}


/// Applies the `$token` to the CSS `background-origin` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Backgrounds and Borders
/// @access public
/// @param {string} $token - Name of token to apply to the property.
/// @output CSS `background-origin` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/background-origin
@mixin background-origin($token) {
  @include css-property-with-token('background-origin', $token);
}


/// Applies the `$token` to the CSS `background-position` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Backgrounds and Borders
/// @access public
/// @param {string} $token - Name of token to apply to the property.
/// @output CSS `background-position` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/background-position
@mixin background-position($token) {
  @include css-property-with-token('background-position', $token);
}


/// Applies the `$token` to the CSS `background-position-x` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Backgrounds and Borders
/// @access public
/// @param {string} $token - Name of token to apply to the property.
/// @output CSS `background-position-x` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/background-position-x
@mixin background-position-x($token) {
  @include css-property-with-token('background-position-x', $token);
}


/// Applies the `$token` to the CSS `background-position-y` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Backgrounds and Borders
/// @access public
/// @param {string} $token - Name of token to apply to the property.
/// @output CSS `background-position-y` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/background-position-y
@mixin background-position-y($token) {
  @include css-property-with-token('background-position-y', $token);
}


/// Applies the `$token` to the CSS `background-repeat` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Backgrounds and Borders
/// @access public
/// @param {string} $token - Name of token to apply to the property.
/// @output CSS `background-repeat` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/background-repeat
@mixin background-repeat($token) {
  @include css-property-with-token('background-repeat', $token);
}


/// Applies the `$token` to the CSS `background-size` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Backgrounds and Borders
/// @access public
/// @param {string} $token - Name of token to apply to the property.
/// @output CSS `background-size` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/background-size
@mixin background-size($token) {
  @include css-property-with-token('background-size', $token);
}


/// Applies the `$token` to the CSS `block-overflow` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Overflow
/// @access public
/// @param {string} $token - Name of token to apply to the property.
/// @output CSS `block-overflow` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/block-overflow
@mixin block-overflow($token) {
  @include css-property-with-token('block-overflow', $token);
}


/// Applies the `$token` to the CSS `block-size` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Logical Properties
/// @access public
/// @param {string} $token - Name of token to apply to the property.
/// @output CSS `block-size` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/block-size
@mixin block-size($token) {
  @include css-property-with-token('block-size', $token);
}


/// Applies the `$token` to the CSS `border` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Backgrounds and Borders
/// @access public
/// @param {string} $token - Name of token to apply to the property.
/// @output CSS `border` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/border
@mixin border($token) {
  @include css-property-with-token('border', $token);
}


/// Applies the `$token` to the CSS `border-block` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Logical Properties
/// @access public
/// @param {string} $token - Name of token to apply to the property.
/// @output CSS `border-block` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/border-block
@mixin border-block($token) {
  @include css-property-with-token('border-block', $token);
}


/// Applies the `$token` to the CSS `border-block-color` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Logical Properties
/// @access public
/// @param {string} $token - Name of token to apply to the property.
/// @output CSS `border-block-color` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/border-block-color
@mixin border-block-color($token) {
  @include css-property-with-token('border-block-color', $token);
}


/// Applies the `$token` to the CSS `border-block-style` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Logical Properties
/// @access public
/// @param {string} $token - Name of token to apply to the property.
/// @output CSS `border-block-style` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/border-block-style
@mixin border-block-style($token) {
  @include css-property-with-token('border-block-style', $token);
}


/// Applies the `$token` to the CSS `border-block-width` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Logical Properties
/// @access public
/// @param {string} $token - Name of token to apply to the property.
/// @output CSS `border-block-width` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/border-block-width
@mixin border-block-width($token) {
  @include css-property-with-token('border-block-width', $token);
}


/// Applies the `$token` to the CSS `border-block-end` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Logical Properties
/// @access public
/// @param {string} $token - Name of token to apply to the property.
/// @output CSS `border-block-end` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/border-block-end
@mixin border-block-end($token) {
  @include css-property-with-token('border-block-end', $token);
}


/// Applies the `$token` to the CSS `border-block-end-color` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Logical Properties
/// @access public
/// @param {string} $token - Name of token to apply to the property.
/// @output CSS `border-block-end-color` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/border-block-end-color
@mixin border-block-end-color($token) {
  @include css-property-with-token('border-block-end-color', $token);
}


/// Applies the `$token` to the CSS `border-block-end-style` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Logical Properties
/// @access public
/// @param {string} $token - Name of token to apply to the property.
/// @output CSS `border-block-end-style` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/border-block-end-style
@mixin border-block-end-style($token) {
  @include css-property-with-token('border-block-end-style', $token);
}


/// Applies the `$token` to the CSS `border-block-end-width` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Logical Properties
/// @access public
/// @param {string} $token - Name of token to apply to the property.
/// @output CSS `border-block-end-width` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/border-block-end-width
@mixin border-block-end-width($token) {
  @include css-property-with-token('border-block-end-width', $token);
}


/// Applies the `$token` to the CSS `border-block-start` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Logical Properties
/// @access public
/// @param {string} $token - Name of token to apply to the property.
/// @output CSS `border-block-start` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/border-block-start
@mixin border-block-start($token) {
  @include css-property-with-token('border-block-start', $token);
}


/// Applies the `$token` to the CSS `border-block-start-color` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Logical Properties
/// @access public
/// @param {string} $token - Name of token to apply to the property.
/// @output CSS `border-block-start-color` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/border-block-start-color
@mixin border-block-start-color($token) {
  @include css-property-with-token('border-block-start-color', $token);
}


/// Applies the `$token` to the CSS `border-block-start-style` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Logical Properties
/// @access public
/// @param {string} $token - Name of token to apply to the property.
/// @output CSS `border-block-start-style` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/border-block-start-style
@mixin border-block-start-style($token) {
  @include css-property-with-token('border-block-start-style', $token);
}


/// Applies the `$token` to the CSS `border-block-start-width` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Logical Properties
/// @access public
/// @param {string} $token - Name of token to apply to the property.
/// @output CSS `border-block-start-width` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/border-block-start-width
@mixin border-block-start-width($token) {
  @include css-property-with-token('border-block-start-width', $token);
}


/// Applies the `$token` to the CSS `border-bottom` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Backgrounds and Borders
/// @access public
/// @param {string} $token - Name of token to apply to the property.
/// @output CSS `border-bottom` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/border-bottom
@mixin border-bottom($token) {
  @include css-property-with-token('border-bottom', $token);
}


/// Applies the `$token` to the CSS `border-bottom-color` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Backgrounds and Borders
/// @access public
/// @param {string} $token - Name of token to apply to the property.
/// @output CSS `border-bottom-color` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/border-bottom-color
@mixin border-bottom-color($token) {
  @include css-property-with-token('border-bottom-color', $token);
}


/// Applies the `$token` to the CSS `border-bottom-left-radius` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Backgrounds and Borders
/// @access public
/// @param {string} $token - Name of token to apply to the property.
/// @output CSS `border-bottom-left-radius` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/border-bottom-left-radius
@mixin border-bottom-left-radius($token) {
  @include css-property-with-token('border-bottom-left-radius', $token);
}


/// Applies the `$token` to the CSS `border-bottom-right-radius` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Backgrounds and Borders
/// @access public
/// @param {string} $token - Name of token to apply to the property.
/// @output CSS `border-bottom-right-radius` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/border-bottom-right-radius
@mixin border-bottom-right-radius($token) {
  @include css-property-with-token('border-bottom-right-radius', $token);
}


/// Applies the `$token` to the CSS `border-bottom-style` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Backgrounds and Borders
/// @access public
/// @param {string} $token - Name of token to apply to the property.
/// @output CSS `border-bottom-style` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/border-bottom-style
@mixin border-bottom-style($token) {
  @include css-property-with-token('border-bottom-style', $token);
}


/// Applies the `$token` to the CSS `border-bottom-width` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Backgrounds and Borders
/// @access public
/// @param {string} $token - Name of token to apply to the property.
/// @output CSS `border-bottom-width` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/border-bottom-width
@mixin border-bottom-width($token) {
  @include css-property-with-token('border-bottom-width', $token);
}


/// Applies the `$token` to the CSS `border-collapse` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Table
/// @access public
/// @param {string} $token - Name of token to apply to the property.
/// @output CSS `border-collapse` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/border-collapse
@mixin border-collapse($token) {
  @include css-property-with-token('border-collapse', $token);
}


/// Applies the `$token` to the CSS `border-color` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Backgrounds and Borders
/// @access public
/// @param {string} $token - Name of token to apply to the property.
/// @output CSS `border-color` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/border-color
@mixin border-color($token) {
  @include css-property-with-token('border-color', $token);
}


/// Applies the `$token` to the CSS `border-end-end-radius` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Logical Properties
/// @access public
/// @param {string} $token - Name of token to apply to the property.
/// @output CSS `border-end-end-radius` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/border-end-end-radius
@mixin border-end-end-radius($token) {
  @include css-property-with-token('border-end-end-radius', $token);
}


/// Applies the `$token` to the CSS `border-end-start-radius` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Logical Properties
/// @access public
/// @param {string} $token - Name of token to apply to the property.
/// @output CSS `border-end-start-radius` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/border-end-start-radius
@mixin border-end-start-radius($token) {
  @include css-property-with-token('border-end-start-radius', $token);
}


/// Applies the `$token` to the CSS `border-image` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Backgrounds and Borders
/// @access public
/// @param {string} $token - Name of token to apply to the property.
/// @output CSS `border-image` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/border-image
@mixin border-image($token) {
  @include css-property-with-token('border-image', $token);
}


/// Applies the `$token` to the CSS `border-image-outset` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Backgrounds and Borders
/// @access public
/// @param {string} $token - Name of token to apply to the property.
/// @output CSS `border-image-outset` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/border-image-outset
@mixin border-image-outset($token) {
  @include css-property-with-token('border-image-outset', $token);
}


/// Applies the `$token` to the CSS `border-image-repeat` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Backgrounds and Borders
/// @access public
/// @param {string} $token - Name of token to apply to the property.
/// @output CSS `border-image-repeat` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/border-image-repeat
@mixin border-image-repeat($token) {
  @include css-property-with-token('border-image-repeat', $token);
}


/// Applies the `$token` to the CSS `border-image-slice` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Backgrounds and Borders
/// @access public
/// @param {string} $token - Name of token to apply to the property.
/// @output CSS `border-image-slice` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/border-image-slice
@mixin border-image-slice($token) {
  @include css-property-with-token('border-image-slice', $token);
}


/// Applies the `$token` to the CSS `border-image-source` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Backgrounds and Borders
/// @access public
/// @param {string} $token - Name of token to apply to the property.
/// @output CSS `border-image-source` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/border-image-source
@mixin border-image-source($token) {
  @include css-property-with-token('border-image-source', $token);
}


/// Applies the `$token` to the CSS `border-image-width` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Backgrounds and Borders
/// @access public
/// @param {string} $token - Name of token to apply to the property.
/// @output CSS `border-image-width` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/border-image-width
@mixin border-image-width($token) {
  @include css-property-with-token('border-image-width', $token);
}


/// Applies the `$token` to the CSS `border-inline` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Logical Properties
/// @access public
/// @param {string} $token - Name of token to apply to the property.
/// @output CSS `border-inline` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/border-inline
@mixin border-inline($token) {
  @include css-property-with-token('border-inline', $token);
}


/// Applies the `$token` to the CSS `border-inline-end` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Logical Properties
/// @access public
/// @param {string} $token - Name of token to apply to the property.
/// @output CSS `border-inline-end` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/border-inline-end
@mixin border-inline-end($token) {
  @include css-property-with-token('border-inline-end', $token);
}


/// Applies the `$token` to the CSS `border-inline-color` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Logical Properties
/// @access public
/// @param {string} $token - Name of token to apply to the property.
/// @output CSS `border-inline-color` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/border-inline-color
@mixin border-inline-color($token) {
  @include css-property-with-token('border-inline-color', $token);
}


/// Applies the `$token` to the CSS `border-inline-style` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Logical Properties
/// @access public
/// @param {string} $token - Name of token to apply to the property.
/// @output CSS `border-inline-style` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/border-inline-style
@mixin border-inline-style($token) {
  @include css-property-with-token('border-inline-style', $token);
}


/// Applies the `$token` to the CSS `border-inline-width` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Logical Properties
/// @access public
/// @param {string} $token - Name of token to apply to the property.
/// @output CSS `border-inline-width` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/border-inline-width
@mixin border-inline-width($token) {
  @include css-property-with-token('border-inline-width', $token);
}


/// Applies the `$token` to the CSS `border-inline-end-color` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Logical Properties
/// @access public
/// @param {string} $token - Name of token to apply to the property.
/// @output CSS `border-inline-end-color` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/border-inline-end-color
@mixin border-inline-end-color($token) {
  @include css-property-with-token('border-inline-end-color', $token);
}


/// Applies the `$token` to the CSS `border-inline-end-style` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Logical Properties
/// @access public
/// @param {string} $token - Name of token to apply to the property.
/// @output CSS `border-inline-end-style` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/border-inline-end-style
@mixin border-inline-end-style($token) {
  @include css-property-with-token('border-inline-end-style', $token);
}


/// Applies the `$token` to the CSS `border-inline-end-width` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Logical Properties
/// @access public
/// @param {string} $token - Name of token to apply to the property.
/// @output CSS `border-inline-end-width` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/border-inline-end-width
@mixin border-inline-end-width($token) {
  @include css-property-with-token('border-inline-end-width', $token);
}


/// Applies the `$token` to the CSS `border-inline-start` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Logical Properties
/// @access public
/// @param {string} $token - Name of token to apply to the property.
/// @output CSS `border-inline-start` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/border-inline-start
@mixin border-inline-start($token) {
  @include css-property-with-token('border-inline-start', $token);
}


/// Applies the `$token` to the CSS `border-inline-start-color` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Logical Properties
/// @access public
/// @param {string} $token - Name of token to apply to the property.
/// @output CSS `border-inline-start-color` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/border-inline-start-color
@mixin border-inline-start-color($token) {
  @include css-property-with-token('border-inline-start-color', $token);
}


/// Applies the `$token` to the CSS `border-inline-start-style` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Logical Properties
/// @access public
/// @param {string} $token - Name of token to apply to the property.
/// @output CSS `border-inline-start-style` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/border-inline-start-style
@mixin border-inline-start-style($token) {
  @include css-property-with-token('border-inline-start-style', $token);
}


/// Applies the `$token` to the CSS `border-inline-start-width` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Logical Properties
/// @access public
/// @param {string} $token - Name of token to apply to the property.
/// @output CSS `border-inline-start-width` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/border-inline-start-width
@mixin border-inline-start-width($token) {
  @include css-property-with-token('border-inline-start-width', $token);
}


/// Applies the `$token` to the CSS `border-left` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Backgrounds and Borders
/// @access public
/// @param {string} $token - Name of token to apply to the property.
/// @output CSS `border-left` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/border-left
@mixin border-left($token) {
  @include css-property-with-token('border-left', $token);
}


/// Applies the `$token` to the CSS `border-left-color` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Backgrounds and Borders
/// @access public
/// @param {string} $token - Name of token to apply to the property.
/// @output CSS `border-left-color` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/border-left-color
@mixin border-left-color($token) {
  @include css-property-with-token('border-left-color', $token);
}


/// Applies the `$token` to the CSS `border-left-style` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Backgrounds and Borders
/// @access public
/// @param {string} $token - Name of token to apply to the property.
/// @output CSS `border-left-style` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/border-left-style
@mixin border-left-style($token) {
  @include css-property-with-token('border-left-style', $token);
}


/// Applies the `$token` to the CSS `border-left-width` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Backgrounds and Borders
/// @access public
/// @param {string} $token - Name of token to apply to the property.
/// @output CSS `border-left-width` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/border-left-width
@mixin border-left-width($token) {
  @include css-property-with-token('border-left-width', $token);
}


/// Applies the `$token` to the CSS `border-radius` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Backgrounds and Borders
/// @access public
/// @param {string} $token - Name of token to apply to the property.
/// @output CSS `border-radius` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/border-radius
@mixin border-radius($token) {
  @include css-property-with-token('border-radius', $token);
}


/// Applies the `$token` to the CSS `border-right` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Backgrounds and Borders
/// @access public
/// @param {string} $token - Name of token to apply to the property.
/// @output CSS `border-right` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/border-right
@mixin border-right($token) {
  @include css-property-with-token('border-right', $token);
}


/// Applies the `$token` to the CSS `border-right-color` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Backgrounds and Borders
/// @access public
/// @param {string} $token - Name of token to apply to the property.
/// @output CSS `border-right-color` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/border-right-color
@mixin border-right-color($token) {
  @include css-property-with-token('border-right-color', $token);
}


/// Applies the `$token` to the CSS `border-right-style` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Backgrounds and Borders
/// @access public
/// @param {string} $token - Name of token to apply to the property.
/// @output CSS `border-right-style` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/border-right-style
@mixin border-right-style($token) {
  @include css-property-with-token('border-right-style', $token);
}


/// Applies the `$token` to the CSS `border-right-width` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Backgrounds and Borders
/// @access public
/// @param {string} $token - Name of token to apply to the property.
/// @output CSS `border-right-width` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/border-right-width
@mixin border-right-width($token) {
  @include css-property-with-token('border-right-width', $token);
}


/// Applies the `$token` to the CSS `border-spacing` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Table
/// @access public
/// @param {string} $token - Name of token to apply to the property.
/// @output CSS `border-spacing` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/border-spacing
@mixin border-spacing($token) {
  @include css-property-with-token('border-spacing', $token);
}


/// Applies the `$token` to the CSS `border-start-end-radius` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Logical Properties
/// @access public
/// @param {string} $token - Name of token to apply to the property.
/// @output CSS `border-start-end-radius` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/border-start-end-radius
@mixin border-start-end-radius($token) {
  @include css-property-with-token('border-start-end-radius', $token);
}


/// Applies the `$token` to the CSS `border-start-start-radius` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Logical Properties
/// @access public
/// @param {string} $token - Name of token to apply to the property.
/// @output CSS `border-start-start-radius` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/border-start-start-radius
@mixin border-start-start-radius($token) {
  @include css-property-with-token('border-start-start-radius', $token);
}


/// Applies the `$token` to the CSS `border-style` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Backgrounds and Borders
/// @access public
/// @param {string} $token - Name of token to apply to the property.
/// @output CSS `border-style` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/border-style
@mixin border-style($token) {
  @include css-property-with-token('border-style', $token);
}


/// Applies the `$token` to the CSS `border-top` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Backgrounds and Borders
/// @access public
/// @param {string} $token - Name of token to apply to the property.
/// @output CSS `border-top` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/border-top
@mixin border-top($token) {
  @include css-property-with-token('border-top', $token);
}


/// Applies the `$token` to the CSS `border-top-color` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Backgrounds and Borders
/// @access public
/// @param {string} $token - Name of token to apply to the property.
/// @output CSS `border-top-color` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/border-top-color
@mixin border-top-color($token) {
  @include css-property-with-token('border-top-color', $token);
}


/// Applies the `$token` to the CSS `border-top-left-radius` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Backgrounds and Borders
/// @access public
/// @param {string} $token - Name of token to apply to the property.
/// @output CSS `border-top-left-radius` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/border-top-left-radius
@mixin border-top-left-radius($token) {
  @include css-property-with-token('border-top-left-radius', $token);
}


/// Applies the `$token` to the CSS `border-top-right-radius` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Backgrounds and Borders
/// @access public
/// @param {string} $token - Name of token to apply to the property.
/// @output CSS `border-top-right-radius` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/border-top-right-radius
@mixin border-top-right-radius($token) {
  @include css-property-with-token('border-top-right-radius', $token);
}


/// Applies the `$token` to the CSS `border-top-style` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Backgrounds and Borders
/// @access public
/// @param {string} $token - Name of token to apply to the property.
/// @output CSS `border-top-style` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/border-top-style
@mixin border-top-style($token) {
  @include css-property-with-token('border-top-style', $token);
}


/// Applies the `$token` to the CSS `border-top-width` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Backgrounds and Borders
/// @access public
/// @param {string} $token - Name of token to apply to the property.
/// @output CSS `border-top-width` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/border-top-width
@mixin border-top-width($token) {
  @include css-property-with-token('border-top-width', $token);
}


/// Applies the `$token` to the CSS `border-width` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Backgrounds and Borders
/// @access public
/// @param {string} $token - Name of token to apply to the property.
/// @output CSS `border-width` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/border-width
@mixin border-width($token) {
  @include css-property-with-token('border-width', $token);
}


/// Applies the `$token` to the CSS `bottom` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Positioning
/// @access public
/// @param {string} $token - Name of token to apply to the property.
/// @output CSS `bottom` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/bottom
@mixin bottom($token) {
  @include css-property-with-token('bottom', $token);
}


/// Applies the `$token` to the CSS `box-align` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group Mozilla Extensions
/// @access public
/// @param {string} $token - Name of token to apply to the property.
/// @output CSS `box-align` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/box-align
@mixin box-align($token) {
  @include css-property-with-token('box-align', $token);
}


/// Applies the `$token` to the CSS `box-decoration-break` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Fragmentation
/// @access public
/// @param {string} $token - Name of token to apply to the property.
/// @output CSS `box-decoration-break` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/box-decoration-break
@mixin box-decoration-break($token) {
  @include css-property-with-token('box-decoration-break', $token);
}


/// Applies the `$token` to the CSS `box-direction` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group Mozilla Extensions
/// @access public
/// @param {string} $token - Name of token to apply to the property.
/// @output CSS `box-direction` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/box-direction
@mixin box-direction($token) {
  @include css-property-with-token('box-direction', $token);
}


/// Applies the `$token` to the CSS `box-flex` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group Mozilla Extensions
/// @access public
/// @param {string} $token - Name of token to apply to the property.
/// @output CSS `box-flex` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/box-flex
@mixin box-flex($token) {
  @include css-property-with-token('box-flex', $token);
}


/// Applies the `$token` to the CSS `box-flex-group` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group Mozilla Extensions
/// @access public
/// @param {string} $token - Name of token to apply to the property.
/// @output CSS `box-flex-group` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/box-flex-group
@mixin box-flex-group($token) {
  @include css-property-with-token('box-flex-group', $token);
}


/// Applies the `$token` to the CSS `box-lines` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group Mozilla Extensions
/// @access public
/// @param {string} $token - Name of token to apply to the property.
/// @output CSS `box-lines` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/box-lines
@mixin box-lines($token) {
  @include css-property-with-token('box-lines', $token);
}


/// Applies the `$token` to the CSS `box-ordinal-group` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group Mozilla Extensions
/// @access public
/// @param {string} $token - Name of token to apply to the property.
/// @output CSS `box-ordinal-group` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/box-ordinal-group
@mixin box-ordinal-group($token) {
  @include css-property-with-token('box-ordinal-group', $token);
}


/// Applies the `$token` to the CSS `box-orient` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group Mozilla Extensions
/// @access public
/// @param {string} $token - Name of token to apply to the property.
/// @output CSS `box-orient` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/box-orient
@mixin box-orient($token) {
  @include css-property-with-token('box-orient', $token);
}


/// Applies the `$token` to the CSS `box-pack` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group Mozilla Extensions
/// @access public
/// @param {string} $token - Name of token to apply to the property.
/// @output CSS `box-pack` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/box-pack
@mixin box-pack($token) {
  @include css-property-with-token('box-pack', $token);
}


/// Applies the `$token` to the CSS `box-shadow` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Backgrounds and Borders
/// @access public
/// @param {string} $token - Name of token to apply to the property.
/// @output CSS `box-shadow` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/box-shadow
@mixin box-shadow($token) {
  @include css-property-with-token('box-shadow', $token);
}


/// Applies the `$token` to the CSS `box-sizing` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Box Model
/// @access public
/// @param {string} $token - Name of token to apply to the property.
/// @output CSS `box-sizing` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/box-sizing
@mixin box-sizing($token) {
  @include css-property-with-token('box-sizing', $token);
}


/// Applies the `$token` to the CSS `break-after` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Fragmentation
/// @access public
/// @param {string} $token - Name of token to apply to the property.
/// @output CSS `break-after` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/break-after
@mixin break-after($token) {
  @include css-property-with-token('break-after', $token);
}


/// Applies the `$token` to the CSS `break-before` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Fragmentation
/// @access public
/// @param {string} $token - Name of token to apply to the property.
/// @output CSS `break-before` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/break-before
@mixin break-before($token) {
  @include css-property-with-token('break-before', $token);
}


/// Applies the `$token` to the CSS `break-inside` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Fragmentation
/// @access public
/// @param {string} $token - Name of token to apply to the property.
/// @output CSS `break-inside` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/break-inside
@mixin break-inside($token) {
  @include css-property-with-token('break-inside', $token);
}


/// Applies the `$token` to the CSS `caption-side` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Table
/// @access public
/// @param {string} $token - Name of token to apply to the property.
/// @output CSS `caption-side` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/caption-side
@mixin caption-side($token) {
  @include css-property-with-token('caption-side', $token);
}


/// Applies the `$token` to the CSS `caret-color` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Basic User Interface
/// @access public
/// @param {string} $token - Name of token to apply to the property.
/// @output CSS `caret-color` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/caret-color
@mixin caret-color($token) {
  @include css-property-with-token('caret-color', $token);
}


/// Applies the `$token` to the CSS `clear` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Positioning
/// @access public
/// @param {string} $token - Name of token to apply to the property.
/// @output CSS `clear` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/clear
@mixin clear($token) {
  @include css-property-with-token('clear', $token);
}


/// Applies the `$token` to the CSS `clip` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Masking
/// @access public
/// @param {string} $token - Name of token to apply to the property.
/// @output CSS `clip` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/clip
@mixin clip($token) {
  @include css-property-with-token('clip', $token);
}


/// Applies the `$token` to the CSS `clip-path` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Masking
/// @access public
/// @param {string} $token - Name of token to apply to the property.
/// @output CSS `clip-path` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/clip-path
@mixin clip-path($token) {
  @include css-property-with-token('clip-path', $token);
}


/// Applies the `$token` to the CSS `color` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Color
/// @access public
/// @param {string} $token - Name of token to apply to the property.
/// @output CSS `color` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/color
@mixin color($token) {
  @include css-property-with-token('color', $token);
}


/// Applies the `$token` to the CSS `color-adjust` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Color
/// @access public
/// @param {string} $token - Name of token to apply to the property.
/// @output CSS `color-adjust` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/color-adjust
@mixin color-adjust($token) {
  @include css-property-with-token('color-adjust', $token);
}


/// Applies the `$token` to the CSS `color-scheme` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Color
/// @access public
/// @param {string} $token - Name of token to apply to the property.
/// @output CSS `color-scheme` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/color-scheme
@mixin color-scheme($token) {
  @include css-property-with-token('color-scheme', $token);
}


/// Applies the `$token` to the CSS `column-count` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Columns
/// @access public
/// @param {string} $token - Name of token to apply to the property.
/// @output CSS `column-count` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/column-count
@mixin column-count($token) {
  @include css-property-with-token('column-count', $token);
}


/// Applies the `$token` to the CSS `column-fill` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Columns
/// @access public
/// @param {string} $token - Name of token to apply to the property.
/// @output CSS `column-fill` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/column-fill
@mixin column-fill($token) {
  @include css-property-with-token('column-fill', $token);
}


/// Applies the `$token` to the CSS `column-gap` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Box Alignment
/// @access public
/// @param {string} $token - Name of token to apply to the property.
/// @output CSS `column-gap` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/column-gap
@mixin column-gap($token) {
  @include css-property-with-token('column-gap', $token);
}


/// Applies the `$token` to the CSS `column-rule` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Columns
/// @access public
/// @param {string} $token - Name of token to apply to the property.
/// @output CSS `column-rule` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/column-rule
@mixin column-rule($token) {
  @include css-property-with-token('column-rule', $token);
}


/// Applies the `$token` to the CSS `column-rule-color` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Columns
/// @access public
/// @param {string} $token - Name of token to apply to the property.
/// @output CSS `column-rule-color` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/column-rule-color
@mixin column-rule-color($token) {
  @include css-property-with-token('column-rule-color', $token);
}


/// Applies the `$token` to the CSS `column-rule-style` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Columns
/// @access public
/// @param {string} $token - Name of token to apply to the property.
/// @output CSS `column-rule-style` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/column-rule-style
@mixin column-rule-style($token) {
  @include css-property-with-token('column-rule-style', $token);
}


/// Applies the `$token` to the CSS `column-rule-width` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Columns
/// @access public
/// @param {string} $token - Name of token to apply to the property.
/// @output CSS `column-rule-width` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/column-rule-width
@mixin column-rule-width($token) {
  @include css-property-with-token('column-rule-width', $token);
}


/// Applies the `$token` to the CSS `column-span` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Columns
/// @access public
/// @param {string} $token - Name of token to apply to the property.
/// @output CSS `column-span` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/column-span
@mixin column-span($token) {
  @include css-property-with-token('column-span', $token);
}


/// Applies the `$token` to the CSS `column-width` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Columns
/// @access public
/// @param {string} $token - Name of token to apply to the property.
/// @output CSS `column-width` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/column-width
@mixin column-width($token) {
  @include css-property-with-token('column-width', $token);
}


/// Applies the `$token` to the CSS `columns` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Columns
/// @access public
/// @param {string} $token - Name of token to apply to the property.
/// @output CSS `columns` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/columns
@mixin columns($token) {
  @include css-property-with-token('columns', $token);
}


/// Applies the `$token` to the CSS `contain` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Containment
/// @access public
/// @param {string} $token - Name of token to apply to the property.
/// @output CSS `contain` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/contain
@mixin contain($token) {
  @include css-property-with-token('contain', $token);
}


/// Applies the `$token` to the CSS `content` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Generated Content
/// @access public
/// @param {string} $token - Name of token to apply to the property.
/// @output CSS `content` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/content
@mixin content($token) {
  @include css-property-with-token('content', $token);
}


/// Applies the `$token` to the CSS `content-visibility` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Containment
/// @access public
/// @param {string} $token - Name of token to apply to the property.
/// @output CSS `content-visibility` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/content-visibility
@mixin content-visibility($token) {
  @include css-property-with-token('content-visibility', $token);
}


/// Applies the `$token` to the CSS `counter-increment` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Counter Styles
/// @access public
/// @param {string} $token - Name of token to apply to the property.
/// @output CSS `counter-increment` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/counter-increment
@mixin counter-increment($token) {
  @include css-property-with-token('counter-increment', $token);
}


/// Applies the `$token` to the CSS `counter-reset` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Counter Styles
/// @access public
/// @param {string} $token - Name of token to apply to the property.
/// @output CSS `counter-reset` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/counter-reset
@mixin counter-reset($token) {
  @include css-property-with-token('counter-reset', $token);
}


/// Applies the `$token` to the CSS `counter-set` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Counter Styles
/// @access public
/// @param {string} $token - Name of token to apply to the property.
/// @output CSS `counter-set` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/counter-set
@mixin counter-set($token) {
  @include css-property-with-token('counter-set', $token);
}


/// Applies the `$token` to the CSS `cursor` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Basic User Interface
/// @access public
/// @param {string} $token - Name of token to apply to the property.
/// @output CSS `cursor` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/cursor
@mixin cursor($token) {
  @include css-property-with-token('cursor', $token);
}


/// Applies the `$token` to the CSS `direction` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Writing Modes
/// @access public
/// @param {string} $token - Name of token to apply to the property.
/// @output CSS `direction` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/direction
@mixin direction($token) {
  @include css-property-with-token('direction', $token);
}


/// Applies the `$token` to the CSS `display` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Display
/// @access public
/// @param {string} $token - Name of token to apply to the property.
/// @output CSS `display` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/display
@mixin display($token) {
  @include css-property-with-token('display', $token);
}


/// Applies the `$token` to the CSS `empty-cells` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Table
/// @access public
/// @param {string} $token - Name of token to apply to the property.
/// @output CSS `empty-cells` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/empty-cells
@mixin empty-cells($token) {
  @include css-property-with-token('empty-cells', $token);
}


/// Applies the `$token` to the CSS `filter` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group Filter Effects
/// @access public
/// @param {string} $token - Name of token to apply to the property.
/// @output CSS `filter` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/filter
@mixin filter($token) {
  @include css-property-with-token('filter', $token);
}


/// Applies the `$token` to the CSS `flex` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Flexible Box Layout
/// @access public
/// @param {string} $token - Name of token to apply to the property.
/// @output CSS `flex` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/flex
@mixin flex($token) {
  @include css-property-with-token('flex', $token);
}


/// Applies the `$token` to the CSS `flex-basis` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Flexible Box Layout
/// @access public
/// @param {string} $token - Name of token to apply to the property.
/// @output CSS `flex-basis` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/flex-basis
@mixin flex-basis($token) {
  @include css-property-with-token('flex-basis', $token);
}


/// Applies the `$token` to the CSS `flex-direction` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Flexible Box Layout
/// @access public
/// @param {string} $token - Name of token to apply to the property.
/// @output CSS `flex-direction` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/flex-direction
@mixin flex-direction($token) {
  @include css-property-with-token('flex-direction', $token);
}


/// Applies the `$token` to the CSS `flex-flow` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Flexible Box Layout
/// @access public
/// @param {string} $token - Name of token to apply to the property.
/// @output CSS `flex-flow` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/flex-flow
@mixin flex-flow($token) {
  @include css-property-with-token('flex-flow', $token);
}


/// Applies the `$token` to the CSS `flex-grow` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Flexible Box Layout
/// @access public
/// @param {string} $token - Name of token to apply to the property.
/// @output CSS `flex-grow` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/flex-grow
@mixin flex-grow($token) {
  @include css-property-with-token('flex-grow', $token);
}


/// Applies the `$token` to the CSS `flex-shrink` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Flexible Box Layout
/// @access public
/// @param {string} $token - Name of token to apply to the property.
/// @output CSS `flex-shrink` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/flex-shrink
@mixin flex-shrink($token) {
  @include css-property-with-token('flex-shrink', $token);
}


/// Applies the `$token` to the CSS `flex-wrap` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Flexible Box Layout
/// @access public
/// @param {string} $token - Name of token to apply to the property.
/// @output CSS `flex-wrap` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/flex-wrap
@mixin flex-wrap($token) {
  @include css-property-with-token('flex-wrap', $token);
}


/// Applies the `$token` to the CSS `float` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Positioning
/// @access public
/// @param {string} $token - Name of token to apply to the property.
/// @output CSS `float` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/float
@mixin float($token) {
  @include css-property-with-token('float', $token);
}


/// Applies the `$token` to the CSS `font` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Fonts
/// @access public
/// @param {string} $token - Name of token to apply to the property.
/// @output CSS `font` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/font
@mixin font($token) {
  @include css-property-with-token('font', $token);
}


/// Applies the `$token` to the CSS `font-family` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Fonts
/// @access public
/// @param {string} $token - Name of token to apply to the property.
/// @output CSS `font-family` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/font-family
@mixin font-family($token) {
  @include css-property-with-token('font-family', $token);
}


/// Applies the `$token` to the CSS `font-feature-settings` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Fonts
/// @access public
/// @param {string} $token - Name of token to apply to the property.
/// @output CSS `font-feature-settings` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/font-feature-settings
@mixin font-feature-settings($token) {
  @include css-property-with-token('font-feature-settings', $token);
}


/// Applies the `$token` to the CSS `font-kerning` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Fonts
/// @access public
/// @param {string} $token - Name of token to apply to the property.
/// @output CSS `font-kerning` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/font-kerning
@mixin font-kerning($token) {
  @include css-property-with-token('font-kerning', $token);
}


/// Applies the `$token` to the CSS `font-language-override` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Fonts
/// @access public
/// @param {string} $token - Name of token to apply to the property.
/// @output CSS `font-language-override` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/font-language-override
@mixin font-language-override($token) {
  @include css-property-with-token('font-language-override', $token);
}


/// Applies the `$token` to the CSS `font-optical-sizing` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Fonts
/// @access public
/// @param {string} $token - Name of token to apply to the property.
/// @output CSS `font-optical-sizing` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/font-optical-sizing
@mixin font-optical-sizing($token) {
  @include css-property-with-token('font-optical-sizing', $token);
}


/// Applies the `$token` to the CSS `font-variation-settings` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Fonts
/// @access public
/// @param {string} $token - Name of token to apply to the property.
/// @output CSS `font-variation-settings` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/font-variation-settings
@mixin font-variation-settings($token) {
  @include css-property-with-token('font-variation-settings', $token);
}


/// Applies the `$token` to the CSS `font-size` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Fonts
/// @access public
/// @param {string} $token - Name of token to apply to the property.
/// @output CSS `font-size` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/font-size
@mixin font-size($token) {
  @include css-property-with-token('font-size', $token);
}


/// Applies the `$token` to the CSS `font-size-adjust` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Fonts
/// @access public
/// @param {string} $token - Name of token to apply to the property.
/// @output CSS `font-size-adjust` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/font-size-adjust
@mixin font-size-adjust($token) {
  @include css-property-with-token('font-size-adjust', $token);
}


/// Applies the `$token` to the CSS `font-smooth` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Fonts
/// @access public
/// @param {string} $token - Name of token to apply to the property.
/// @output CSS `font-smooth` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/font-smooth
@mixin font-smooth($token) {
  @include css-property-with-token('font-smooth', $token);
}


/// Applies the `$token` to the CSS `font-stretch` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Fonts
/// @access public
/// @param {string} $token - Name of token to apply to the property.
/// @output CSS `font-stretch` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/font-stretch
@mixin font-stretch($token) {
  @include css-property-with-token('font-stretch', $token);
}


/// Applies the `$token` to the CSS `font-style` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Fonts
/// @access public
/// @param {string} $token - Name of token to apply to the property.
/// @output CSS `font-style` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/font-style
@mixin font-style($token) {
  @include css-property-with-token('font-style', $token);
}


/// Applies the `$token` to the CSS `font-synthesis` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Fonts
/// @access public
/// @param {string} $token - Name of token to apply to the property.
/// @output CSS `font-synthesis` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/font-synthesis
@mixin font-synthesis($token) {
  @include css-property-with-token('font-synthesis', $token);
}


/// Applies the `$token` to the CSS `font-variant` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Fonts
/// @access public
/// @param {string} $token - Name of token to apply to the property.
/// @output CSS `font-variant` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/font-variant
@mixin font-variant($token) {
  @include css-property-with-token('font-variant', $token);
}


/// Applies the `$token` to the CSS `font-variant-alternates` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Fonts
/// @access public
/// @param {string} $token - Name of token to apply to the property.
/// @output CSS `font-variant-alternates` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/font-variant-alternates
@mixin font-variant-alternates($token) {
  @include css-property-with-token('font-variant-alternates', $token);
}


/// Applies the `$token` to the CSS `font-variant-caps` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Fonts
/// @access public
/// @param {string} $token - Name of token to apply to the property.
/// @output CSS `font-variant-caps` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/font-variant-caps
@mixin font-variant-caps($token) {
  @include css-property-with-token('font-variant-caps', $token);
}


/// Applies the `$token` to the CSS `font-variant-east-asian` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Fonts
/// @access public
/// @param {string} $token - Name of token to apply to the property.
/// @output CSS `font-variant-east-asian` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/font-variant-east-asian
@mixin font-variant-east-asian($token) {
  @include css-property-with-token('font-variant-east-asian', $token);
}


/// Applies the `$token` to the CSS `font-variant-ligatures` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Fonts
/// @access public
/// @param {string} $token - Name of token to apply to the property.
/// @output CSS `font-variant-ligatures` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/font-variant-ligatures
@mixin font-variant-ligatures($token) {
  @include css-property-with-token('font-variant-ligatures', $token);
}


/// Applies the `$token` to the CSS `font-variant-numeric` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Fonts
/// @access public
/// @param {string} $token - Name of token to apply to the property.
/// @output CSS `font-variant-numeric` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/font-variant-numeric
@mixin font-variant-numeric($token) {
  @include css-property-with-token('font-variant-numeric', $token);
}


/// Applies the `$token` to the CSS `font-variant-position` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Fonts
/// @access public
/// @param {string} $token - Name of token to apply to the property.
/// @output CSS `font-variant-position` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/font-variant-position
@mixin font-variant-position($token) {
  @include css-property-with-token('font-variant-position', $token);
}


/// Applies the `$token` to the CSS `font-weight` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Fonts
/// @access public
/// @param {string} $token - Name of token to apply to the property.
/// @output CSS `font-weight` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/font-weight
@mixin font-weight($token) {
  @include css-property-with-token('font-weight', $token);
}


/// Applies the `$token` to the CSS `forced-color-adjust` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Color
/// @access public
/// @param {string} $token - Name of token to apply to the property.
/// @output CSS `forced-color-adjust` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/forced-color-adjust
@mixin forced-color-adjust($token) {
  @include css-property-with-token('forced-color-adjust', $token);
}


/// Applies the `$token` to the CSS `gap` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Box Alignment
/// @access public
/// @param {string} $token - Name of token to apply to the property.
/// @output CSS `gap` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/gap
@mixin gap($token) {
  @include css-property-with-token('gap', $token);
}


/// Applies the `$token` to the CSS `grid` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Grid Layout
/// @access public
/// @param {string} $token - Name of token to apply to the property.
/// @output CSS `grid` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/grid
@mixin grid($token) {
  @include css-property-with-token('grid', $token);
}


/// Applies the `$token` to the CSS `grid-area` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Grid Layout
/// @access public
/// @param {string} $token - Name of token to apply to the property.
/// @output CSS `grid-area` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/grid-area
@mixin grid-area($token) {
  @include css-property-with-token('grid-area', $token);
}


/// Applies the `$token` to the CSS `grid-auto-columns` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Grid Layout
/// @access public
/// @param {string} $token - Name of token to apply to the property.
/// @output CSS `grid-auto-columns` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/grid-auto-columns
@mixin grid-auto-columns($token) {
  @include css-property-with-token('grid-auto-columns', $token);
}


/// Applies the `$token` to the CSS `grid-auto-flow` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Grid Layout
/// @access public
/// @param {string} $token - Name of token to apply to the property.
/// @output CSS `grid-auto-flow` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/grid-auto-flow
@mixin grid-auto-flow($token) {
  @include css-property-with-token('grid-auto-flow', $token);
}


/// Applies the `$token` to the CSS `grid-auto-rows` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Grid Layout
/// @access public
/// @param {string} $token - Name of token to apply to the property.
/// @output CSS `grid-auto-rows` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/grid-auto-rows
@mixin grid-auto-rows($token) {
  @include css-property-with-token('grid-auto-rows', $token);
}


/// Applies the `$token` to the CSS `grid-column` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Grid Layout
/// @access public
/// @param {string} $token - Name of token to apply to the property.
/// @output CSS `grid-column` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/grid-column
@mixin grid-column($token) {
  @include css-property-with-token('grid-column', $token);
}


/// Applies the `$token` to the CSS `grid-column-end` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Grid Layout
/// @access public
/// @param {string} $token - Name of token to apply to the property.
/// @output CSS `grid-column-end` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/grid-column-end
@mixin grid-column-end($token) {
  @include css-property-with-token('grid-column-end', $token);
}


/// Applies the `$token` to the CSS `grid-column-gap` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Grid Layout
/// @access public
/// @param {string} $token - Name of token to apply to the property.
/// @output CSS `grid-column-gap` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/column-gap
@mixin grid-column-gap($token) {
  @include css-property-with-token('grid-column-gap', $token);
}


/// Applies the `$token` to the CSS `grid-column-start` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Grid Layout
/// @access public
/// @param {string} $token - Name of token to apply to the property.
/// @output CSS `grid-column-start` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/grid-column-start
@mixin grid-column-start($token) {
  @include css-property-with-token('grid-column-start', $token);
}


/// Applies the `$token` to the CSS `grid-gap` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Grid Layout
/// @access public
/// @param {string} $token - Name of token to apply to the property.
/// @output CSS `grid-gap` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/gap
@mixin grid-gap($token) {
  @include css-property-with-token('grid-gap', $token);
}


/// Applies the `$token` to the CSS `grid-row` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Grid Layout
/// @access public
/// @param {string} $token - Name of token to apply to the property.
/// @output CSS `grid-row` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/grid-row
@mixin grid-row($token) {
  @include css-property-with-token('grid-row', $token);
}


/// Applies the `$token` to the CSS `grid-row-end` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Grid Layout
/// @access public
/// @param {string} $token - Name of token to apply to the property.
/// @output CSS `grid-row-end` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/grid-row-end
@mixin grid-row-end($token) {
  @include css-property-with-token('grid-row-end', $token);
}


/// Applies the `$token` to the CSS `grid-row-gap` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Grid Layout
/// @access public
/// @param {string} $token - Name of token to apply to the property.
/// @output CSS `grid-row-gap` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/row-gap
@mixin grid-row-gap($token) {
  @include css-property-with-token('grid-row-gap', $token);
}


/// Applies the `$token` to the CSS `grid-row-start` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Grid Layout
/// @access public
/// @param {string} $token - Name of token to apply to the property.
/// @output CSS `grid-row-start` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/grid-row-start
@mixin grid-row-start($token) {
  @include css-property-with-token('grid-row-start', $token);
}


/// Applies the `$token` to the CSS `grid-template` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Grid Layout
/// @access public
/// @param {string} $token - Name of token to apply to the property.
/// @output CSS `grid-template` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/grid-template
@mixin grid-template($token) {
  @include css-property-with-token('grid-template', $token);
}


/// Applies the `$token` to the CSS `grid-template-areas` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Grid Layout
/// @access public
/// @param {string} $token - Name of token to apply to the property.
/// @output CSS `grid-template-areas` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/grid-template-areas
@mixin grid-template-areas($token) {
  @include css-property-with-token('grid-template-areas', $token);
}


/// Applies the `$token` to the CSS `grid-template-columns` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Grid Layout
/// @access public
/// @param {string} $token - Name of token to apply to the property.
/// @output CSS `grid-template-columns` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/grid-template-columns
@mixin grid-template-columns($token) {
  @include css-property-with-token('grid-template-columns', $token);
}


/// Applies the `$token` to the CSS `grid-template-rows` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Grid Layout
/// @access public
/// @param {string} $token - Name of token to apply to the property.
/// @output CSS `grid-template-rows` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/grid-template-rows
@mixin grid-template-rows($token) {
  @include css-property-with-token('grid-template-rows', $token);
}


/// Applies the `$token` to the CSS `hanging-punctuation` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Text
/// @access public
/// @param {string} $token - Name of token to apply to the property.
/// @output CSS `hanging-punctuation` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/hanging-punctuation
@mixin hanging-punctuation($token) {
  @include css-property-with-token('hanging-punctuation', $token);
}


/// Applies the `$token` to the CSS `height` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Box Model
/// @access public
/// @param {string} $token - Name of token to apply to the property.
/// @output CSS `height` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/height
@mixin height($token) {
  @include css-property-with-token('height', $token);
}


/// Applies the `$token` to the CSS `hyphenate-character` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Text
/// @access public
/// @param {string} $token - Name of token to apply to the property.
/// @output CSS `hyphenate-character` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/hyphenate-character
@mixin hyphenate-character($token) {
  @include css-property-with-token('hyphenate-character', $token);
}


/// Applies the `$token` to the CSS `hyphens` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Text
/// @access public
/// @param {string} $token - Name of token to apply to the property.
/// @output CSS `hyphens` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/hyphens
@mixin hyphens($token) {
  @include css-property-with-token('hyphens', $token);
}


/// Applies the `$token` to the CSS `image-orientation` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Images
/// @access public
/// @param {string} $token - Name of token to apply to the property.
/// @output CSS `image-orientation` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/image-orientation
@mixin image-orientation($token) {
  @include css-property-with-token('image-orientation', $token);
}


/// Applies the `$token` to the CSS `image-rendering` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Images
/// @access public
/// @param {string} $token - Name of token to apply to the property.
/// @output CSS `image-rendering` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/image-rendering
@mixin image-rendering($token) {
  @include css-property-with-token('image-rendering', $token);
}


/// Applies the `$token` to the CSS `image-resolution` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Images
/// @access public
/// @param {string} $token - Name of token to apply to the property.
/// @output CSS `image-resolution` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/image-resolution
@mixin image-resolution($token) {
  @include css-property-with-token('image-resolution', $token);
}


/// Applies the `$token` to the CSS `ime-mode` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Basic User Interface
/// @access public
/// @param {string} $token - Name of token to apply to the property.
/// @output CSS `ime-mode` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/ime-mode
@mixin ime-mode($token) {
  @include css-property-with-token('ime-mode', $token);
}


/// Applies the `$token` to the CSS `initial-letter` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Inline
/// @access public
/// @param {string} $token - Name of token to apply to the property.
/// @output CSS `initial-letter` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/initial-letter
@mixin initial-letter($token) {
  @include css-property-with-token('initial-letter', $token);
}


/// Applies the `$token` to the CSS `initial-letter-align` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Inline
/// @access public
/// @param {string} $token - Name of token to apply to the property.
/// @output CSS `initial-letter-align` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/initial-letter-align
@mixin initial-letter-align($token) {
  @include css-property-with-token('initial-letter-align', $token);
}


/// Applies the `$token` to the CSS `inline-size` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Logical Properties
/// @access public
/// @param {string} $token - Name of token to apply to the property.
/// @output CSS `inline-size` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/inline-size
@mixin inline-size($token) {
  @include css-property-with-token('inline-size', $token);
}


/// Applies the `$token` to the CSS `input-security` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Basic User Interface
/// @access public
/// @param {string} $token - Name of token to apply to the property.
/// @output CSS `input-security` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/input-security
@mixin input-security($token) {
  @include css-property-with-token('input-security', $token);
}


/// Applies the `$token` to the CSS `inset` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Logical Properties
/// @access public
/// @param {string} $token - Name of token to apply to the property.
/// @output CSS `inset` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/inset
@mixin inset($token) {
  @include css-property-with-token('inset', $token);
}


/// Applies the `$token` to the CSS `inset-block` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Logical Properties
/// @access public
/// @param {string} $token - Name of token to apply to the property.
/// @output CSS `inset-block` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/inset-block
@mixin inset-block($token) {
  @include css-property-with-token('inset-block', $token);
}


/// Applies the `$token` to the CSS `inset-block-end` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Logical Properties
/// @access public
/// @param {string} $token - Name of token to apply to the property.
/// @output CSS `inset-block-end` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/inset-block-end
@mixin inset-block-end($token) {
  @include css-property-with-token('inset-block-end', $token);
}


/// Applies the `$token` to the CSS `inset-block-start` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Logical Properties
/// @access public
/// @param {string} $token - Name of token to apply to the property.
/// @output CSS `inset-block-start` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/inset-block-start
@mixin inset-block-start($token) {
  @include css-property-with-token('inset-block-start', $token);
}


/// Applies the `$token` to the CSS `inset-inline` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Logical Properties
/// @access public
/// @param {string} $token - Name of token to apply to the property.
/// @output CSS `inset-inline` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/inset-inline
@mixin inset-inline($token) {
  @include css-property-with-token('inset-inline', $token);
}


/// Applies the `$token` to the CSS `inset-inline-end` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Logical Properties
/// @access public
/// @param {string} $token - Name of token to apply to the property.
/// @output CSS `inset-inline-end` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/inset-inline-end
@mixin inset-inline-end($token) {
  @include css-property-with-token('inset-inline-end', $token);
}


/// Applies the `$token` to the CSS `inset-inline-start` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Logical Properties
/// @access public
/// @param {string} $token - Name of token to apply to the property.
/// @output CSS `inset-inline-start` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/inset-inline-start
@mixin inset-inline-start($token) {
  @include css-property-with-token('inset-inline-start', $token);
}


/// Applies the `$token` to the CSS `isolation` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group Compositing and Blending
/// @access public
/// @param {string} $token - Name of token to apply to the property.
/// @output CSS `isolation` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/isolation
@mixin isolation($token) {
  @include css-property-with-token('isolation', $token);
}


/// Applies the `$token` to the CSS `justify-content` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Box Alignment
/// @access public
/// @param {string} $token - Name of token to apply to the property.
/// @output CSS `justify-content` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/justify-content
@mixin justify-content($token) {
  @include css-property-with-token('justify-content', $token);
}


/// Applies the `$token` to the CSS `justify-items` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Box Alignment
/// @access public
/// @param {string} $token - Name of token to apply to the property.
/// @output CSS `justify-items` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/justify-items
@mixin justify-items($token) {
  @include css-property-with-token('justify-items', $token);
}


/// Applies the `$token` to the CSS `justify-self` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Box Alignment
/// @access public
/// @param {string} $token - Name of token to apply to the property.
/// @output CSS `justify-self` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/justify-self
@mixin justify-self($token) {
  @include css-property-with-token('justify-self', $token);
}


/// Applies the `$token` to the CSS `justify-tracks` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Grid Layout
/// @access public
/// @param {string} $token - Name of token to apply to the property.
/// @output CSS `justify-tracks` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/justify-tracks
@mixin justify-tracks($token) {
  @include css-property-with-token('justify-tracks', $token);
}


/// Applies the `$token` to the CSS `left` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Positioning
/// @access public
/// @param {string} $token - Name of token to apply to the property.
/// @output CSS `left` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/left
@mixin left($token) {
  @include css-property-with-token('left', $token);
}


/// Applies the `$token` to the CSS `letter-spacing` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Text
/// @access public
/// @param {string} $token - Name of token to apply to the property.
/// @output CSS `letter-spacing` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/letter-spacing
@mixin letter-spacing($token) {
  @include css-property-with-token('letter-spacing', $token);
}


/// Applies the `$token` to the CSS `line-break` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Text
/// @access public
/// @param {string} $token - Name of token to apply to the property.
/// @output CSS `line-break` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/line-break
@mixin line-break($token) {
  @include css-property-with-token('line-break', $token);
}


/// Applies the `$token` to the CSS `line-clamp` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Overflow
/// @access public
/// @param {string} $token - Name of token to apply to the property.
/// @output CSS `line-clamp` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/line-clamp
@mixin line-clamp($token) {
  @include css-property-with-token('line-clamp', $token);
}


/// Applies the `$token` to the CSS `line-height` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Fonts
/// @access public
/// @param {string} $token - Name of token to apply to the property.
/// @output CSS `line-height` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/line-height
@mixin line-height($token) {
  @include css-property-with-token('line-height', $token);
}


/// Applies the `$token` to the CSS `line-height-step` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Fonts
/// @access public
/// @param {string} $token - Name of token to apply to the property.
/// @output CSS `line-height-step` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/line-height-step
@mixin line-height-step($token) {
  @include css-property-with-token('line-height-step', $token);
}


/// Applies the `$token` to the CSS `list-style` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Lists and Counters
/// @access public
/// @param {string} $token - Name of token to apply to the property.
/// @output CSS `list-style` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/list-style
@mixin list-style($token) {
  @include css-property-with-token('list-style', $token);
}


/// Applies the `$token` to the CSS `list-style-image` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Lists and Counters
/// @access public
/// @param {string} $token - Name of token to apply to the property.
/// @output CSS `list-style-image` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/list-style-image
@mixin list-style-image($token) {
  @include css-property-with-token('list-style-image', $token);
}


/// Applies the `$token` to the CSS `list-style-position` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Lists and Counters
/// @access public
/// @param {string} $token - Name of token to apply to the property.
/// @output CSS `list-style-position` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/list-style-position
@mixin list-style-position($token) {
  @include css-property-with-token('list-style-position', $token);
}


/// Applies the `$token` to the CSS `list-style-type` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Lists and Counters
/// @access public
/// @param {string} $token - Name of token to apply to the property.
/// @output CSS `list-style-type` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/list-style-type
@mixin list-style-type($token) {
  @include css-property-with-token('list-style-type', $token);
}


/// Applies the `$token` to the CSS `margin` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Box Model
/// @access public
/// @param {string} $token - Name of token to apply to the property.
/// @output CSS `margin` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/margin
@mixin margin($token) {
  @include css-property-with-token('margin', $token);
}


/// Applies the `$token` to the CSS `margin-block` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Logical Properties
/// @access public
/// @param {string} $token - Name of token to apply to the property.
/// @output CSS `margin-block` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/margin-block
@mixin margin-block($token) {
  @include css-property-with-token('margin-block', $token);
}


/// Applies the `$token` to the CSS `margin-block-end` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Logical Properties
/// @access public
/// @param {string} $token - Name of token to apply to the property.
/// @output CSS `margin-block-end` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/margin-block-end
@mixin margin-block-end($token) {
  @include css-property-with-token('margin-block-end', $token);
}


/// Applies the `$token` to the CSS `margin-block-start` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Logical Properties
/// @access public
/// @param {string} $token - Name of token to apply to the property.
/// @output CSS `margin-block-start` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/margin-block-start
@mixin margin-block-start($token) {
  @include css-property-with-token('margin-block-start', $token);
}


/// Applies the `$token` to the CSS `margin-bottom` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Box Model
/// @access public
/// @param {string} $token - Name of token to apply to the property.
/// @output CSS `margin-bottom` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/margin-bottom
@mixin margin-bottom($token) {
  @include css-property-with-token('margin-bottom', $token);
}


/// Applies the `$token` to the CSS `margin-inline` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Logical Properties
/// @access public
/// @param {string} $token - Name of token to apply to the property.
/// @output CSS `margin-inline` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/margin-inline
@mixin margin-inline($token) {
  @include css-property-with-token('margin-inline', $token);
}


/// Applies the `$token` to the CSS `margin-inline-end` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Logical Properties
/// @access public
/// @param {string} $token - Name of token to apply to the property.
/// @output CSS `margin-inline-end` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/margin-inline-end
@mixin margin-inline-end($token) {
  @include css-property-with-token('margin-inline-end', $token);
}


/// Applies the `$token` to the CSS `margin-inline-start` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Logical Properties
/// @access public
/// @param {string} $token - Name of token to apply to the property.
/// @output CSS `margin-inline-start` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/margin-inline-start
@mixin margin-inline-start($token) {
  @include css-property-with-token('margin-inline-start', $token);
}


/// Applies the `$token` to the CSS `margin-left` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Box Model
/// @access public
/// @param {string} $token - Name of token to apply to the property.
/// @output CSS `margin-left` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/margin-left
@mixin margin-left($token) {
  @include css-property-with-token('margin-left', $token);
}


/// Applies the `$token` to the CSS `margin-right` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Box Model
/// @access public
/// @param {string} $token - Name of token to apply to the property.
/// @output CSS `margin-right` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/margin-right
@mixin margin-right($token) {
  @include css-property-with-token('margin-right', $token);
}


/// Applies the `$token` to the CSS `margin-top` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Box Model
/// @access public
/// @param {string} $token - Name of token to apply to the property.
/// @output CSS `margin-top` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/margin-top
@mixin margin-top($token) {
  @include css-property-with-token('margin-top', $token);
}


/// Applies the `$token` to the CSS `margin-trim` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Box Model
/// @access public
/// @param {string} $token - Name of token to apply to the property.
/// @output CSS `margin-trim` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/margin-trim
@mixin margin-trim($token) {
  @include css-property-with-token('margin-trim', $token);
}


/// Applies the `$token` to the CSS `mask` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Masking
/// @access public
/// @param {string} $token - Name of token to apply to the property.
/// @output CSS `mask` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/mask
@mixin mask($token) {
  @include css-property-with-token('mask', $token);
}


/// Applies the `$token` to the CSS `mask-border` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Masking
/// @access public
/// @param {string} $token - Name of token to apply to the property.
/// @output CSS `mask-border` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/mask-border
@mixin mask-border($token) {
  @include css-property-with-token('mask-border', $token);
}


/// Applies the `$token` to the CSS `mask-border-mode` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Masking
/// @access public
/// @param {string} $token - Name of token to apply to the property.
/// @output CSS `mask-border-mode` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/mask-border-mode
@mixin mask-border-mode($token) {
  @include css-property-with-token('mask-border-mode', $token);
}


/// Applies the `$token` to the CSS `mask-border-outset` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Masking
/// @access public
/// @param {string} $token - Name of token to apply to the property.
/// @output CSS `mask-border-outset` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/mask-border-outset
@mixin mask-border-outset($token) {
  @include css-property-with-token('mask-border-outset', $token);
}


/// Applies the `$token` to the CSS `mask-border-repeat` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Masking
/// @access public
/// @param {string} $token - Name of token to apply to the property.
/// @output CSS `mask-border-repeat` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/mask-border-repeat
@mixin mask-border-repeat($token) {
  @include css-property-with-token('mask-border-repeat', $token);
}


/// Applies the `$token` to the CSS `mask-border-slice` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Masking
/// @access public
/// @param {string} $token - Name of token to apply to the property.
/// @output CSS `mask-border-slice` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/mask-border-slice
@mixin mask-border-slice($token) {
  @include css-property-with-token('mask-border-slice', $token);
}


/// Applies the `$token` to the CSS `mask-border-source` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Masking
/// @access public
/// @param {string} $token - Name of token to apply to the property.
/// @output CSS `mask-border-source` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/mask-border-source
@mixin mask-border-source($token) {
  @include css-property-with-token('mask-border-source', $token);
}


/// Applies the `$token` to the CSS `mask-border-width` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Masking
/// @access public
/// @param {string} $token - Name of token to apply to the property.
/// @output CSS `mask-border-width` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/mask-border-width
@mixin mask-border-width($token) {
  @include css-property-with-token('mask-border-width', $token);
}


/// Applies the `$token` to the CSS `mask-clip` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Masking
/// @access public
/// @param {string} $token - Name of token to apply to the property.
/// @output CSS `mask-clip` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/mask-clip
@mixin mask-clip($token) {
  @include css-property-with-token('mask-clip', $token);
}


/// Applies the `$token` to the CSS `mask-composite` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Masking
/// @access public
/// @param {string} $token - Name of token to apply to the property.
/// @output CSS `mask-composite` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/mask-composite
@mixin mask-composite($token) {
  @include css-property-with-token('mask-composite', $token);
}


/// Applies the `$token` to the CSS `mask-image` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Masking
/// @access public
/// @param {string} $token - Name of token to apply to the property.
/// @output CSS `mask-image` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/mask-image
@mixin mask-image($token) {
  @include css-property-with-token('mask-image', $token);
}


/// Applies the `$token` to the CSS `mask-mode` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Masking
/// @access public
/// @param {string} $token - Name of token to apply to the property.
/// @output CSS `mask-mode` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/mask-mode
@mixin mask-mode($token) {
  @include css-property-with-token('mask-mode', $token);
}


/// Applies the `$token` to the CSS `mask-origin` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Masking
/// @access public
/// @param {string} $token - Name of token to apply to the property.
/// @output CSS `mask-origin` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/mask-origin
@mixin mask-origin($token) {
  @include css-property-with-token('mask-origin', $token);
}


/// Applies the `$token` to the CSS `mask-position` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Masking
/// @access public
/// @param {string} $token - Name of token to apply to the property.
/// @output CSS `mask-position` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/mask-position
@mixin mask-position($token) {
  @include css-property-with-token('mask-position', $token);
}


/// Applies the `$token` to the CSS `mask-repeat` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Masking
/// @access public
/// @param {string} $token - Name of token to apply to the property.
/// @output CSS `mask-repeat` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/mask-repeat
@mixin mask-repeat($token) {
  @include css-property-with-token('mask-repeat', $token);
}


/// Applies the `$token` to the CSS `mask-size` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Masking
/// @access public
/// @param {string} $token - Name of token to apply to the property.
/// @output CSS `mask-size` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/mask-size
@mixin mask-size($token) {
  @include css-property-with-token('mask-size', $token);
}


/// Applies the `$token` to the CSS `mask-type` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Masking
/// @access public
/// @param {string} $token - Name of token to apply to the property.
/// @output CSS `mask-type` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/mask-type
@mixin mask-type($token) {
  @include css-property-with-token('mask-type', $token);
}


/// Applies the `$token` to the CSS `masonry-auto-flow` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Grid Layout
/// @access public
/// @param {string} $token - Name of token to apply to the property.
/// @output CSS `masonry-auto-flow` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/masonry-auto-flow
@mixin masonry-auto-flow($token) {
  @include css-property-with-token('masonry-auto-flow', $token);
}


/// Applies the `$token` to the CSS `math-style` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group MathML
/// @access public
/// @param {string} $token - Name of token to apply to the property.
/// @output CSS `math-style` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/math-style
@mixin math-style($token) {
  @include css-property-with-token('math-style', $token);
}


/// Applies the `$token` to the CSS `max-block-size` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Logical Properties
/// @access public
/// @param {string} $token - Name of token to apply to the property.
/// @output CSS `max-block-size` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/max-block-size
@mixin max-block-size($token) {
  @include css-property-with-token('max-block-size', $token);
}


/// Applies the `$token` to the CSS `max-height` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Box Model
/// @access public
/// @param {string} $token - Name of token to apply to the property.
/// @output CSS `max-height` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/max-height
@mixin max-height($token) {
  @include css-property-with-token('max-height', $token);
}


/// Applies the `$token` to the CSS `max-inline-size` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Logical Properties
/// @access public
/// @param {string} $token - Name of token to apply to the property.
/// @output CSS `max-inline-size` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/max-inline-size
@mixin max-inline-size($token) {
  @include css-property-with-token('max-inline-size', $token);
}


/// Applies the `$token` to the CSS `max-lines` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Overflow
/// @access public
/// @param {string} $token - Name of token to apply to the property.
/// @output CSS `max-lines` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/max-lines
@mixin max-lines($token) {
  @include css-property-with-token('max-lines', $token);
}


/// Applies the `$token` to the CSS `max-width` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Box Model
/// @access public
/// @param {string} $token - Name of token to apply to the property.
/// @output CSS `max-width` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/max-width
@mixin max-width($token) {
  @include css-property-with-token('max-width', $token);
}


/// Applies the `$token` to the CSS `min-block-size` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Logical Properties
/// @access public
/// @param {string} $token - Name of token to apply to the property.
/// @output CSS `min-block-size` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/min-block-size
@mixin min-block-size($token) {
  @include css-property-with-token('min-block-size', $token);
}


/// Applies the `$token` to the CSS `min-height` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Box Model
/// @access public
/// @param {string} $token - Name of token to apply to the property.
/// @output CSS `min-height` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/min-height
@mixin min-height($token) {
  @include css-property-with-token('min-height', $token);
}


/// Applies the `$token` to the CSS `min-inline-size` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Logical Properties
/// @access public
/// @param {string} $token - Name of token to apply to the property.
/// @output CSS `min-inline-size` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/min-inline-size
@mixin min-inline-size($token) {
  @include css-property-with-token('min-inline-size', $token);
}


/// Applies the `$token` to the CSS `min-width` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Box Model
/// @access public
/// @param {string} $token - Name of token to apply to the property.
/// @output CSS `min-width` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/min-width
@mixin min-width($token) {
  @include css-property-with-token('min-width', $token);
}


/// Applies the `$token` to the CSS `mix-blend-mode` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group Compositing and Blending
/// @access public
/// @param {string} $token - Name of token to apply to the property.
/// @output CSS `mix-blend-mode` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/mix-blend-mode
@mixin mix-blend-mode($token) {
  @include css-property-with-token('mix-blend-mode', $token);
}


/// Applies the `$token` to the CSS `object-fit` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Images
/// @access public
/// @param {string} $token - Name of token to apply to the property.
/// @output CSS `object-fit` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/object-fit
@mixin object-fit($token) {
  @include css-property-with-token('object-fit', $token);
}


/// Applies the `$token` to the CSS `object-position` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Images
/// @access public
/// @param {string} $token - Name of token to apply to the property.
/// @output CSS `object-position` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/object-position
@mixin object-position($token) {
  @include css-property-with-token('object-position', $token);
}


/// Applies the `$token` to the CSS `offset` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Motion Path
/// @access public
/// @param {string} $token - Name of token to apply to the property.
/// @output CSS `offset` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/offset
@mixin offset($token) {
  @include css-property-with-token('offset', $token);
}


/// Applies the `$token` to the CSS `offset-anchor` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Motion Path
/// @access public
/// @param {string} $token - Name of token to apply to the property.
/// @output CSS `offset-anchor` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/offset-anchor
@mixin offset-anchor($token) {
  @include css-property-with-token('offset-anchor', $token);
}


/// Applies the `$token` to the CSS `offset-distance` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Motion Path
/// @access public
/// @param {string} $token - Name of token to apply to the property.
/// @output CSS `offset-distance` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/offset-distance
@mixin offset-distance($token) {
  @include css-property-with-token('offset-distance', $token);
}


/// Applies the `$token` to the CSS `offset-path` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Motion Path
/// @access public
/// @param {string} $token - Name of token to apply to the property.
/// @output CSS `offset-path` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/offset-path
@mixin offset-path($token) {
  @include css-property-with-token('offset-path', $token);
}


/// Applies the `$token` to the CSS `offset-position` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Motion Path
/// @access public
/// @param {string} $token - Name of token to apply to the property.
/// @output CSS `offset-position` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/offset-position
@mixin offset-position($token) {
  @include css-property-with-token('offset-position', $token);
}


/// Applies the `$token` to the CSS `offset-rotate` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Motion Path
/// @access public
/// @param {string} $token - Name of token to apply to the property.
/// @output CSS `offset-rotate` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/offset-rotate
@mixin offset-rotate($token) {
  @include css-property-with-token('offset-rotate', $token);
}


/// Applies the `$token` to the CSS `opacity` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Color
/// @access public
/// @param {string} $token - Name of token to apply to the property.
/// @output CSS `opacity` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/opacity
@mixin opacity($token) {
  @include css-property-with-token('opacity', $token);
}


/// Applies the `$token` to the CSS `order` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Flexible Box Layout
/// @access public
/// @param {string} $token - Name of token to apply to the property.
/// @output CSS `order` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/order
@mixin order($token) {
  @include css-property-with-token('order', $token);
}


/// Applies the `$token` to the CSS `orphans` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Fragmentation
/// @access public
/// @param {string} $token - Name of token to apply to the property.
/// @output CSS `orphans` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/orphans
@mixin orphans($token) {
  @include css-property-with-token('orphans', $token);
}


/// Applies the `$token` to the CSS `outline` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Basic User Interface
/// @access public
/// @param {string} $token - Name of token to apply to the property.
/// @output CSS `outline` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/outline
@mixin outline($token) {
  @include css-property-with-token('outline', $token);
}


/// Applies the `$token` to the CSS `outline-color` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Basic User Interface
/// @access public
/// @param {string} $token - Name of token to apply to the property.
/// @output CSS `outline-color` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/outline-color
@mixin outline-color($token) {
  @include css-property-with-token('outline-color', $token);
}


/// Applies the `$token` to the CSS `outline-offset` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Basic User Interface
/// @access public
/// @param {string} $token - Name of token to apply to the property.
/// @output CSS `outline-offset` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/outline-offset
@mixin outline-offset($token) {
  @include css-property-with-token('outline-offset', $token);
}


/// Applies the `$token` to the CSS `outline-style` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Basic User Interface
/// @access public
/// @param {string} $token - Name of token to apply to the property.
/// @output CSS `outline-style` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/outline-style
@mixin outline-style($token) {
  @include css-property-with-token('outline-style', $token);
}


/// Applies the `$token` to the CSS `outline-width` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Basic User Interface
/// @access public
/// @param {string} $token - Name of token to apply to the property.
/// @output CSS `outline-width` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/outline-width
@mixin outline-width($token) {
  @include css-property-with-token('outline-width', $token);
}


/// Applies the `$token` to the CSS `overflow` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Overflow
/// @access public
/// @param {string} $token - Name of token to apply to the property.
/// @output CSS `overflow` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/overflow
@mixin overflow($token) {
  @include css-property-with-token('overflow', $token);
}


/// Applies the `$token` to the CSS `overflow-anchor` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Scroll Anchoring
/// @access public
/// @param {string} $token - Name of token to apply to the property.
/// @output CSS `overflow-anchor` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/overflow-anchor
@mixin overflow-anchor($token) {
  @include css-property-with-token('overflow-anchor', $token);
}


/// Applies the `$token` to the CSS `overflow-block` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Overflow
/// @access public
/// @param {string} $token - Name of token to apply to the property.
/// @output CSS `overflow-block` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/overflow-block
@mixin overflow-block($token) {
  @include css-property-with-token('overflow-block', $token);
}


/// Applies the `$token` to the CSS `overflow-clip-box` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group Mozilla Extensions
/// @access public
/// @param {string} $token - Name of token to apply to the property.
/// @output CSS `overflow-clip-box` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Mozilla/CSS/overflow-clip-box
@mixin overflow-clip-box($token) {
  @include css-property-with-token('overflow-clip-box', $token);
}


/// Applies the `$token` to the CSS `overflow-clip-margin` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Overflow
/// @access public
/// @param {string} $token - Name of token to apply to the property.
/// @output CSS `overflow-clip-margin` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/overflow-clip-margin
@mixin overflow-clip-margin($token) {
  @include css-property-with-token('overflow-clip-margin', $token);
}


/// Applies the `$token` to the CSS `overflow-inline` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Overflow
/// @access public
/// @param {string} $token - Name of token to apply to the property.
/// @output CSS `overflow-inline` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/overflow-inline
@mixin overflow-inline($token) {
  @include css-property-with-token('overflow-inline', $token);
}


/// Applies the `$token` to the CSS `overflow-wrap` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Text
/// @access public
/// @param {string} $token - Name of token to apply to the property.
/// @output CSS `overflow-wrap` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/overflow-wrap
@mixin overflow-wrap($token) {
  @include css-property-with-token('overflow-wrap', $token);
}


/// Applies the `$token` to the CSS `overflow-x` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Overflow
/// @access public
/// @param {string} $token - Name of token to apply to the property.
/// @output CSS `overflow-x` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/overflow-x
@mixin overflow-x($token) {
  @include css-property-with-token('overflow-x', $token);
}


/// Applies the `$token` to the CSS `overflow-y` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Overflow
/// @access public
/// @param {string} $token - Name of token to apply to the property.
/// @output CSS `overflow-y` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/overflow-y
@mixin overflow-y($token) {
  @include css-property-with-token('overflow-y', $token);
}


/// Applies the `$token` to the CSS `overscroll-behavior` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Box Model
/// @access public
/// @param {string} $token - Name of token to apply to the property.
/// @output CSS `overscroll-behavior` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/overscroll-behavior
@mixin overscroll-behavior($token) {
  @include css-property-with-token('overscroll-behavior', $token);
}


/// Applies the `$token` to the CSS `overscroll-behavior-block` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Box Model
/// @access public
/// @param {string} $token - Name of token to apply to the property.
/// @output CSS `overscroll-behavior-block` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/overscroll-behavior-block
@mixin overscroll-behavior-block($token) {
  @include css-property-with-token('overscroll-behavior-block', $token);
}


/// Applies the `$token` to the CSS `overscroll-behavior-inline` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Box Model
/// @access public
/// @param {string} $token - Name of token to apply to the property.
/// @output CSS `overscroll-behavior-inline` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/overscroll-behavior-inline
@mixin overscroll-behavior-inline($token) {
  @include css-property-with-token('overscroll-behavior-inline', $token);
}


/// Applies the `$token` to the CSS `overscroll-behavior-x` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Box Model
/// @access public
/// @param {string} $token - Name of token to apply to the property.
/// @output CSS `overscroll-behavior-x` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/overscroll-behavior-x
@mixin overscroll-behavior-x($token) {
  @include css-property-with-token('overscroll-behavior-x', $token);
}


/// Applies the `$token` to the CSS `overscroll-behavior-y` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Box Model
/// @access public
/// @param {string} $token - Name of token to apply to the property.
/// @output CSS `overscroll-behavior-y` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/overscroll-behavior-y
@mixin overscroll-behavior-y($token) {
  @include css-property-with-token('overscroll-behavior-y', $token);
}


/// Applies the `$token` to the CSS `padding` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Box Model
/// @access public
/// @param {string} $token - Name of token to apply to the property.
/// @output CSS `padding` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/padding
@mixin padding($token) {
  @include css-property-with-token('padding', $token);
}


/// Applies the `$token` to the CSS `padding-block` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Logical Properties
/// @access public
/// @param {string} $token - Name of token to apply to the property.
/// @output CSS `padding-block` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/padding-block
@mixin padding-block($token) {
  @include css-property-with-token('padding-block', $token);
}


/// Applies the `$token` to the CSS `padding-block-end` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Logical Properties
/// @access public
/// @param {string} $token - Name of token to apply to the property.
/// @output CSS `padding-block-end` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/padding-block-end
@mixin padding-block-end($token) {
  @include css-property-with-token('padding-block-end', $token);
}


/// Applies the `$token` to the CSS `padding-block-start` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Logical Properties
/// @access public
/// @param {string} $token - Name of token to apply to the property.
/// @output CSS `padding-block-start` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/padding-block-start
@mixin padding-block-start($token) {
  @include css-property-with-token('padding-block-start', $token);
}


/// Applies the `$token` to the CSS `padding-bottom` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Box Model
/// @access public
/// @param {string} $token - Name of token to apply to the property.
/// @output CSS `padding-bottom` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/padding-bottom
@mixin padding-bottom($token) {
  @include css-property-with-token('padding-bottom', $token);
}


/// Applies the `$token` to the CSS `padding-inline` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Logical Properties
/// @access public
/// @param {string} $token - Name of token to apply to the property.
/// @output CSS `padding-inline` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/padding-inline
@mixin padding-inline($token) {
  @include css-property-with-token('padding-inline', $token);
}


/// Applies the `$token` to the CSS `padding-inline-end` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Logical Properties
/// @access public
/// @param {string} $token - Name of token to apply to the property.
/// @output CSS `padding-inline-end` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/padding-inline-end
@mixin padding-inline-end($token) {
  @include css-property-with-token('padding-inline-end', $token);
}


/// Applies the `$token` to the CSS `padding-inline-start` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Logical Properties
/// @access public
/// @param {string} $token - Name of token to apply to the property.
/// @output CSS `padding-inline-start` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/padding-inline-start
@mixin padding-inline-start($token) {
  @include css-property-with-token('padding-inline-start', $token);
}


/// Applies the `$token` to the CSS `padding-left` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Box Model
/// @access public
/// @param {string} $token - Name of token to apply to the property.
/// @output CSS `padding-left` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/padding-left
@mixin padding-left($token) {
  @include css-property-with-token('padding-left', $token);
}


/// Applies the `$token` to the CSS `padding-right` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Box Model
/// @access public
/// @param {string} $token - Name of token to apply to the property.
/// @output CSS `padding-right` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/padding-right
@mixin padding-right($token) {
  @include css-property-with-token('padding-right', $token);
}


/// Applies the `$token` to the CSS `padding-top` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Box Model
/// @access public
/// @param {string} $token - Name of token to apply to the property.
/// @output CSS `padding-top` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/padding-top
@mixin padding-top($token) {
  @include css-property-with-token('padding-top', $token);
}


/// Applies the `$token` to the CSS `page-break-after` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Pages
/// @access public
/// @param {string} $token - Name of token to apply to the property.
/// @output CSS `page-break-after` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/page-break-after
@mixin page-break-after($token) {
  @include css-property-with-token('page-break-after', $token);
}


/// Applies the `$token` to the CSS `page-break-before` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Pages
/// @access public
/// @param {string} $token - Name of token to apply to the property.
/// @output CSS `page-break-before` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/page-break-before
@mixin page-break-before($token) {
  @include css-property-with-token('page-break-before', $token);
}


/// Applies the `$token` to the CSS `page-break-inside` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Pages
/// @access public
/// @param {string} $token - Name of token to apply to the property.
/// @output CSS `page-break-inside` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/page-break-inside
@mixin page-break-inside($token) {
  @include css-property-with-token('page-break-inside', $token);
}


/// Applies the `$token` to the CSS `paint-order` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Text
/// @access public
/// @param {string} $token - Name of token to apply to the property.
/// @output CSS `paint-order` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/paint-order
@mixin paint-order($token) {
  @include css-property-with-token('paint-order', $token);
}


/// Applies the `$token` to the CSS `perspective` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Transforms
/// @access public
/// @param {string} $token - Name of token to apply to the property.
/// @output CSS `perspective` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/perspective
@mixin perspective($token) {
  @include css-property-with-token('perspective', $token);
}


/// Applies the `$token` to the CSS `perspective-origin` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Transforms
/// @access public
/// @param {string} $token - Name of token to apply to the property.
/// @output CSS `perspective-origin` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/perspective-origin
@mixin perspective-origin($token) {
  @include css-property-with-token('perspective-origin', $token);
}


/// Applies the `$token` to the CSS `place-content` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Box Alignment
/// @access public
/// @param {string} $token - Name of token to apply to the property.
/// @output CSS `place-content` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/place-content
@mixin place-content($token) {
  @include css-property-with-token('place-content', $token);
}


/// Applies the `$token` to the CSS `place-items` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Box Alignment
/// @access public
/// @param {string} $token - Name of token to apply to the property.
/// @output CSS `place-items` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/place-items
@mixin place-items($token) {
  @include css-property-with-token('place-items', $token);
}


/// Applies the `$token` to the CSS `place-self` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Box Alignment
/// @access public
/// @param {string} $token - Name of token to apply to the property.
/// @output CSS `place-self` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/place-self
@mixin place-self($token) {
  @include css-property-with-token('place-self', $token);
}


/// Applies the `$token` to the CSS `pointer-events` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Basic User Interface
/// @access public
/// @param {string} $token - Name of token to apply to the property.
/// @output CSS `pointer-events` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/pointer-events
@mixin pointer-events($token) {
  @include css-property-with-token('pointer-events', $token);
}


/// Applies the `$token` to the CSS `position` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Positioning
/// @access public
/// @param {string} $token - Name of token to apply to the property.
/// @output CSS `position` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/position
@mixin position($token) {
  @include css-property-with-token('position', $token);
}


/// Applies the `$token` to the CSS `quotes` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Generated Content
/// @access public
/// @param {string} $token - Name of token to apply to the property.
/// @output CSS `quotes` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/quotes
@mixin quotes($token) {
  @include css-property-with-token('quotes', $token);
}


/// Applies the `$token` to the CSS `resize` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Basic User Interface
/// @access public
/// @param {string} $token - Name of token to apply to the property.
/// @output CSS `resize` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/resize
@mixin resize($token) {
  @include css-property-with-token('resize', $token);
}


/// Applies the `$token` to the CSS `right` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Positioning
/// @access public
/// @param {string} $token - Name of token to apply to the property.
/// @output CSS `right` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/right
@mixin right($token) {
  @include css-property-with-token('right', $token);
}


/// Applies the `$token` to the CSS `rotate` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Transforms
/// @access public
/// @param {string} $token - Name of token to apply to the property.
/// @output CSS `rotate` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/rotate
@mixin rotate($token) {
  @include css-property-with-token('rotate', $token);
}


/// Applies the `$token` to the CSS `row-gap` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Box Alignment
/// @access public
/// @param {string} $token - Name of token to apply to the property.
/// @output CSS `row-gap` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/row-gap
@mixin row-gap($token) {
  @include css-property-with-token('row-gap', $token);
}


/// Applies the `$token` to the CSS `ruby-align` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Ruby
/// @access public
/// @param {string} $token - Name of token to apply to the property.
/// @output CSS `ruby-align` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/ruby-align
@mixin ruby-align($token) {
  @include css-property-with-token('ruby-align', $token);
}


/// Applies the `$token` to the CSS `ruby-merge` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Ruby
/// @access public
/// @param {string} $token - Name of token to apply to the property.
/// @output CSS `ruby-merge` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/ruby-merge
@mixin ruby-merge($token) {
  @include css-property-with-token('ruby-merge', $token);
}


/// Applies the `$token` to the CSS `ruby-position` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Ruby
/// @access public
/// @param {string} $token - Name of token to apply to the property.
/// @output CSS `ruby-position` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/ruby-position
@mixin ruby-position($token) {
  @include css-property-with-token('ruby-position', $token);
}


/// Applies the `$token` to the CSS `scale` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Transforms
/// @access public
/// @param {string} $token - Name of token to apply to the property.
/// @output CSS `scale` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/scale
@mixin scale($token) {
  @include css-property-with-token('scale', $token);
}


/// Applies the `$token` to the CSS `scrollbar-color` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Scrollbars
/// @access public
/// @param {string} $token - Name of token to apply to the property.
/// @output CSS `scrollbar-color` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/scrollbar-color
@mixin scrollbar-color($token) {
  @include css-property-with-token('scrollbar-color', $token);
}


/// Applies the `$token` to the CSS `scrollbar-gutter` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Overflow
/// @access public
/// @param {string} $token - Name of token to apply to the property.
/// @output CSS `scrollbar-gutter` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/scrollbar-gutter
@mixin scrollbar-gutter($token) {
  @include css-property-with-token('scrollbar-gutter', $token);
}


/// Applies the `$token` to the CSS `scrollbar-width` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Scrollbars
/// @access public
/// @param {string} $token - Name of token to apply to the property.
/// @output CSS `scrollbar-width` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/scrollbar-width
@mixin scrollbar-width($token) {
  @include css-property-with-token('scrollbar-width', $token);
}


/// Applies the `$token` to the CSS `scroll-behavior` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSSOM View
/// @access public
/// @param {string} $token - Name of token to apply to the property.
/// @output CSS `scroll-behavior` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/scroll-behavior
@mixin scroll-behavior($token) {
  @include css-property-with-token('scroll-behavior', $token);
}


/// Applies the `$token` to the CSS `scroll-margin` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Scroll Snap
/// @access public
/// @param {string} $token - Name of token to apply to the property.
/// @output CSS `scroll-margin` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/scroll-margin
@mixin scroll-margin($token) {
  @include css-property-with-token('scroll-margin', $token);
}


/// Applies the `$token` to the CSS `scroll-margin-block` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Scroll Snap
/// @access public
/// @param {string} $token - Name of token to apply to the property.
/// @output CSS `scroll-margin-block` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/scroll-margin-block
@mixin scroll-margin-block($token) {
  @include css-property-with-token('scroll-margin-block', $token);
}


/// Applies the `$token` to the CSS `scroll-margin-block-start` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Scroll Snap
/// @access public
/// @param {string} $token - Name of token to apply to the property.
/// @output CSS `scroll-margin-block-start` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/scroll-margin-block-start
@mixin scroll-margin-block-start($token) {
  @include css-property-with-token('scroll-margin-block-start', $token);
}


/// Applies the `$token` to the CSS `scroll-margin-block-end` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Scroll Snap
/// @access public
/// @param {string} $token - Name of token to apply to the property.
/// @output CSS `scroll-margin-block-end` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/scroll-margin-block-end
@mixin scroll-margin-block-end($token) {
  @include css-property-with-token('scroll-margin-block-end', $token);
}


/// Applies the `$token` to the CSS `scroll-margin-bottom` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Scroll Snap
/// @access public
/// @param {string} $token - Name of token to apply to the property.
/// @output CSS `scroll-margin-bottom` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/scroll-margin-bottom
@mixin scroll-margin-bottom($token) {
  @include css-property-with-token('scroll-margin-bottom', $token);
}


/// Applies the `$token` to the CSS `scroll-margin-inline` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Scroll Snap
/// @access public
/// @param {string} $token - Name of token to apply to the property.
/// @output CSS `scroll-margin-inline` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/scroll-margin-inline
@mixin scroll-margin-inline($token) {
  @include css-property-with-token('scroll-margin-inline', $token);
}


/// Applies the `$token` to the CSS `scroll-margin-inline-start` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Scroll Snap
/// @access public
/// @param {string} $token - Name of token to apply to the property.
/// @output CSS `scroll-margin-inline-start` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/scroll-margin-inline-start
@mixin scroll-margin-inline-start($token) {
  @include css-property-with-token('scroll-margin-inline-start', $token);
}


/// Applies the `$token` to the CSS `scroll-margin-inline-end` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Scroll Snap
/// @access public
/// @param {string} $token - Name of token to apply to the property.
/// @output CSS `scroll-margin-inline-end` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/scroll-margin-inline-end
@mixin scroll-margin-inline-end($token) {
  @include css-property-with-token('scroll-margin-inline-end', $token);
}


/// Applies the `$token` to the CSS `scroll-margin-left` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Scroll Snap
/// @access public
/// @param {string} $token - Name of token to apply to the property.
/// @output CSS `scroll-margin-left` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/scroll-margin-left
@mixin scroll-margin-left($token) {
  @include css-property-with-token('scroll-margin-left', $token);
}


/// Applies the `$token` to the CSS `scroll-margin-right` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Scroll Snap
/// @access public
/// @param {string} $token - Name of token to apply to the property.
/// @output CSS `scroll-margin-right` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/scroll-margin-right
@mixin scroll-margin-right($token) {
  @include css-property-with-token('scroll-margin-right', $token);
}


/// Applies the `$token` to the CSS `scroll-margin-top` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Scroll Snap
/// @access public
/// @param {string} $token - Name of token to apply to the property.
/// @output CSS `scroll-margin-top` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/scroll-margin-top
@mixin scroll-margin-top($token) {
  @include css-property-with-token('scroll-margin-top', $token);
}


/// Applies the `$token` to the CSS `scroll-padding` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Scroll Snap
/// @access public
/// @param {string} $token - Name of token to apply to the property.
/// @output CSS `scroll-padding` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/scroll-padding
@mixin scroll-padding($token) {
  @include css-property-with-token('scroll-padding', $token);
}


/// Applies the `$token` to the CSS `scroll-padding-block` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Scroll Snap
/// @access public
/// @param {string} $token - Name of token to apply to the property.
/// @output CSS `scroll-padding-block` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/scroll-padding-block
@mixin scroll-padding-block($token) {
  @include css-property-with-token('scroll-padding-block', $token);
}


/// Applies the `$token` to the CSS `scroll-padding-block-start` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Scroll Snap
/// @access public
/// @param {string} $token - Name of token to apply to the property.
/// @output CSS `scroll-padding-block-start` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/scroll-padding-block-start
@mixin scroll-padding-block-start($token) {
  @include css-property-with-token('scroll-padding-block-start', $token);
}


/// Applies the `$token` to the CSS `scroll-padding-block-end` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Scroll Snap
/// @access public
/// @param {string} $token - Name of token to apply to the property.
/// @output CSS `scroll-padding-block-end` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/scroll-padding-block-end
@mixin scroll-padding-block-end($token) {
  @include css-property-with-token('scroll-padding-block-end', $token);
}


/// Applies the `$token` to the CSS `scroll-padding-bottom` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Scroll Snap
/// @access public
/// @param {string} $token - Name of token to apply to the property.
/// @output CSS `scroll-padding-bottom` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/scroll-padding-bottom
@mixin scroll-padding-bottom($token) {
  @include css-property-with-token('scroll-padding-bottom', $token);
}


/// Applies the `$token` to the CSS `scroll-padding-inline` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Scroll Snap
/// @access public
/// @param {string} $token - Name of token to apply to the property.
/// @output CSS `scroll-padding-inline` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/scroll-padding-inline
@mixin scroll-padding-inline($token) {
  @include css-property-with-token('scroll-padding-inline', $token);
}


/// Applies the `$token` to the CSS `scroll-padding-inline-start` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Scroll Snap
/// @access public
/// @param {string} $token - Name of token to apply to the property.
/// @output CSS `scroll-padding-inline-start` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/scroll-padding-inline-start
@mixin scroll-padding-inline-start($token) {
  @include css-property-with-token('scroll-padding-inline-start', $token);
}


/// Applies the `$token` to the CSS `scroll-padding-inline-end` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Scroll Snap
/// @access public
/// @param {string} $token - Name of token to apply to the property.
/// @output CSS `scroll-padding-inline-end` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/scroll-padding-inline-end
@mixin scroll-padding-inline-end($token) {
  @include css-property-with-token('scroll-padding-inline-end', $token);
}


/// Applies the `$token` to the CSS `scroll-padding-left` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Scroll Snap
/// @access public
/// @param {string} $token - Name of token to apply to the property.
/// @output CSS `scroll-padding-left` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/scroll-padding-left
@mixin scroll-padding-left($token) {
  @include css-property-with-token('scroll-padding-left', $token);
}


/// Applies the `$token` to the CSS `scroll-padding-right` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Scroll Snap
/// @access public
/// @param {string} $token - Name of token to apply to the property.
/// @output CSS `scroll-padding-right` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/scroll-padding-right
@mixin scroll-padding-right($token) {
  @include css-property-with-token('scroll-padding-right', $token);
}


/// Applies the `$token` to the CSS `scroll-padding-top` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Scroll Snap
/// @access public
/// @param {string} $token - Name of token to apply to the property.
/// @output CSS `scroll-padding-top` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/scroll-padding-top
@mixin scroll-padding-top($token) {
  @include css-property-with-token('scroll-padding-top', $token);
}


/// Applies the `$token` to the CSS `scroll-snap-align` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Scroll Snap
/// @access public
/// @param {string} $token - Name of token to apply to the property.
/// @output CSS `scroll-snap-align` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/scroll-snap-align
@mixin scroll-snap-align($token) {
  @include css-property-with-token('scroll-snap-align', $token);
}


/// Applies the `$token` to the CSS `scroll-snap-coordinate` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Scroll Snap
/// @access public
/// @param {string} $token - Name of token to apply to the property.
/// @output CSS `scroll-snap-coordinate` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/scroll-snap-coordinate
@mixin scroll-snap-coordinate($token) {
  @include css-property-with-token('scroll-snap-coordinate', $token);
}


/// Applies the `$token` to the CSS `scroll-snap-destination` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Scroll Snap
/// @access public
/// @param {string} $token - Name of token to apply to the property.
/// @output CSS `scroll-snap-destination` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/scroll-snap-destination
@mixin scroll-snap-destination($token) {
  @include css-property-with-token('scroll-snap-destination', $token);
}


/// Applies the `$token` to the CSS `scroll-snap-points-x` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Scroll Snap
/// @access public
/// @param {string} $token - Name of token to apply to the property.
/// @output CSS `scroll-snap-points-x` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/scroll-snap-points-x
@mixin scroll-snap-points-x($token) {
  @include css-property-with-token('scroll-snap-points-x', $token);
}


/// Applies the `$token` to the CSS `scroll-snap-points-y` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Scroll Snap
/// @access public
/// @param {string} $token - Name of token to apply to the property.
/// @output CSS `scroll-snap-points-y` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/scroll-snap-points-y
@mixin scroll-snap-points-y($token) {
  @include css-property-with-token('scroll-snap-points-y', $token);
}


/// Applies the `$token` to the CSS `scroll-snap-stop` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Scroll Snap
/// @access public
/// @param {string} $token - Name of token to apply to the property.
/// @output CSS `scroll-snap-stop` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/scroll-snap-stop
@mixin scroll-snap-stop($token) {
  @include css-property-with-token('scroll-snap-stop', $token);
}


/// Applies the `$token` to the CSS `scroll-snap-type` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Scroll Snap
/// @access public
/// @param {string} $token - Name of token to apply to the property.
/// @output CSS `scroll-snap-type` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/scroll-snap-type
@mixin scroll-snap-type($token) {
  @include css-property-with-token('scroll-snap-type', $token);
}


/// Applies the `$token` to the CSS `scroll-snap-type-x` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Scroll Snap
/// @access public
/// @param {string} $token - Name of token to apply to the property.
/// @output CSS `scroll-snap-type-x` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/scroll-snap-type-x
@mixin scroll-snap-type-x($token) {
  @include css-property-with-token('scroll-snap-type-x', $token);
}


/// Applies the `$token` to the CSS `scroll-snap-type-y` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Scroll Snap
/// @access public
/// @param {string} $token - Name of token to apply to the property.
/// @output CSS `scroll-snap-type-y` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/scroll-snap-type-y
@mixin scroll-snap-type-y($token) {
  @include css-property-with-token('scroll-snap-type-y', $token);
}


/// Applies the `$token` to the CSS `shape-image-threshold` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Shapes
/// @access public
/// @param {string} $token - Name of token to apply to the property.
/// @output CSS `shape-image-threshold` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/shape-image-threshold
@mixin shape-image-threshold($token) {
  @include css-property-with-token('shape-image-threshold', $token);
}


/// Applies the `$token` to the CSS `shape-margin` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Shapes
/// @access public
/// @param {string} $token - Name of token to apply to the property.
/// @output CSS `shape-margin` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/shape-margin
@mixin shape-margin($token) {
  @include css-property-with-token('shape-margin', $token);
}


/// Applies the `$token` to the CSS `shape-outside` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Shapes
/// @access public
/// @param {string} $token - Name of token to apply to the property.
/// @output CSS `shape-outside` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/shape-outside
@mixin shape-outside($token) {
  @include css-property-with-token('shape-outside', $token);
}


/// Applies the `$token` to the CSS `tab-size` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Text
/// @access public
/// @param {string} $token - Name of token to apply to the property.
/// @output CSS `tab-size` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/tab-size
@mixin tab-size($token) {
  @include css-property-with-token('tab-size', $token);
}


/// Applies the `$token` to the CSS `table-layout` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Table
/// @access public
/// @param {string} $token - Name of token to apply to the property.
/// @output CSS `table-layout` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/table-layout
@mixin table-layout($token) {
  @include css-property-with-token('table-layout', $token);
}


/// Applies the `$token` to the CSS `text-align` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Text
/// @access public
/// @param {string} $token - Name of token to apply to the property.
/// @output CSS `text-align` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/text-align
@mixin text-align($token) {
  @include css-property-with-token('text-align', $token);
}


/// Applies the `$token` to the CSS `text-align-last` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Text
/// @access public
/// @param {string} $token - Name of token to apply to the property.
/// @output CSS `text-align-last` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/text-align-last
@mixin text-align-last($token) {
  @include css-property-with-token('text-align-last', $token);
}


/// Applies the `$token` to the CSS `text-combine-upright` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Writing Modes
/// @access public
/// @param {string} $token - Name of token to apply to the property.
/// @output CSS `text-combine-upright` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/text-combine-upright
@mixin text-combine-upright($token) {
  @include css-property-with-token('text-combine-upright', $token);
}


/// Applies the `$token` to the CSS `text-decoration` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Text Decoration
/// @access public
/// @param {string} $token - Name of token to apply to the property.
/// @output CSS `text-decoration` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/text-decoration
@mixin text-decoration($token) {
  @include css-property-with-token('text-decoration', $token);
}


/// Applies the `$token` to the CSS `text-decoration-color` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Text Decoration
/// @access public
/// @param {string} $token - Name of token to apply to the property.
/// @output CSS `text-decoration-color` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/text-decoration-color
@mixin text-decoration-color($token) {
  @include css-property-with-token('text-decoration-color', $token);
}


/// Applies the `$token` to the CSS `text-decoration-line` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Text Decoration
/// @access public
/// @param {string} $token - Name of token to apply to the property.
/// @output CSS `text-decoration-line` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/text-decoration-line
@mixin text-decoration-line($token) {
  @include css-property-with-token('text-decoration-line', $token);
}


/// Applies the `$token` to the CSS `text-decoration-skip` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Text Decoration
/// @access public
/// @param {string} $token - Name of token to apply to the property.
/// @output CSS `text-decoration-skip` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/text-decoration-skip
@mixin text-decoration-skip($token) {
  @include css-property-with-token('text-decoration-skip', $token);
}


/// Applies the `$token` to the CSS `text-decoration-skip-ink` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Text Decoration
/// @access public
/// @param {string} $token - Name of token to apply to the property.
/// @output CSS `text-decoration-skip-ink` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/text-decoration-skip-ink
@mixin text-decoration-skip-ink($token) {
  @include css-property-with-token('text-decoration-skip-ink', $token);
}


/// Applies the `$token` to the CSS `text-decoration-style` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Text Decoration
/// @access public
/// @param {string} $token - Name of token to apply to the property.
/// @output CSS `text-decoration-style` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/text-decoration-style
@mixin text-decoration-style($token) {
  @include css-property-with-token('text-decoration-style', $token);
}


/// Applies the `$token` to the CSS `text-decoration-thickness` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Text Decoration
/// @access public
/// @param {string} $token - Name of token to apply to the property.
/// @output CSS `text-decoration-thickness` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/text-decoration-thickness
@mixin text-decoration-thickness($token) {
  @include css-property-with-token('text-decoration-thickness', $token);
}


/// Applies the `$token` to the CSS `text-emphasis` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Text Decoration
/// @access public
/// @param {string} $token - Name of token to apply to the property.
/// @output CSS `text-emphasis` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/text-emphasis
@mixin text-emphasis($token) {
  @include css-property-with-token('text-emphasis', $token);
}


/// Applies the `$token` to the CSS `text-emphasis-color` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Text Decoration
/// @access public
/// @param {string} $token - Name of token to apply to the property.
/// @output CSS `text-emphasis-color` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/text-emphasis-color
@mixin text-emphasis-color($token) {
  @include css-property-with-token('text-emphasis-color', $token);
}


/// Applies the `$token` to the CSS `text-emphasis-position` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Text Decoration
/// @access public
/// @param {string} $token - Name of token to apply to the property.
/// @output CSS `text-emphasis-position` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/text-emphasis-position
@mixin text-emphasis-position($token) {
  @include css-property-with-token('text-emphasis-position', $token);
}


/// Applies the `$token` to the CSS `text-emphasis-style` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Text Decoration
/// @access public
/// @param {string} $token - Name of token to apply to the property.
/// @output CSS `text-emphasis-style` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/text-emphasis-style
@mixin text-emphasis-style($token) {
  @include css-property-with-token('text-emphasis-style', $token);
}


/// Applies the `$token` to the CSS `text-indent` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Text
/// @access public
/// @param {string} $token - Name of token to apply to the property.
/// @output CSS `text-indent` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/text-indent
@mixin text-indent($token) {
  @include css-property-with-token('text-indent', $token);
}


/// Applies the `$token` to the CSS `text-justify` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Text
/// @access public
/// @param {string} $token - Name of token to apply to the property.
/// @output CSS `text-justify` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/text-justify
@mixin text-justify($token) {
  @include css-property-with-token('text-justify', $token);
}


/// Applies the `$token` to the CSS `text-orientation` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Writing Modes
/// @access public
/// @param {string} $token - Name of token to apply to the property.
/// @output CSS `text-orientation` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/text-orientation
@mixin text-orientation($token) {
  @include css-property-with-token('text-orientation', $token);
}


/// Applies the `$token` to the CSS `text-overflow` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Basic User Interface
/// @access public
/// @param {string} $token - Name of token to apply to the property.
/// @output CSS `text-overflow` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/text-overflow
@mixin text-overflow($token) {
  @include css-property-with-token('text-overflow', $token);
}


/// Applies the `$token` to the CSS `text-rendering` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Miscellaneous
/// @access public
/// @param {string} $token - Name of token to apply to the property.
/// @output CSS `text-rendering` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/text-rendering
@mixin text-rendering($token) {
  @include css-property-with-token('text-rendering', $token);
}


/// Applies the `$token` to the CSS `text-shadow` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Text Decoration
/// @access public
/// @param {string} $token - Name of token to apply to the property.
/// @output CSS `text-shadow` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/text-shadow
@mixin text-shadow($token) {
  @include css-property-with-token('text-shadow', $token);
}


/// Applies the `$token` to the CSS `text-size-adjust` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Text
/// @access public
/// @param {string} $token - Name of token to apply to the property.
/// @output CSS `text-size-adjust` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/text-size-adjust
@mixin text-size-adjust($token) {
  @include css-property-with-token('text-size-adjust', $token);
}


/// Applies the `$token` to the CSS `text-transform` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Text
/// @access public
/// @param {string} $token - Name of token to apply to the property.
/// @output CSS `text-transform` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/text-transform
@mixin text-transform($token) {
  @include css-property-with-token('text-transform', $token);
}


/// Applies the `$token` to the CSS `text-underline-offset` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Text Decoration
/// @access public
/// @param {string} $token - Name of token to apply to the property.
/// @output CSS `text-underline-offset` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/text-underline-offset
@mixin text-underline-offset($token) {
  @include css-property-with-token('text-underline-offset', $token);
}


/// Applies the `$token` to the CSS `text-underline-position` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Text Decoration
/// @access public
/// @param {string} $token - Name of token to apply to the property.
/// @output CSS `text-underline-position` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/text-underline-position
@mixin text-underline-position($token) {
  @include css-property-with-token('text-underline-position', $token);
}


/// Applies the `$token` to the CSS `top` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Positioning
/// @access public
/// @param {string} $token - Name of token to apply to the property.
/// @output CSS `top` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/top
@mixin top($token) {
  @include css-property-with-token('top', $token);
}


/// Applies the `$token` to the CSS `touch-action` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group Pointer Events
/// @access public
/// @param {string} $token - Name of token to apply to the property.
/// @output CSS `touch-action` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/touch-action
@mixin touch-action($token) {
  @include css-property-with-token('touch-action', $token);
}


/// Applies the `$token` to the CSS `transform` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Transforms
/// @access public
/// @param {string} $token - Name of token to apply to the property.
/// @output CSS `transform` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/transform
@mixin transform($token) {
  @include css-property-with-token('transform', $token);
}


/// Applies the `$token` to the CSS `transform-box` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Transforms
/// @access public
/// @param {string} $token - Name of token to apply to the property.
/// @output CSS `transform-box` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/transform-box
@mixin transform-box($token) {
  @include css-property-with-token('transform-box', $token);
}


/// Applies the `$token` to the CSS `transform-origin` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Transforms
/// @access public
/// @param {string} $token - Name of token to apply to the property.
/// @output CSS `transform-origin` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/transform-origin
@mixin transform-origin($token) {
  @include css-property-with-token('transform-origin', $token);
}


/// Applies the `$token` to the CSS `transform-style` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Transforms
/// @access public
/// @param {string} $token - Name of token to apply to the property.
/// @output CSS `transform-style` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/transform-style
@mixin transform-style($token) {
  @include css-property-with-token('transform-style', $token);
}


/// Applies the `$token` to the CSS `transition` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Transitions
/// @access public
/// @param {string} $token - Name of token to apply to the property.
/// @output CSS `transition` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/transition
@mixin transition($token) {
  @include css-property-with-token('transition', $token);
}


/// Applies the `$token` to the CSS `transition-delay` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Transitions
/// @access public
/// @param {string} $token - Name of token to apply to the property.
/// @output CSS `transition-delay` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/transition-delay
@mixin transition-delay($token) {
  @include css-property-with-token('transition-delay', $token);
}


/// Applies the `$token` to the CSS `transition-duration` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Transitions
/// @access public
/// @param {string} $token - Name of token to apply to the property.
/// @output CSS `transition-duration` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/transition-duration
@mixin transition-duration($token) {
  @include css-property-with-token('transition-duration', $token);
}


/// Applies the `$token` to the CSS `transition-property` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Transitions
/// @access public
/// @param {string} $token - Name of token to apply to the property.
/// @output CSS `transition-property` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/transition-property
@mixin transition-property($token) {
  @include css-property-with-token('transition-property', $token);
}


/// Applies the `$token` to the CSS `transition-timing-function` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Transitions
/// @access public
/// @param {string} $token - Name of token to apply to the property.
/// @output CSS `transition-timing-function` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/transition-timing-function
@mixin transition-timing-function($token) {
  @include css-property-with-token('transition-timing-function', $token);
}


/// Applies the `$token` to the CSS `translate` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Transforms
/// @access public
/// @param {string} $token - Name of token to apply to the property.
/// @output CSS `translate` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/translate
@mixin translate($token) {
  @include css-property-with-token('translate', $token);
}


/// Applies the `$token` to the CSS `unicode-bidi` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Writing Modes
/// @access public
/// @param {string} $token - Name of token to apply to the property.
/// @output CSS `unicode-bidi` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/unicode-bidi
@mixin unicode-bidi($token) {
  @include css-property-with-token('unicode-bidi', $token);
}


/// Applies the `$token` to the CSS `user-select` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Basic User Interface
/// @access public
/// @param {string} $token - Name of token to apply to the property.
/// @output CSS `user-select` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/user-select
@mixin user-select($token) {
  @include css-property-with-token('user-select', $token);
}


/// Applies the `$token` to the CSS `vertical-align` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Table
/// @access public
/// @param {string} $token - Name of token to apply to the property.
/// @output CSS `vertical-align` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/vertical-align
@mixin vertical-align($token) {
  @include css-property-with-token('vertical-align', $token);
}


/// Applies the `$token` to the CSS `visibility` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Box Model
/// @access public
/// @param {string} $token - Name of token to apply to the property.
/// @output CSS `visibility` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/visibility
@mixin visibility($token) {
  @include css-property-with-token('visibility', $token);
}


/// Applies the `$token` to the CSS `white-space` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Text
/// @access public
/// @param {string} $token - Name of token to apply to the property.
/// @output CSS `white-space` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/white-space
@mixin white-space($token) {
  @include css-property-with-token('white-space', $token);
}


/// Applies the `$token` to the CSS `widows` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Fragmentation
/// @access public
/// @param {string} $token - Name of token to apply to the property.
/// @output CSS `widows` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/widows
@mixin widows($token) {
  @include css-property-with-token('widows', $token);
}


/// Applies the `$token` to the CSS `width` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Box Model
/// @access public
/// @param {string} $token - Name of token to apply to the property.
/// @output CSS `width` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/width
@mixin width($token) {
  @include css-property-with-token('width', $token);
}


/// Applies the `$token` to the CSS `will-change` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Will Change
/// @access public
/// @param {string} $token - Name of token to apply to the property.
/// @output CSS `will-change` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/will-change
@mixin will-change($token) {
  @include css-property-with-token('will-change', $token);
}


/// Applies the `$token` to the CSS `word-break` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Text
/// @access public
/// @param {string} $token - Name of token to apply to the property.
/// @output CSS `word-break` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/word-break
@mixin word-break($token) {
  @include css-property-with-token('word-break', $token);
}


/// Applies the `$token` to the CSS `word-spacing` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Text
/// @access public
/// @param {string} $token - Name of token to apply to the property.
/// @output CSS `word-spacing` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/word-spacing
@mixin word-spacing($token) {
  @include css-property-with-token('word-spacing', $token);
}


/// Applies the `$token` to the CSS `word-wrap` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Text
/// @access public
/// @param {string} $token - Name of token to apply to the property.
/// @output CSS `word-wrap` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/overflow-wrap
@mixin word-wrap($token) {
  @include css-property-with-token('word-wrap', $token);
}


/// Applies the `$token` to the CSS `writing-mode` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Writing Modes
/// @access public
/// @param {string} $token - Name of token to apply to the property.
/// @output CSS `writing-mode` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/writing-mode
@mixin writing-mode($token) {
  @include css-property-with-token('writing-mode', $token);
}


/// Applies the `$token` to the CSS `z-index` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group CSS Positioning
/// @access public
/// @param {string} $token - Name of token to apply to the property.
/// @output CSS `z-index` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/z-index
@mixin z-index($token) {
  @include css-property-with-token('z-index', $token);
}


/// Applies the `$token` to the CSS `zoom` property.
/// There is no type checking, so the token value must be valid for the property.
/// @group Microsoft Extensions
/// @access public
/// @param {string} $token - Name of token to apply to the property.
/// @output CSS `zoom` property set to the `$token` value.
/// @see https://developer.mozilla.org/docs/Web/CSS/zoom
@mixin zoom($token) {
  @include css-property-with-token('zoom', $token);
}

