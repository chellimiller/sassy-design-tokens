@use "sass:map" as map;
@use "sass:list" as list;
@use "sass:string" as string;

$tokens: () !default;

/// Determine a safe `$unsafe-token-key` value that exists.
/// If there is no token, then `$allow-prefix` and `$allow-suffix` values will be used.
/// Prefix and suffix will be added with `dash-case`.
/// @param {string} $unsafe-token-key - Token key that may or may not exist.
/// @param {string} $allow-prefix [null] - Allowable prefix to try if key does not exist.
/// @param {string} $allow-suffix ["default"] - Allowable suffix to try if key does not exist.
/// @todo Add support for multiple allowable prefixes and suffixes
/// @return Safe token key that is verified to exist.
@function safe-token-key(
  $unsafe-token-key,
  $allow-prefix: null,
  $allow-suffix: "default"
) {
  @if (map.has-key($tokens, $unsafe-token-key)) {
    // Exists as is, so nothing needs to be done.
    @return $unsafe-token-key;
  }

  $alt-keys: ();

  @if ($allow-prefix != null) {
    $prefix-key: "#{$allow-prefix}-#{$unsafe-token-key}";
    $alt-keys: list.append($alt-keys, $prefix-key);

    @if ($allow-suffix != null) {
      $prefix-suffix-key: "#{$prefix-key}-#{$allow-suffix}";
      $alt-keys: list.append($alt-keys, $prefix-suffix-key);
    }
  }

  @if ($allow-suffix != null) {
    $suffix-key: "#{$unsafe-token-key}-#{$allow-suffix}";
    $alt-keys: list.append($alt-keys, $suffix-key);
  }

  @each $alt-key in $alt-keys {
    @if (map.has-key($tokens, $alt-key)) {
      @return $alt-key;
    }
  }

  @error "$tokens does not contain key '#{$unsafe-token-key}' or any of #{$alt-keys}\n$tokens: #{$tokens}";
}

/// Get the token value for the specific `$key`.
/// If there is no token, then "`$key`-default" will be attempted.
/// An error will be thrown if neither exists.
/// @param {string} $key - Token key
/// @return Value of the token
@function token($key) {
  // If the key has already been made safe before this is called,
  //  then safe-token-key will return `$key` on the first if-condition.
  @return map.get($tokens, safe-token-key($key));
}

/// Flatten map of tokens
/// @param {map} $nested-tokens - Map of tokens that may or may not be nested
/// @todo Add check to verify token exists
/// @return Value of the token
@function flat-tokens($nested-tokens) {
  $flat-tokens: ();

  @each $key, $value in $nested-tokens {
    @if (type-of($value) == "map") {
      $child-tokens: flat-tokens($value);
      @each $child-key, $child-value in $child-tokens {
        $flat-key: "#{string.unquote($key)}-#{string.unquote($child-key)}";
        $flat-tokens: map.set($flat-tokens, $flat-key, $child-value);
      }
    } @else {
      $flat-tokens: map.set($flat-tokens, $key, $value);
    }
  }

  @return $flat-tokens;
}

/// Include CSS variables for the token values.
/// @todo Add ability to filter tokens
@mixin tokens($token-map: $tokens) {
  $flat-tokens: flat-tokens($token-map);

  @each $key, $value in $flat-tokens {
    --#{string.unquote($key)}: #{$value};
  }
}

/// Include the token as the value for the CSS property.
/// Use the CSS variable but fallback to the token value.
/// @param {string} $css-property - CSS property to set
/// @param {string} $token - Key for the token
/// @output Token value set to CSS property
@mixin css-property-with-token($css-property, $token) {
  // We want to get the safe token ahead of time
  // This is so that we call the correct CSS variable
  $safe-token-key: safe-token-key(
    $unsafe-token-key: $token,
    $allow-prefix: $css-property,
  );
  $value: token($safe-token-key);

  #{string.unquote($css-property)}: #{$value};
  #{string.unquote($css-property)}: var(
    --#{string.unquote($safe-token-key)},
    #{$value}
  );
}
